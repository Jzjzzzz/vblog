/*
 Navicat Premium Data Transfer

 Source Server         : localhost
 Source Server Type    : MySQL
 Source Server Version : 50732
 Source Host           : localhost:3306
 Source Schema         : vblog

 Target Server Type    : MySQL
 Target Server Version : 50732
 File Encoding         : 65001

 Date: 31/10/2022 15:21:11
*/

SET NAMES utf8mb4;
SET FOREIGN_KEY_CHECKS = 0;

-- ----------------------------
-- Table structure for admin_user
-- ----------------------------
DROP TABLE IF EXISTS `admin_user`;
CREATE TABLE `admin_user`  (
  `id` bigint(11) UNSIGNED ZEROFILL NOT NULL AUTO_INCREMENT,
  `username` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `password` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `phone` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,
  `avatar` text CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL,
  `create_time` datetime NOT NULL,
  `update_time` datetime NOT NULL,
  `roles` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,
  `introduction` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 2 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = '管理员用户表' ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of admin_user
-- ----------------------------
INSERT INTO `admin_user` VALUES (00000000001, 'admin', '9bda42f78a579ca9e9397936c9558338', '18176702572', 'https://vue-vblog.oss-cn-shenzhen.aliyuncs.com/adminAvatar/2022/08/19/80b086d23aac408c95517bd5ebc4eea3.jpg', '2022-06-07 15:06:24', '2022-09-05 16:42:14', 'admin', 'I am a super administrator');

-- ----------------------------
-- Table structure for article_comment
-- ----------------------------
DROP TABLE IF EXISTS `article_comment`;
CREATE TABLE `article_comment`  (
  `id` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `nick_name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '昵称',
  `email` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '邮箱',
  `content` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '内容',
  `create_time` datetime NULL DEFAULT NULL COMMENT '创建时间',
  `update_time` datetime NULL DEFAULT NULL COMMENT '修改时间',
  `status` varchar(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '状态',
  `parent_status` varchar(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '是否为父节点',
  `article_id` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '文章id',
  `comment_type` varchar(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '评论类型(0-留言板,1-文章评论)',
  `parent_id` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '父节点id',
  `avatar` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '头像',
  `ip` varchar(15) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '评论ip地址',
  `city` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '所属省市',
  `audit_status` varchar(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '审核状态(0-未审核,1-审核通过,2-审核未通过)',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = '留言板' ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of article_comment
-- ----------------------------

-- ----------------------------
-- Table structure for article_content
-- ----------------------------
DROP TABLE IF EXISTS `article_content`;
CREATE TABLE `article_content`  (
  `id` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '文章内容id',
  `content` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL COMMENT '文章内容',
  `create_time` datetime NULL DEFAULT NULL COMMENT '创建时间',
  `update_time` datetime NULL DEFAULT NULL COMMENT '修改时间',
  `html_content` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL COMMENT '文章内容转html',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = '文章内容' ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of article_content
-- ----------------------------
INSERT INTO `article_content` VALUES ('33eaafbcb8d03c1eb2de9de8d49a6fe7', '### 1 服务端代码\n```java\npublic class ChatServer {\n\n    //服务器端启动方法\n    public void startServer() throws Exception {\n        //创建Selector选择器\n        Selector selector = Selector.open();\n        //创建ServerSocketChannel通道\n        ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();\n        //为Channel通道绑定监听端口\n        serverSocketChannel.bind(new InetSocketAddress(8000));\n        //通道设置为非阻塞\n        serverSocketChannel.configureBlocking(false);\n        //把channel通道注册到selector选择器上\n        serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);\n        System.out.println(\"服务器已经启动成功了\");\n        //循环,等待新链接接入\n        for(;;){\n            //获取channel数量\n            int readChannels = selector.select();\n            if(readChannels == 0){\n                continue;\n            }\n            //获取可用的channel\n            Set<SelectionKey> selectionKeys = selector.selectedKeys();\n            //遍历集合\n            Iterator<SelectionKey> iterator = selectionKeys.iterator();\n            while (iterator.hasNext()){\n                SelectionKey selectionKey = iterator.next();\n                //移除掉set集合当前selectionKey\n                iterator.remove();\n                //根据就绪状态,调用对应方法实现具体业务操作\n                //如果accept状态\n                if(selectionKey.isAcceptable()){\n                    acceptOperator(serverSocketChannel,selector);\n                }\n                //如果可读状态\n                if(selectionKey.isReadable()){\n                    readOperator(selector,selectionKey);\n                }\n            }\n        }\n\n    }\n\n    //处理接入状态操作\n    private void acceptOperator(ServerSocketChannel serverSocketChannel, Selector selector)  throws Exception{\n        //接入状态 创建socketChannel\n        SocketChannel socketChannel = serverSocketChannel.accept();\n        //把socketChannel设置为非阻塞模式\n        socketChannel.configureBlocking(false);\n        //把channel注册到selector选择器上，监听可读状态\n        socketChannel.register(selector,SelectionKey.OP_READ);\n        //客户端回复信息\n        socketChannel.write(Charset.forName(\"UTF-8\").encode(\"欢迎您进入聊天室\"));\n    }\n\n    //处理可读状态操作\n    private void readOperator(Selector selector, SelectionKey selectionKey) throws Exception{\n        //从SelectionKey获取到已经就绪的通道\n        SocketChannel socketChannel =(SocketChannel) selectionKey.channel();\n        //创建buffer\n        ByteBuffer byteBuffer = ByteBuffer.allocate(1024);\n        //循环读取客户端消息\n        int readLength = socketChannel.read(byteBuffer);\n        String message = \"\";\n        if (readLength>0){\n            //切换读模式\n            byteBuffer.flip();\n            message+=Charset.forName(\"UTF-8\").decode(byteBuffer);\n        }\n        //将channel再次注册到选择器上,监听可读状态\n        socketChannel.register(selector,SelectionKey.OP_READ);\n        //把客户端发送消息，广播到其他客户端\n        if(message.length()>0){\n            //广播给其他客户端\n            castOtherClient(message,selector,socketChannel);\n            System.out.println(message);\n        }\n    }\n\n    //广播给其他客户端\n    private void castOtherClient(String message, Selector selector, SocketChannel socketChannel) throws Exception{\n        //获取所有已经接入的客户端channel\n        Set<SelectionKey> selectionKeySet = selector.keys();\n        //循环向所有channel广播消息\n        for(SelectionKey selectionKey : selectionKeySet){\n            //获取每个channel\n            Channel tarChannel = selectionKey.channel();\n            //不需要给自己发送\n            if(tarChannel instanceof SocketChannel && tarChannel != socketChannel){\n                ((SocketChannel)tarChannel).write(Charset.forName(\"UTF-8\").encode(message));\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        try {\n            new ChatServer().startServer();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n\n\n### 2 客户端代码\n\n```java\npublic class ChatClient {\n\n    //启动客户端方法\n    public void startClient(String name) throws Exception{\n        //连接服务器端\n        SocketChannel socketChannel = SocketChannel.open(new InetSocketAddress(\"127.0.0.1\", 8000));\n        //接收服务器端响应数据\n        Selector selector = Selector.open();\n        socketChannel.configureBlocking(false);\n        socketChannel.register(selector, SelectionKey.OP_READ);\n        //创建线程\n        new Thread(new ClientThread(selector)).start();\n\n        //向服务器端发送消息\n        Scanner scanner = new Scanner(System.in);\n        while (scanner.hasNextLine()){\n            String msg = scanner.nextLine();\n            if(msg.length()>0){\n                socketChannel.write(Charset.forName(\"UTF-8\").encode(name+\":\"+msg));\n            }\n        }\n    }\n    \n}\n```\n\n#### 2.1 ClientThread\n```java\npublic class ClientThread implements Runnable{\n\n    private Selector selector;\n\n    public ClientThread(Selector selector) {\n        this.selector = selector;\n    }\n\n    @Override\n    public void run() {\n        try {\n            for(;;){\n                //获取channel数量\n                int readChannels = selector.select();\n                if(readChannels == 0){\n                    continue;\n                }\n                //获取可用的channel\n                Set<SelectionKey> selectionKeys = selector.selectedKeys();\n                //遍历集合\n                Iterator<SelectionKey> iterator = selectionKeys.iterator();\n                while (iterator.hasNext()){\n                    SelectionKey selectionKey = iterator.next();\n                    //移除掉set集合当前selectionKey\n                    iterator.remove();\n                    //根据就绪状态,调用对应方法实现具体业务操作\n                    //如果可读状态\n                    if(selectionKey.isReadable()){\n                        readOperator(selector,selectionKey);\n                    }\n                }\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    //处理可读状态操作\n    private void readOperator(Selector selector, SelectionKey selectionKey) throws Exception{\n        //从SelectionKey获取到已经就绪的通道\n        SocketChannel socketChannel =(SocketChannel) selectionKey.channel();\n        //创建buffer\n        ByteBuffer byteBuffer = ByteBuffer.allocate(1024);\n        //循环读取客户端消息\n        int readLength = socketChannel.read(byteBuffer);\n        String message = \"\";\n        if (readLength>0){\n            //切换读模式\n            byteBuffer.flip();\n            message+= Charset.forName(\"UTF-8\").decode(byteBuffer);\n        }\n        //将channel再次注册到选择器上,监听可读状态\n        socketChannel.register(selector,SelectionKey.OP_READ);\n        //把客户端发送消息，广播到其他客户端\n        if(message.length()>0){\n            //广播给其他客户端\n            System.out.println(message);\n        }\n    }\n}\n```\n\n#### 2.2 AClient\n```java\npublic class AClient {\n    public static void main(String[] args) {\n        try {\n            new ChatClient().startClient(\"lucy\");\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n\n#### 2.3 BClient\n```java\npublic class BClient {\n    public static void main(String[] args) {\n        try {\n            new ChatClient().startClient(\"mary\");\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n\n', '2022-10-12 11:33:21', '2022-10-13 10:29:00', '<h3><a id=\"1__0\"></a>1 服务端代码</h3>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ChatServer</span> {\n\n    <span class=\"hljs-comment\">//服务器端启动方法</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">startServer</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> Exception {\n        <span class=\"hljs-comment\">//创建Selector选择器</span>\n        <span class=\"hljs-type\">Selector</span> <span class=\"hljs-variable\">selector</span> <span class=\"hljs-operator\">=</span> Selector.open();\n        <span class=\"hljs-comment\">//创建ServerSocketChannel通道</span>\n        <span class=\"hljs-type\">ServerSocketChannel</span> <span class=\"hljs-variable\">serverSocketChannel</span> <span class=\"hljs-operator\">=</span> ServerSocketChannel.open();\n        <span class=\"hljs-comment\">//为Channel通道绑定监听端口</span>\n        serverSocketChannel.bind(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">InetSocketAddress</span>(<span class=\"hljs-number\">8000</span>));\n        <span class=\"hljs-comment\">//通道设置为非阻塞</span>\n        serverSocketChannel.configureBlocking(<span class=\"hljs-literal\">false</span>);\n        <span class=\"hljs-comment\">//把channel通道注册到selector选择器上</span>\n        serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);\n        System.out.println(<span class=\"hljs-string\">&quot;服务器已经启动成功了&quot;</span>);\n        <span class=\"hljs-comment\">//循环,等待新链接接入</span>\n        <span class=\"hljs-keyword\">for</span>(;;){\n            <span class=\"hljs-comment\">//获取channel数量</span>\n            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">readChannels</span> <span class=\"hljs-operator\">=</span> selector.select();\n            <span class=\"hljs-keyword\">if</span>(readChannels == <span class=\"hljs-number\">0</span>){\n                <span class=\"hljs-keyword\">continue</span>;\n            }\n            <span class=\"hljs-comment\">//获取可用的channel</span>\n            Set&lt;SelectionKey&gt; selectionKeys = selector.selectedKeys();\n            <span class=\"hljs-comment\">//遍历集合</span>\n            Iterator&lt;SelectionKey&gt; iterator = selectionKeys.iterator();\n            <span class=\"hljs-keyword\">while</span> (iterator.hasNext()){\n                <span class=\"hljs-type\">SelectionKey</span> <span class=\"hljs-variable\">selectionKey</span> <span class=\"hljs-operator\">=</span> iterator.next();\n                <span class=\"hljs-comment\">//移除掉set集合当前selectionKey</span>\n                iterator.remove();\n                <span class=\"hljs-comment\">//根据就绪状态,调用对应方法实现具体业务操作</span>\n                <span class=\"hljs-comment\">//如果accept状态</span>\n                <span class=\"hljs-keyword\">if</span>(selectionKey.isAcceptable()){\n                    acceptOperator(serverSocketChannel,selector);\n                }\n                <span class=\"hljs-comment\">//如果可读状态</span>\n                <span class=\"hljs-keyword\">if</span>(selectionKey.isReadable()){\n                    readOperator(selector,selectionKey);\n                }\n            }\n        }\n\n    }\n\n    <span class=\"hljs-comment\">//处理接入状态操作</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">acceptOperator</span><span class=\"hljs-params\">(ServerSocketChannel serverSocketChannel, Selector selector)</span>  <span class=\"hljs-keyword\">throws</span> Exception{\n        <span class=\"hljs-comment\">//接入状态 创建socketChannel</span>\n        <span class=\"hljs-type\">SocketChannel</span> <span class=\"hljs-variable\">socketChannel</span> <span class=\"hljs-operator\">=</span> serverSocketChannel.accept();\n        <span class=\"hljs-comment\">//把socketChannel设置为非阻塞模式</span>\n        socketChannel.configureBlocking(<span class=\"hljs-literal\">false</span>);\n        <span class=\"hljs-comment\">//把channel注册到selector选择器上，监听可读状态</span>\n        socketChannel.register(selector,SelectionKey.OP_READ);\n        <span class=\"hljs-comment\">//客户端回复信息</span>\n        socketChannel.write(Charset.forName(<span class=\"hljs-string\">&quot;UTF-8&quot;</span>).encode(<span class=\"hljs-string\">&quot;欢迎您进入聊天室&quot;</span>));\n    }\n\n    <span class=\"hljs-comment\">//处理可读状态操作</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">readOperator</span><span class=\"hljs-params\">(Selector selector, SelectionKey selectionKey)</span> <span class=\"hljs-keyword\">throws</span> Exception{\n        <span class=\"hljs-comment\">//从SelectionKey获取到已经就绪的通道</span>\n        <span class=\"hljs-type\">SocketChannel</span> <span class=\"hljs-variable\">socketChannel</span> <span class=\"hljs-operator\">=</span>(SocketChannel) selectionKey.channel();\n        <span class=\"hljs-comment\">//创建buffer</span>\n        <span class=\"hljs-type\">ByteBuffer</span> <span class=\"hljs-variable\">byteBuffer</span> <span class=\"hljs-operator\">=</span> ByteBuffer.allocate(<span class=\"hljs-number\">1024</span>);\n        <span class=\"hljs-comment\">//循环读取客户端消息</span>\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">readLength</span> <span class=\"hljs-operator\">=</span> socketChannel.read(byteBuffer);\n        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">message</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;&quot;</span>;\n        <span class=\"hljs-keyword\">if</span> (readLength&gt;<span class=\"hljs-number\">0</span>){\n            <span class=\"hljs-comment\">//切换读模式</span>\n            byteBuffer.flip();\n            message+=Charset.forName(<span class=\"hljs-string\">&quot;UTF-8&quot;</span>).decode(byteBuffer);\n        }\n        <span class=\"hljs-comment\">//将channel再次注册到选择器上,监听可读状态</span>\n        socketChannel.register(selector,SelectionKey.OP_READ);\n        <span class=\"hljs-comment\">//把客户端发送消息，广播到其他客户端</span>\n        <span class=\"hljs-keyword\">if</span>(message.length()&gt;<span class=\"hljs-number\">0</span>){\n            <span class=\"hljs-comment\">//广播给其他客户端</span>\n            castOtherClient(message,selector,socketChannel);\n            System.out.println(message);\n        }\n    }\n\n    <span class=\"hljs-comment\">//广播给其他客户端</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">castOtherClient</span><span class=\"hljs-params\">(String message, Selector selector, SocketChannel socketChannel)</span> <span class=\"hljs-keyword\">throws</span> Exception{\n        <span class=\"hljs-comment\">//获取所有已经接入的客户端channel</span>\n        Set&lt;SelectionKey&gt; selectionKeySet = selector.keys();\n        <span class=\"hljs-comment\">//循环向所有channel广播消息</span>\n        <span class=\"hljs-keyword\">for</span>(SelectionKey selectionKey : selectionKeySet){\n            <span class=\"hljs-comment\">//获取每个channel</span>\n            <span class=\"hljs-type\">Channel</span> <span class=\"hljs-variable\">tarChannel</span> <span class=\"hljs-operator\">=</span> selectionKey.channel();\n            <span class=\"hljs-comment\">//不需要给自己发送</span>\n            <span class=\"hljs-keyword\">if</span>(tarChannel <span class=\"hljs-keyword\">instanceof</span> SocketChannel &amp;&amp; tarChannel != socketChannel){\n                ((SocketChannel)tarChannel).write(Charset.forName(<span class=\"hljs-string\">&quot;UTF-8&quot;</span>).encode(message));\n            }\n        }\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n        <span class=\"hljs-keyword\">try</span> {\n            <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChatServer</span>().startServer();\n        } <span class=\"hljs-keyword\">catch</span> (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n</code></div></pre>\n<h3><a id=\"2__108\"></a>2 客户端代码</h3>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ChatClient</span> {\n\n    <span class=\"hljs-comment\">//启动客户端方法</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">startClient</span><span class=\"hljs-params\">(String name)</span> <span class=\"hljs-keyword\">throws</span> Exception{\n        <span class=\"hljs-comment\">//连接服务器端</span>\n        <span class=\"hljs-type\">SocketChannel</span> <span class=\"hljs-variable\">socketChannel</span> <span class=\"hljs-operator\">=</span> SocketChannel.open(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">InetSocketAddress</span>(<span class=\"hljs-string\">&quot;127.0.0.1&quot;</span>, <span class=\"hljs-number\">8000</span>));\n        <span class=\"hljs-comment\">//接收服务器端响应数据</span>\n        <span class=\"hljs-type\">Selector</span> <span class=\"hljs-variable\">selector</span> <span class=\"hljs-operator\">=</span> Selector.open();\n        socketChannel.configureBlocking(<span class=\"hljs-literal\">false</span>);\n        socketChannel.register(selector, SelectionKey.OP_READ);\n        <span class=\"hljs-comment\">//创建线程</span>\n        <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Thread</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ClientThread</span>(selector)).start();\n\n        <span class=\"hljs-comment\">//向服务器端发送消息</span>\n        <span class=\"hljs-type\">Scanner</span> <span class=\"hljs-variable\">scanner</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Scanner</span>(System.in);\n        <span class=\"hljs-keyword\">while</span> (scanner.hasNextLine()){\n            <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">msg</span> <span class=\"hljs-operator\">=</span> scanner.nextLine();\n            <span class=\"hljs-keyword\">if</span>(msg.length()&gt;<span class=\"hljs-number\">0</span>){\n                socketChannel.write(Charset.forName(<span class=\"hljs-string\">&quot;UTF-8&quot;</span>).encode(name+<span class=\"hljs-string\">&quot;:&quot;</span>+msg));\n            }\n        }\n    }\n    \n}\n</code></div></pre>\n<h4><a id=\"21_ClientThread_137\"></a>2.1 ClientThread</h4>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ClientThread</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Runnable</span>{\n\n    <span class=\"hljs-keyword\">private</span> Selector selector;\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">ClientThread</span><span class=\"hljs-params\">(Selector selector)</span> {\n        <span class=\"hljs-built_in\">this</span>.selector = selector;\n    }\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">run</span><span class=\"hljs-params\">()</span> {\n        <span class=\"hljs-keyword\">try</span> {\n            <span class=\"hljs-keyword\">for</span>(;;){\n                <span class=\"hljs-comment\">//获取channel数量</span>\n                <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">readChannels</span> <span class=\"hljs-operator\">=</span> selector.select();\n                <span class=\"hljs-keyword\">if</span>(readChannels == <span class=\"hljs-number\">0</span>){\n                    <span class=\"hljs-keyword\">continue</span>;\n                }\n                <span class=\"hljs-comment\">//获取可用的channel</span>\n                Set&lt;SelectionKey&gt; selectionKeys = selector.selectedKeys();\n                <span class=\"hljs-comment\">//遍历集合</span>\n                Iterator&lt;SelectionKey&gt; iterator = selectionKeys.iterator();\n                <span class=\"hljs-keyword\">while</span> (iterator.hasNext()){\n                    <span class=\"hljs-type\">SelectionKey</span> <span class=\"hljs-variable\">selectionKey</span> <span class=\"hljs-operator\">=</span> iterator.next();\n                    <span class=\"hljs-comment\">//移除掉set集合当前selectionKey</span>\n                    iterator.remove();\n                    <span class=\"hljs-comment\">//根据就绪状态,调用对应方法实现具体业务操作</span>\n                    <span class=\"hljs-comment\">//如果可读状态</span>\n                    <span class=\"hljs-keyword\">if</span>(selectionKey.isReadable()){\n                        readOperator(selector,selectionKey);\n                    }\n                }\n            }\n        } <span class=\"hljs-keyword\">catch</span> (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    <span class=\"hljs-comment\">//处理可读状态操作</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">readOperator</span><span class=\"hljs-params\">(Selector selector, SelectionKey selectionKey)</span> <span class=\"hljs-keyword\">throws</span> Exception{\n        <span class=\"hljs-comment\">//从SelectionKey获取到已经就绪的通道</span>\n        <span class=\"hljs-type\">SocketChannel</span> <span class=\"hljs-variable\">socketChannel</span> <span class=\"hljs-operator\">=</span>(SocketChannel) selectionKey.channel();\n        <span class=\"hljs-comment\">//创建buffer</span>\n        <span class=\"hljs-type\">ByteBuffer</span> <span class=\"hljs-variable\">byteBuffer</span> <span class=\"hljs-operator\">=</span> ByteBuffer.allocate(<span class=\"hljs-number\">1024</span>);\n        <span class=\"hljs-comment\">//循环读取客户端消息</span>\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">readLength</span> <span class=\"hljs-operator\">=</span> socketChannel.read(byteBuffer);\n        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">message</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;&quot;</span>;\n        <span class=\"hljs-keyword\">if</span> (readLength&gt;<span class=\"hljs-number\">0</span>){\n            <span class=\"hljs-comment\">//切换读模式</span>\n            byteBuffer.flip();\n            message+= Charset.forName(<span class=\"hljs-string\">&quot;UTF-8&quot;</span>).decode(byteBuffer);\n        }\n        <span class=\"hljs-comment\">//将channel再次注册到选择器上,监听可读状态</span>\n        socketChannel.register(selector,SelectionKey.OP_READ);\n        <span class=\"hljs-comment\">//把客户端发送消息，广播到其他客户端</span>\n        <span class=\"hljs-keyword\">if</span>(message.length()&gt;<span class=\"hljs-number\">0</span>){\n            <span class=\"hljs-comment\">//广播给其他客户端</span>\n            System.out.println(message);\n        }\n    }\n}\n</code></div></pre>\n<h4><a id=\"22_AClient_201\"></a>2.2 AClient</h4>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AClient</span> {\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n        <span class=\"hljs-keyword\">try</span> {\n            <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChatClient</span>().startClient(<span class=\"hljs-string\">&quot;lucy&quot;</span>);\n        } <span class=\"hljs-keyword\">catch</span> (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n</code></div></pre>\n<h4><a id=\"23_BClient_214\"></a>2.3 BClient</h4>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">BClient</span> {\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n        <span class=\"hljs-keyword\">try</span> {\n            <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChatClient</span>().startClient(<span class=\"hljs-string\">&quot;mary&quot;</span>);\n        } <span class=\"hljs-keyword\">catch</span> (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n</code></div></pre>\n');
INSERT INTO `article_content` VALUES ('542c782529c33704c5f67d6e03ee939e', '# 二. Netty \n\n\n\n## 1. 概述\n\n### 1.1 Netty 是什么？\n\n```\nNetty is an asynchronous event-driven network application framework\nfor rapid development of maintainable high performance protocol servers & clients.\n```\n\nNetty 是一个异步的、基于事件驱动的网络应用框架，用于快速开发可维护、高性能的网络服务器和客户端\n\n\n\n### 1.2 Netty 的作者\n\n![](img/0005.png)\n\n他还是另一个著名网络应用框架 Mina 的重要贡献者\n\n\n\n### 1.3 Netty 的地位\n\nNetty 在 Java 网络应用框架中的地位就好比：Spring 框架在 JavaEE 开发中的地位\n\n以下的框架都使用了 Netty，因为它们有网络通信需求！\n\n* Cassandra - nosql 数据库\n* Spark - 大数据分布式计算框架\n* Hadoop - 大数据分布式存储框架\n* RocketMQ - ali 开源的消息队列\n* ElasticSearch - 搜索引擎\n* gRPC - rpc 框架\n* Dubbo - rpc 框架\n* Spring 5.x - flux api 完全抛弃了 tomcat ，使用 netty 作为服务器端\n* Zookeeper - 分布式协调框架\n\n\n\n### 1.4 Netty 的优势\n\n* Netty vs NIO，工作量大，bug 多\n  * 需要自己构建协议\n  * 解决 TCP 传输问题，如粘包、半包\n  * epoll 空轮询导致 CPU 100%\n  * 对 API 进行增强，使之更易用，如 FastThreadLocal => ThreadLocal，ByteBuf => ByteBuffer\n* Netty vs 其它网络应用框架\n  * Mina 由 apache 维护，将来 3.x 版本可能会有较大重构，破坏 API 向下兼容性，Netty 的开发迭代更迅速，API 更简洁、文档更优秀\n  * 久经考验，16年，Netty 版本\n    * 2.x 2004\n    * 3.x 2008\n    * 4.x 2013\n    * 5.x 已废弃（没有明显的性能提升，维护成本高）\n\n\n\n## 2. Hello World\n\n### 2.1 目标\n\n开发一个简单的服务器端和客户端\n\n* 客户端向服务器端发送 hello, world\n* 服务器仅接收，不返回\n\n\n\n加入依赖\n\n```xml\n<dependency>\n    <groupId>io.netty</groupId>\n    <artifactId>netty-all</artifactId>\n    <version>4.1.39.Final</version>\n</dependency>\n```\n\n\n\n\n\n### 2.2 服务器端\n\n```java\nnew ServerBootstrap()\n    .group(new NioEventLoopGroup()) // 1\n    .channel(NioServerSocketChannel.class) // 2\n    .childHandler(new ChannelInitializer<NioSocketChannel>() { // 3\n        protected void initChannel(NioSocketChannel ch) {\n            ch.pipeline().addLast(new StringDecoder()); // 5\n            ch.pipeline().addLast(new SimpleChannelInboundHandler<String>() { // 6\n                @Override\n                protected void channelRead0(ChannelHandlerContext ctx, String msg) {\n                    System.out.println(msg);\n                }\n            });\n        }\n    })\n    .bind(8080); // 4\n```\n\n代码解读\n- 1 处，创建 NioEventLoopGroup，可以简单理解为 `线程池 + Selector` 后面会详细展开\n- 2 处，选择服务 Scoket 实现类，其中 NioServerSocketChannel 表示基于 NIO 的服务器端实现，其它实现还有\n- 3 处，为啥方法叫 childHandler，是接下来添加的处理器都是给 SocketChannel 用的，而不是给 ServerSocketChannel。ChannelInitializer 处理器（仅执行一次），它的作用是待客户端 SocketChannel 建立连接后，执行 initChannel 以便添加更多的处理器\n- 4 处，ServerSocketChannel 绑定的监听端口\n- 5 处，SocketChannel 的处理器，解码 ByteBuf => String\n- 6 处，SocketChannel 的业务处理器，使用上一个处理器的处理结果\n\n\n\n### 2.3 客户端\n\n```java\nnew Bootstrap()\n    .group(new NioEventLoopGroup()) // 1\n    .channel(NioSocketChannel.class) // 2\n    .handler(new ChannelInitializer<Channel>() { // 3\n        @Override\n        protected void initChannel(Channel ch) {\n            ch.pipeline().addLast(new StringEncoder()); // 8\n        }\n    })\n    .connect(\"127.0.0.1\", 8080) // 4\n    .sync() // 5\n    .channel() // 6\n    .writeAndFlush(new Date() + \": hello world!\"); // 7\n```\n\n代码解读\n- 1 处，创建 NioEventLoopGroup，同 Server\n- 2 处，选择客户 Socket 实现类，NioSocketChannel 表示基于 NIO 的客户端实现，其它实现还有\n- 3 处，添加 SocketChannel 的处理器，ChannelInitializer 处理器（仅执行一次），它的作用是待客户端 SocketChannel 建立连接后，执行 initChannel 以便添加更多的处理器\n- 4 处，指定要连接的服务器和端口\n- 5 处，Netty 中很多方法都是异步的，如 connect，这时需要使用 sync 方法等待 connect 建立连接完毕\n- 6 处，获取 channel 对象，它即为通道抽象，可以进行数据读写操作\n- 7 处，写入消息并清空缓冲区\n- 8 处，消息会经过通道 handler 处理，这里是将 String => ByteBuf 发出\n- 数据经过网络传输，到达服务器端，服务器端 5 和 6 处的 handler 先后被触发，走完一个流程\n\n### 2.4 流程梳理\n\n#### 💡 提示\n\n> 一开始需要树立正确的观念\n>\n> * 把 channel 理解为数据的通道\n> * 把 msg 理解为流动的数据，最开始输入是 ByteBuf，但经过 pipeline 的加工，会变成其它类型对象，最后输出又变成 ByteBuf\n> * 把 handler 理解为数据的处理工序\n>   * 工序有多道，合在一起就是 pipeline，pipeline 负责发布事件（读、读取完成...）传播给每个 handler， handler 对自己感兴趣的事件进行处理（重写了相应事件处理方法）\n>   * handler 分 Inbound 和 Outbound 两类\n> * 把 eventLoop 理解为处理数据的工人\n>   * 工人可以管理多个 channel 的 io 操作，并且一旦工人负责了某个 channel，就要负责到底（绑定）\n>   * 工人既可以执行 io 操作，也可以进行任务处理，每位工人有任务队列，队列里可以堆放多个 channel 的待处理任务，任务分为普通任务、定时任务\n>   * 工人按照 pipeline 顺序，依次按照 handler 的规划（代码）处理数据，可以为每道工序指定不同的工人\n\n\n\n## 3. 组件\n\n### 3.1 EventLoop\n\n事件循环对象\n\nEventLoop 本质是一个单线程执行器（同时维护了一个 Selector），里面有 run 方法处理 Channel 上源源不断的 io 事件。\n\n它的继承关系比较复杂\n\n* 一条线是继承自 j.u.c.ScheduledExecutorService 因此包含了线程池中所有的方法\n* 另一条线是继承自 netty 自己的 OrderedEventExecutor，\n  * 提供了 boolean inEventLoop(Thread thread) 方法判断一个线程是否属于此 EventLoop\n  * 提供了 parent 方法来看看自己属于哪个 EventLoopGroup\n\n\n\n事件循环组\n\nEventLoopGroup 是一组 EventLoop，Channel 一般会调用 EventLoopGroup 的 register 方法来绑定其中一个 EventLoop，后续这个 Channel 上的 io 事件都由此 EventLoop 来处理（保证了 io 事件处理时的线程安全）\n\n* 继承自 netty 自己的 EventExecutorGroup\n  * 实现了 Iterable 接口提供遍历 EventLoop 的能力\n  * 另有 next 方法获取集合中下一个 EventLoop\n\n\n\n以一个简单的实现为例：\n\n```java\n// 内部创建了两个 EventLoop, 每个 EventLoop 维护一个线程\nDefaultEventLoopGroup group = new DefaultEventLoopGroup(2);\nSystem.out.println(group.next());\nSystem.out.println(group.next());\nSystem.out.println(group.next());\n```\n\n输出\n\n```\nio.netty.channel.DefaultEventLoop@60f82f98\nio.netty.channel.DefaultEventLoop@35f983a6\nio.netty.channel.DefaultEventLoop@60f82f98\n```\n\n也可以使用 for 循环\n\n```java\nDefaultEventLoopGroup group = new DefaultEventLoopGroup(2);\nfor (EventExecutor eventLoop : group) {\n    System.out.println(eventLoop);\n}\n```\n\n输出\n\n```\nio.netty.channel.DefaultEventLoop@60f82f98\nio.netty.channel.DefaultEventLoop@35f983a6\n```\n\n\n\n#### 💡 优雅关闭\n\n优雅关闭 `shutdownGracefully` 方法。该方法会首先切换 `EventLoopGroup` 到关闭状态从而拒绝新的任务的加入，然后在任务队列的任务都处理完成后，停止线程的运行。从而确保整体应用是在正常有序的状态下退出的\n\n\n\n#### 演示 NioEventLoop 处理 io 事件\n\n服务器端两个 nio worker 工人\n\n```java\nnew ServerBootstrap()\n    .group(new NioEventLoopGroup(1), new NioEventLoopGroup(2))\n    .channel(NioServerSocketChannel.class)\n    .childHandler(new ChannelInitializer<NioSocketChannel>() {\n        @Override\n        protected void initChannel(NioSocketChannel ch) {\n            ch.pipeline().addLast(new ChannelInboundHandlerAdapter() {\n                @Override\n                public void channelRead(ChannelHandlerContext ctx, Object msg) {\n                    ByteBuf byteBuf = msg instanceof ByteBuf ? ((ByteBuf) msg) : null;\n                    if (byteBuf != null) {\n                        byte[] buf = new byte[16];\n                        ByteBuf len = byteBuf.readBytes(buf, 0, byteBuf.readableBytes());\n                        log.debug(new String(buf));\n                    }\n                }\n            });\n        }\n    }).bind(8080).sync();\n```\n\n客户端，启动三次，分别修改发送字符串为 zhangsan（第一次），lisi（第二次），wangwu（第三次）\n\n```java\npublic static void main(String[] args) throws InterruptedException {\n    Channel channel = new Bootstrap()\n            .group(new NioEventLoopGroup(1))\n            .handler(new ChannelInitializer<NioSocketChannel>() {\n                @Override\n                protected void initChannel(NioSocketChannel ch) throws Exception {\n                    System.out.println(\"init...\");\n                    ch.pipeline().addLast(new LoggingHandler(LogLevel.DEBUG));\n                }\n            })\n            .channel(NioSocketChannel.class).connect(\"localhost\", 8080)\n            .sync()\n            .channel();\n\n    channel.writeAndFlush(ByteBufAllocator.DEFAULT.buffer().writeBytes(\"wangwu\".getBytes()));\n    Thread.sleep(2000);\n    channel.writeAndFlush(ByteBufAllocator.DEFAULT.buffer().writeBytes(\"wangwu\".getBytes()));\n```\n\n最后输出\n\n```\n22:03:34 [DEBUG] [nioEventLoopGroup-3-1] c.i.o.EventLoopTest - zhangsan       \n22:03:36 [DEBUG] [nioEventLoopGroup-3-1] c.i.o.EventLoopTest - zhangsan       \n22:05:36 [DEBUG] [nioEventLoopGroup-3-2] c.i.o.EventLoopTest - lisi           \n22:05:38 [DEBUG] [nioEventLoopGroup-3-2] c.i.o.EventLoopTest - lisi           \n22:06:09 [DEBUG] [nioEventLoopGroup-3-1] c.i.o.EventLoopTest - wangwu        \n22:06:11 [DEBUG] [nioEventLoopGroup-3-1] c.i.o.EventLoopTest - wangwu         \n```\n\n可以看到两个工人轮流处理 channel，但工人与 channel 之间进行了绑定\n\n![](img/0042.png)\n\n\n\n再增加两个非 nio 工人\n\n```java\nDefaultEventLoopGroup normalWorkers = new DefaultEventLoopGroup(2);\nnew ServerBootstrap()\n    .group(new NioEventLoopGroup(1), new NioEventLoopGroup(2))\n    .channel(NioServerSocketChannel.class)\n    .childHandler(new ChannelInitializer<NioSocketChannel>() {\n        @Override\n        protected void initChannel(NioSocketChannel ch)  {\n            ch.pipeline().addLast(new LoggingHandler(LogLevel.DEBUG));\n            ch.pipeline().addLast(normalWorkers,\"myhandler\",\n              new ChannelInboundHandlerAdapter() {\n                @Override\n                public void channelRead(ChannelHandlerContext ctx, Object msg) {\n                    ByteBuf byteBuf = msg instanceof ByteBuf ? ((ByteBuf) msg) : null;\n                    if (byteBuf != null) {\n                        byte[] buf = new byte[16];\n                        ByteBuf len = byteBuf.readBytes(buf, 0, byteBuf.readableBytes());\n                        log.debug(new String(buf));\n                    }\n                }\n            });\n        }\n    }).bind(8080).sync();\n```\n\n客户端代码不变，启动三次，分别修改发送字符串为 zhangsan（第一次），lisi（第二次），wangwu（第三次）\n\n输出\n\n```\n22:19:48 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x251562d5, L:/127.0.0.1:8080 - R:/127.0.0.1:52588] REGISTERED\n22:19:48 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x251562d5, L:/127.0.0.1:8080 - R:/127.0.0.1:52588] ACTIVE\n22:19:48 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x251562d5, L:/127.0.0.1:8080 - R:/127.0.0.1:52588] READ: 8B\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 7a 68 61 6e 67 73 61 6e                         |zhangsan        |\n+--------+-------------------------------------------------+----------------+\n22:19:48 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x251562d5, L:/127.0.0.1:8080 - R:/127.0.0.1:52588] READ COMPLETE\n22:19:48 [DEBUG] [defaultEventLoopGroup-2-1] c.i.o.EventLoopTest - zhangsan        \n22:19:50 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x251562d5, L:/127.0.0.1:8080 - R:/127.0.0.1:52588] READ: 8B\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 7a 68 61 6e 67 73 61 6e                         |zhangsan        |\n+--------+-------------------------------------------------+----------------+\n22:19:50 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x251562d5, L:/127.0.0.1:8080 - R:/127.0.0.1:52588] READ COMPLETE\n22:19:50 [DEBUG] [defaultEventLoopGroup-2-1] c.i.o.EventLoopTest - zhangsan        \n22:20:24 [DEBUG] [nioEventLoopGroup-4-2] i.n.h.l.LoggingHandler - [id: 0x94b2a840, L:/127.0.0.1:8080 - R:/127.0.0.1:52612] REGISTERED\n22:20:24 [DEBUG] [nioEventLoopGroup-4-2] i.n.h.l.LoggingHandler - [id: 0x94b2a840, L:/127.0.0.1:8080 - R:/127.0.0.1:52612] ACTIVE\n22:20:25 [DEBUG] [nioEventLoopGroup-4-2] i.n.h.l.LoggingHandler - [id: 0x94b2a840, L:/127.0.0.1:8080 - R:/127.0.0.1:52612] READ: 4B\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 6c 69 73 69                                     |lisi            |\n+--------+-------------------------------------------------+----------------+\n22:20:25 [DEBUG] [nioEventLoopGroup-4-2] i.n.h.l.LoggingHandler - [id: 0x94b2a840, L:/127.0.0.1:8080 - R:/127.0.0.1:52612] READ COMPLETE\n22:20:25 [DEBUG] [defaultEventLoopGroup-2-2] c.i.o.EventLoopTest - lisi            \n22:20:27 [DEBUG] [nioEventLoopGroup-4-2] i.n.h.l.LoggingHandler - [id: 0x94b2a840, L:/127.0.0.1:8080 - R:/127.0.0.1:52612] READ: 4B\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 6c 69 73 69                                     |lisi            |\n+--------+-------------------------------------------------+----------------+\n22:20:27 [DEBUG] [nioEventLoopGroup-4-2] i.n.h.l.LoggingHandler - [id: 0x94b2a840, L:/127.0.0.1:8080 - R:/127.0.0.1:52612] READ COMPLETE\n22:20:27 [DEBUG] [defaultEventLoopGroup-2-2] c.i.o.EventLoopTest - lisi            \n22:20:38 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x79a26af9, L:/127.0.0.1:8080 - R:/127.0.0.1:52625] REGISTERED\n22:20:38 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x79a26af9, L:/127.0.0.1:8080 - R:/127.0.0.1:52625] ACTIVE\n22:20:38 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x79a26af9, L:/127.0.0.1:8080 - R:/127.0.0.1:52625] READ: 6B\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 77 61 6e 67 77 75                               |wangwu          |\n+--------+-------------------------------------------------+----------------+\n22:20:38 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x79a26af9, L:/127.0.0.1:8080 - R:/127.0.0.1:52625] READ COMPLETE\n22:20:38 [DEBUG] [defaultEventLoopGroup-2-1] c.i.o.EventLoopTest - wangwu          \n22:20:40 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x79a26af9, L:/127.0.0.1:8080 - R:/127.0.0.1:52625] READ: 6B\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 77 61 6e 67 77 75                               |wangwu          |\n+--------+-------------------------------------------------+----------------+\n22:20:40 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x79a26af9, L:/127.0.0.1:8080 - R:/127.0.0.1:52625] READ COMPLETE\n22:20:40 [DEBUG] [defaultEventLoopGroup-2-1] c.i.o.EventLoopTest - wangwu          \n```\n\n可以看到，nio 工人和 非 nio 工人也分别绑定了 channel（LoggingHandler 由 nio 工人执行，而我们自己的 handler 由非 nio 工人执行）\n\n\n\n![](img/0041.png)\n\n\n\n#### 💡 handler 执行中如何换人？\n\n关键代码 `io.netty.channel.AbstractChannelHandlerContext#invokeChannelRead()`\n\n```java\nstatic void invokeChannelRead(final AbstractChannelHandlerContext next, Object msg) {\n    final Object m = next.pipeline.touch(ObjectUtil.checkNotNull(msg, \"msg\"), next);\n    // 下一个 handler 的事件循环是否与当前的事件循环是同一个线程\n    EventExecutor executor = next.executor();\n    \n    // 是，直接调用\n    if (executor.inEventLoop()) {\n        next.invokeChannelRead(m);\n    } \n    // 不是，将要执行的代码作为任务提交给下一个事件循环处理（换人）\n    else {\n        executor.execute(new Runnable() {\n            @Override\n            public void run() {\n                next.invokeChannelRead(m);\n            }\n        });\n    }\n}\n```\n\n* 如果两个 handler 绑定的是同一个线程，那么就直接调用\n* 否则，把要调用的代码封装为一个任务对象，由下一个 handler 的线程来调用\n\n\n\n#### 演示 NioEventLoop 处理普通任务\n\nNioEventLoop 除了可以处理 io 事件，同样可以向它提交普通任务\n\n```java\nNioEventLoopGroup nioWorkers = new NioEventLoopGroup(2);\n\nlog.debug(\"server start...\");\nThread.sleep(2000);\nnioWorkers.execute(()->{\n    log.debug(\"normal task...\");\n});\n```\n\n输出\n\n```\n22:30:36 [DEBUG] [main] c.i.o.EventLoopTest2 - server start...\n22:30:38 [DEBUG] [nioEventLoopGroup-2-1] c.i.o.EventLoopTest2 - normal task...\n```\n\n> 可以用来执行耗时较长的任务\n\n\n\n#### 演示 NioEventLoop 处理定时任务\n\n```java\nNioEventLoopGroup nioWorkers = new NioEventLoopGroup(2);\n\nlog.debug(\"server start...\");\nThread.sleep(2000);\nnioWorkers.scheduleAtFixedRate(() -> {\n    log.debug(\"running...\");\n}, 0, 1, TimeUnit.SECONDS);\n```\n\n输出\n\n```\n22:35:15 [DEBUG] [main] c.i.o.EventLoopTest2 - server start...\n22:35:17 [DEBUG] [nioEventLoopGroup-2-1] c.i.o.EventLoopTest2 - running...\n22:35:18 [DEBUG] [nioEventLoopGroup-2-1] c.i.o.EventLoopTest2 - running...\n22:35:19 [DEBUG] [nioEventLoopGroup-2-1] c.i.o.EventLoopTest2 - running...\n22:35:20 [DEBUG] [nioEventLoopGroup-2-1] c.i.o.EventLoopTest2 - running...\n...\n```\n\n> 可以用来执行定时任务\n\n\n\n### 3.2 Channel\n\nchannel 的主要作用\n\n* close() 可以用来关闭 channel\n* closeFuture() 用来处理 channel 的关闭\n  * sync 方法作用是同步等待 channel 关闭\n  * 而 addListener 方法是异步等待 channel 关闭\n* pipeline() 方法添加处理器\n* write() 方法将数据写入\n* writeAndFlush() 方法将数据写入并刷出\n\n\n\n#### ChannelFuture\n\n这时刚才的客户端代码\n\n```java\nnew Bootstrap()\n    .group(new NioEventLoopGroup())\n    .channel(NioSocketChannel.class)\n    .handler(new ChannelInitializer<Channel>() {\n        @Override\n        protected void initChannel(Channel ch) {\n            ch.pipeline().addLast(new StringEncoder());\n        }\n    })\n    .connect(\"127.0.0.1\", 8080)\n    .sync()\n    .channel()\n    .writeAndFlush(new Date() + \": hello world!\");\n```\n\n现在把它拆开来看\n\n```java\nChannelFuture channelFuture = new Bootstrap()\n    .group(new NioEventLoopGroup())\n    .channel(NioSocketChannel.class)\n    .handler(new ChannelInitializer<Channel>() {\n        @Override\n        protected void initChannel(Channel ch) {\n            ch.pipeline().addLast(new StringEncoder());\n        }\n    })\n    .connect(\"127.0.0.1\", 8080); // 1\n\nchannelFuture.sync().channel().writeAndFlush(new Date() + \": hello world!\");\n```\n\n* 1 处返回的是 ChannelFuture 对象，它的作用是利用 channel() 方法来获取 Channel 对象\n\n**注意** connect 方法是异步的，意味着不等连接建立，方法执行就返回了。因此 channelFuture 对象中不能【立刻】获得到正确的 Channel 对象\n\n实验如下：\n\n```java\nChannelFuture channelFuture = new Bootstrap()\n    .group(new NioEventLoopGroup())\n    .channel(NioSocketChannel.class)\n    .handler(new ChannelInitializer<Channel>() {\n        @Override\n        protected void initChannel(Channel ch) {\n            ch.pipeline().addLast(new StringEncoder());\n        }\n    })\n    .connect(\"127.0.0.1\", 8080);\n\nSystem.out.println(channelFuture.channel()); // 1\nchannelFuture.sync(); // 2\nSystem.out.println(channelFuture.channel()); // 3\n```\n\n* 执行到 1 时，连接未建立，打印 `[id: 0x2e1884dd]`\n* 执行到 2 时，sync 方法是同步等待连接建立完成\n* 执行到 3 时，连接肯定建立了，打印 `[id: 0x2e1884dd, L:/127.0.0.1:57191 - R:/127.0.0.1:8080]`\n\n除了用 sync 方法可以让异步操作同步以外，还可以使用回调的方式：\n\n```java\nChannelFuture channelFuture = new Bootstrap()\n    .group(new NioEventLoopGroup())\n    .channel(NioSocketChannel.class)\n    .handler(new ChannelInitializer<Channel>() {\n        @Override\n        protected void initChannel(Channel ch) {\n            ch.pipeline().addLast(new StringEncoder());\n        }\n    })\n    .connect(\"127.0.0.1\", 8080);\nSystem.out.println(channelFuture.channel()); // 1\nchannelFuture.addListener((ChannelFutureListener) future -> {\n    System.out.println(future.channel()); // 2\n});\n```\n\n* 执行到 1 时，连接未建立，打印 `[id: 0x749124ba]`\n* ChannelFutureListener 会在连接建立时被调用（其中 operationComplete 方法），因此执行到 2 时，连接肯定建立了，打印 `[id: 0x749124ba, L:/127.0.0.1:57351 - R:/127.0.0.1:8080]`\n\n\n\n#### CloseFuture\n\n```java\n@Slf4j\npublic class CloseFutureClient {\n    public static void main(String[] args) throws InterruptedException {\n        NioEventLoopGroup group new NioEventLoopGroup();\n        ChannelFuture channelFuture = new Bootstrap()\n                .group(group)\n                .channel(NioSocketChannel.class)\n                .handler(new ChannelInitializer<NioSocketChannel>() {\n                    @Override // 在连接建立后被调用\n                    protected void initChannel(NioSocketChannel ch) throws Exception {\n                        ch.pipeline().addLast(new LoggingHandler(LogLevel.DEBUG));\n                        ch.pipeline().addLast(new StringEncoder());\n                    }\n                })\n                .connect(new InetSocketAddress(\"localhost\", 8080));\n        Channel channel = channelFuture.sync().channel();\n        log.debug(\"{}\", channel);\n        new Thread(()->{\n            Scanner scanner = new Scanner(System.in);\n            while (true) {\n                String line = scanner.nextLine();\n                if (\"q\".equals(line)) {\n                    channel.close(); // close 异步操作 1s 之后\n//                    log.debug(\"处理关闭之后的操作\"); // 不能在这里善后\n                    break;\n                }\n                channel.writeAndFlush(line);\n            }\n        }, \"input\").start();\n\n        // 获取 CloseFuture 对象， 1) 同步处理关闭， 2) 异步处理关闭\n        ChannelFuture closeFuture = channel.closeFuture();\n        /*log.debug(\"waiting close...\");\n        closeFuture.sync();\n        log.debug(\"处理关闭之后的操作\");*/\n        closeFuture.addListener(new ChannelFutureListener() {\n            @Override\n            public void operationComplete(ChannelFuture future) throws Exception {\n                log.debug(\"处理关闭之后的操作\");\n                group.shutdownGracefully();\n            }\n        });\n    }\n}\n```\n\n\n\n\n\n#### 💡 异步提升的是什么\n- 有些同学看到这里会有疑问：为什么不在一个线程中去执行建立连接、去执行关闭 channel，那样不是也可以吗？非要用这么复杂的异步方式：比如一个线程发起建立连接，另一个线程去真正建立连接。\n- 还有同学会笼统地回答，因为 netty 异步方式用了多线程、多线程就效率高。其实这些认识都比较片面，多线程和异步所提升的效率并不是所认为的。\n\n思考下面的场景，4 个医生给人看病，每个病人花费 20 分钟，而且医生看病的过程中是以病人为单位的，一个病人看完了，才能看下一个病人。假设病人源源不断地来，可以计算一下 4 个医生一天工作 8 小时，处理的病人总数是：`4 * 8 * 3 = 96`\n\n经研究发现，看病可以细分为四个步骤，经拆分后每个步骤需要 5 分钟，如下\n\n因此可以做如下优化，只有一开始，医生 2、3、4 分别要等待 5、10、15 分钟才能执行工作，但只要后续病人源源不断地来，他们就能够满负荷工作，并且处理病人的能力提高到了 `4 * 8 * 12` 效率几乎是原来的四倍\n\n要点\n\n* 单线程没法异步提高效率，必须配合多线程、多核 cpu 才能发挥异步的优势\n* 异步并没有缩短响应时间，反而有所增加\n* 合理进行任务拆分，也是利用异步的关键\n\n\n\n### 3.3 Future & Promise\n\n在异步处理时，经常用到这两个接口\n\n首先要说明 netty 中的 Future 与 jdk 中的 Future 同名，但是是两个接口，netty 的 Future 继承自 jdk 的 Future，而 Promise 又对 netty Future 进行了扩展\n\n* jdk Future 只能同步等待任务结束（或成功、或失败）才能得到结果\n* netty Future 可以同步等待任务结束得到结果，也可以异步方式得到结果，但都是要等任务结束\n* netty Promise 不仅有 netty Future 的功能，而且脱离了任务独立存在，只作为两个线程间传递结果的容器\n\n| 功能/名称    | jdk Future                     | netty Future                                                 | Promise      |\n| ------------ | ------------------------------ | ------------------------------------------------------------ | ------------ |\n| cancel       | 取消任务                       | -                                                            | -            |\n| isCanceled   | 任务是否取消                   | -                                                            | -            |\n| isDone       | 任务是否完成，不能区分成功失败 | -                                                            | -            |\n| get          | 获取任务结果，阻塞等待         | -                                                            | -            |\n| getNow       | -                              | 获取任务结果，非阻塞，还未产生结果时返回 null                | -            |\n| await        | -                              | 等待任务结束，如果任务失败，不会抛异常，而是通过 isSuccess 判断 | -            |\n| sync         | -                              | 等待任务结束，如果任务失败，抛出异常                         | -            |\n| isSuccess    | -                              | 判断任务是否成功                                             | -            |\n| cause        | -                              | 获取失败信息，非阻塞，如果没有失败，返回null                 | -            |\n| addLinstener | -                              | 添加回调，异步接收结果                                       | -            |\n| setSuccess   | -                              | -                                                            | 设置成功结果 |\n| setFailure   | -                              | -                                                            | 设置失败结果 |\n\n\n\n#### 例1\n\n同步处理任务成功\n\n```java\nDefaultEventLoop eventExecutors = new DefaultEventLoop();\nDefaultPromise<Integer> promise = new DefaultPromise<>(eventExecutors);\n\neventExecutors.execute(()->{\n    try {\n        Thread.sleep(1000);\n    } catch (InterruptedException e) {\n        e.printStackTrace();\n    }\n    log.debug(\"set success, {}\",10);\n    promise.setSuccess(10);\n});\n\nlog.debug(\"start...\");\nlog.debug(\"{}\",promise.getNow()); // 还没有结果\nlog.debug(\"{}\",promise.get());\n```\n\n输出\n\n```\n11:51:53 [DEBUG] [main] c.i.o.DefaultPromiseTest2 - start...\n11:51:53 [DEBUG] [main] c.i.o.DefaultPromiseTest2 - null\n11:51:54 [DEBUG] [defaultEventLoop-1-1] c.i.o.DefaultPromiseTest2 - set success, 10\n11:51:54 [DEBUG] [main] c.i.o.DefaultPromiseTest2 - 10\n```\n\n\n\n#### 例2\n\n异步处理任务成功\n\n```java\nDefaultEventLoop eventExecutors = new DefaultEventLoop();\nDefaultPromise<Integer> promise = new DefaultPromise<>(eventExecutors);\n\n// 设置回调，异步接收结果\npromise.addListener(future -> {\n    // 这里的 future 就是上面的 promise\n    log.debug(\"{}\",future.getNow());\n});\n\n// 等待 1000 后设置成功结果\neventExecutors.execute(()->{\n    try {\n        Thread.sleep(1000);\n    } catch (InterruptedException e) {\n        e.printStackTrace();\n    }\n    log.debug(\"set success, {}\",10);\n    promise.setSuccess(10);\n});\n\nlog.debug(\"start...\");\n```\n\n输出\n\n```\n11:49:30 [DEBUG] [main] c.i.o.DefaultPromiseTest2 - start...\n11:49:31 [DEBUG] [defaultEventLoop-1-1] c.i.o.DefaultPromiseTest2 - set success, 10\n11:49:31 [DEBUG] [defaultEventLoop-1-1] c.i.o.DefaultPromiseTest2 - 10\n```\n\n\n\n#### 例3\n\n同步处理任务失败 - sync & get\n\n```java\nDefaultEventLoop eventExecutors = new DefaultEventLoop();\n        DefaultPromise<Integer> promise = new DefaultPromise<>(eventExecutors);\n\n        eventExecutors.execute(() -> {\n            try {\n                Thread.sleep(1000);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            RuntimeException e = new RuntimeException(\"error...\");\n            log.debug(\"set failure, {}\", e.toString());\n            promise.setFailure(e);\n        });\n\n        log.debug(\"start...\");\n        log.debug(\"{}\", promise.getNow());\n        promise.get(); // sync() 也会出现异常，只是 get 会再用 ExecutionException 包一层异常\n```\n\n输出\n\n```\n12:11:07 [DEBUG] [main] c.i.o.DefaultPromiseTest2 - start...\n12:11:07 [DEBUG] [main] c.i.o.DefaultPromiseTest2 - null\n12:11:08 [DEBUG] [defaultEventLoop-1-1] c.i.o.DefaultPromiseTest2 - set failure, java.lang.RuntimeException: error...\nException in thread \"main\" java.util.concurrent.ExecutionException: java.lang.RuntimeException: error...\n	at io.netty.util.concurrent.AbstractFuture.get(AbstractFuture.java:41)\n	at com.itcast.oio.DefaultPromiseTest2.main(DefaultPromiseTest2.java:34)\nCaused by: java.lang.RuntimeException: error...\n	at com.itcast.oio.DefaultPromiseTest2.lambda$main$0(DefaultPromiseTest2.java:27)\n	at io.netty.channel.DefaultEventLoop.run(DefaultEventLoop.java:54)\n	at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:918)\n	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n	at java.lang.Thread.run(Thread.java:745)\n```\n\n\n\n#### 例4\n\n同步处理任务失败 - await\n\n```java\nDefaultEventLoop eventExecutors = new DefaultEventLoop();\nDefaultPromise<Integer> promise = new DefaultPromise<>(eventExecutors);\n\neventExecutors.execute(() -> {\n    try {\n        Thread.sleep(1000);\n    } catch (InterruptedException e) {\n        e.printStackTrace();\n    }\n    RuntimeException e = new RuntimeException(\"error...\");\n    log.debug(\"set failure, {}\", e.toString());\n    promise.setFailure(e);\n});\n\nlog.debug(\"start...\");\nlog.debug(\"{}\", promise.getNow());\npromise.await(); // 与 sync 和 get 区别在于，不会抛异常\nlog.debug(\"result {}\", (promise.isSuccess() ? promise.getNow() : promise.cause()).toString());\n```\n\n输出\n\n```\n12:18:53 [DEBUG] [main] c.i.o.DefaultPromiseTest2 - start...\n12:18:53 [DEBUG] [main] c.i.o.DefaultPromiseTest2 - null\n12:18:54 [DEBUG] [defaultEventLoop-1-1] c.i.o.DefaultPromiseTest2 - set failure, java.lang.RuntimeException: error...\n12:18:54 [DEBUG] [main] c.i.o.DefaultPromiseTest2 - result java.lang.RuntimeException: error...\n```\n\n\n\n#### 例5\n\n异步处理任务失败\n\n```java\nDefaultEventLoop eventExecutors = new DefaultEventLoop();\nDefaultPromise<Integer> promise = new DefaultPromise<>(eventExecutors);\n\npromise.addListener(future -> {\n    log.debug(\"result {}\", (promise.isSuccess() ? promise.getNow() : promise.cause()).toString());\n});\n\neventExecutors.execute(() -> {\n    try {\n        Thread.sleep(1000);\n    } catch (InterruptedException e) {\n        e.printStackTrace();\n    }\n    RuntimeException e = new RuntimeException(\"error...\");\n    log.debug(\"set failure, {}\", e.toString());\n    promise.setFailure(e);\n});\n\nlog.debug(\"start...\");\n```\n\n输出\n\n```\n12:04:57 [DEBUG] [main] c.i.o.DefaultPromiseTest2 - start...\n12:04:58 [DEBUG] [defaultEventLoop-1-1] c.i.o.DefaultPromiseTest2 - set failure, java.lang.RuntimeException: error...\n12:04:58 [DEBUG] [defaultEventLoop-1-1] c.i.o.DefaultPromiseTest2 - result java.lang.RuntimeException: error...\n```\n\n\n\n#### 例6\n\nawait 死锁检查\n\n```java\nDefaultEventLoop eventExecutors = new DefaultEventLoop();\nDefaultPromise<Integer> promise = new DefaultPromise<>(eventExecutors);\n\neventExecutors.submit(()->{\n    System.out.println(\"1\");\n    try {\n        promise.await();\n        // 注意不能仅捕获 InterruptedException 异常\n        // 否则 死锁检查抛出的 BlockingOperationException 会继续向上传播\n        // 而提交的任务会被包装为 PromiseTask，它的 run 方法中会 catch 所有异常然后设置为 Promise 的失败结果而不会抛出\n    } catch (Exception e) { \n        e.printStackTrace();\n    }\n    System.out.println(\"2\");\n});\neventExecutors.submit(()->{\n    System.out.println(\"3\");\n    try {\n        promise.await();\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    System.out.println(\"4\");\n});\n```\n\n输出\n\n```\n1\n2\n3\n4\nio.netty.util.concurrent.BlockingOperationException: DefaultPromise@47499c2a(incomplete)\n	at io.netty.util.concurrent.DefaultPromise.checkDeadLock(DefaultPromise.java:384)\n	at io.netty.util.concurrent.DefaultPromise.await(DefaultPromise.java:212)\n	at com.itcast.oio.DefaultPromiseTest.lambda$main$0(DefaultPromiseTest.java:27)\n	at io.netty.util.concurrent.PromiseTask$RunnableAdapter.call(PromiseTask.java:38)\n	at io.netty.util.concurrent.PromiseTask.run(PromiseTask.java:73)\n	at io.netty.channel.DefaultEventLoop.run(DefaultEventLoop.java:54)\n	at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:918)\n	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n	at java.lang.Thread.run(Thread.java:745)\nio.netty.util.concurrent.BlockingOperationException: DefaultPromise@47499c2a(incomplete)\n	at io.netty.util.concurrent.DefaultPromise.checkDeadLock(DefaultPromise.java:384)\n	at io.netty.util.concurrent.DefaultPromise.await(DefaultPromise.java:212)\n	at com.itcast.oio.DefaultPromiseTest.lambda$main$1(DefaultPromiseTest.java:36)\n	at io.netty.util.concurrent.PromiseTask$RunnableAdapter.call(PromiseTask.java:38)\n	at io.netty.util.concurrent.PromiseTask.run(PromiseTask.java:73)\n	at io.netty.channel.DefaultEventLoop.run(DefaultEventLoop.java:54)\n	at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:918)\n	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n	at java.lang.Thread.run(Thread.java:745)\n\n```\n\n\n\n\n\n### 3.4 Handler & Pipeline\n\nChannelHandler 用来处理 Channel 上的各种事件，分为入站、出站两种。所有 ChannelHandler 被连成一串，就是 Pipeline\n\n* 入站处理器通常是 ChannelInboundHandlerAdapter 的子类，主要用来读取客户端数据，写回结果\n* 出站处理器通常是 ChannelOutboundHandlerAdapter 的子类，主要对写回结果进行加工\n\n打个比喻，每个 Channel 是一个产品的加工车间，Pipeline 是车间中的流水线，ChannelHandler 就是流水线上的各道工序，而后面要讲的 ByteBuf 是原材料，经过很多工序的加工：先经过一道道入站工序，再经过一道道出站工序最终变成产品\n\n\n\n先搞清楚顺序，服务端\n\n```java\nnew ServerBootstrap()\n    .group(new NioEventLoopGroup())\n    .channel(NioServerSocketChannel.class)\n    .childHandler(new ChannelInitializer<NioSocketChannel>() {\n        protected void initChannel(NioSocketChannel ch) {\n            ch.pipeline().addLast(new ChannelInboundHandlerAdapter(){\n                @Override\n                public void channelRead(ChannelHandlerContext ctx, Object msg) {\n                    System.out.println(1);\n                    ctx.fireChannelRead(msg); // 1\n                }\n            });\n            ch.pipeline().addLast(new ChannelInboundHandlerAdapter(){\n                @Override\n                public void channelRead(ChannelHandlerContext ctx, Object msg) {\n                    System.out.println(2);\n                    ctx.fireChannelRead(msg); // 2\n                }\n            });\n            ch.pipeline().addLast(new ChannelInboundHandlerAdapter(){\n                @Override\n                public void channelRead(ChannelHandlerContext ctx, Object msg) {\n                    System.out.println(3);\n                    ctx.channel().write(msg); // 3\n                }\n            });\n            ch.pipeline().addLast(new ChannelOutboundHandlerAdapter(){\n                @Override\n                public void write(ChannelHandlerContext ctx, Object msg, \n                                  ChannelPromise promise) {\n                    System.out.println(4);\n                    ctx.write(msg, promise); // 4\n                }\n            });\n            ch.pipeline().addLast(new ChannelOutboundHandlerAdapter(){\n                @Override\n                public void write(ChannelHandlerContext ctx, Object msg, \n                                  ChannelPromise promise) {\n                    System.out.println(5);\n                    ctx.write(msg, promise); // 5\n                }\n            });\n            ch.pipeline().addLast(new ChannelOutboundHandlerAdapter(){\n                @Override\n                public void write(ChannelHandlerContext ctx, Object msg, \n                                  ChannelPromise promise) {\n                    System.out.println(6);\n                    ctx.write(msg, promise); // 6\n                }\n            });\n        }\n    })\n    .bind(8080);\n```\n\n客户端\n\n```java\nnew Bootstrap()\n    .group(new NioEventLoopGroup())\n    .channel(NioSocketChannel.class)\n    .handler(new ChannelInitializer<Channel>() {\n        @Override\n        protected void initChannel(Channel ch) {\n            ch.pipeline().addLast(new StringEncoder());\n        }\n    })\n    .connect(\"127.0.0.1\", 8080)\n    .addListener((ChannelFutureListener) future -> {\n        future.channel().writeAndFlush(\"hello,world\");\n    });\n```\n\n服务器端打印：\n\n```\n1\n2\n3\n6\n5\n4\n```\n\n可以看到，ChannelInboundHandlerAdapter 是按照 addLast 的顺序执行的，而 ChannelOutboundHandlerAdapter 是按照 addLast 的逆序执行的。ChannelPipeline 的实现是一个 ChannelHandlerContext（包装了 ChannelHandler） 组成的双向链表\n\n![](img/0008.png)\n\n* 入站处理器中，ctx.fireChannelRead(msg) 是 **调用下一个入站处理器**\n  * 如果注释掉 1 处代码，则仅会打印 1\n  * 如果注释掉 2 处代码，则仅会打印 1 2\n* 3 处的 ctx.channel().write(msg) 会 **从尾部开始触发** 后续出站处理器的执行\n  * 如果注释掉 3 处代码，则仅会打印 1 2 3\n* 类似的，出站处理器中，ctx.write(msg, promise) 的调用也会 **触发上一个出站处理器**\n  * 如果注释掉 6 处代码，则仅会打印 1 2 3 6\n* ctx.channel().write(msg) vs ctx.write(msg)\n  * 都是触发出站处理器的执行\n  * ctx.channel().write(msg) 从尾部开始查找出站处理器\n  * ctx.write(msg) 是从当前节点找上一个出站处理器\n  * 3 处的 ctx.channel().write(msg) 如果改为 ctx.write(msg) 仅会打印 1 2 3，因为节点3 之前没有其它出站处理器了\n  * 6 处的 ctx.write(msg, promise) 如果改为 ctx.channel().write(msg) 会打印 1 2 3 6 6 6... 因为 ctx.channel().write() 是从尾部开始查找，结果又是节点6 自己\n\n\n\n图1 - 服务端 pipeline 触发的原始流程，图中数字代表了处理步骤的先后次序\n\n![](img/0009.png)\n\n\n\n### 3.5 ByteBuf\n\n是对字节数据的封装\n\n#### 1）创建\n\n```java\nByteBuf buffer = ByteBufAllocator.DEFAULT.buffer(10);\nlog(buffer);\n```\n\n上面代码创建了一个默认的 ByteBuf（池化基于直接内存的 ByteBuf），初始容量是 10\n\n输出\n\n```\nread index:0 write index:0 capacity:10\n```\n\n其中 log 方法参考如下\n\n```java\nprivate static void log(ByteBuf buffer) {\n    int length = buffer.readableBytes();\n    int rows = length / 16 + (length % 15 == 0 ? 0 : 1) + 4;\n    StringBuilder buf = new StringBuilder(rows * 80 * 2)\n        .append(\"read index:\").append(buffer.readerIndex())\n        .append(\" write index:\").append(buffer.writerIndex())\n        .append(\" capacity:\").append(buffer.capacity())\n        .append(NEWLINE);\n    appendPrettyHexDump(buf, buffer);\n    System.out.println(buf.toString());\n}\n```\n\n\n\n#### 2）直接内存 vs 堆内存\n\n可以使用下面的代码来创建池化基于堆的 ByteBuf\n\n```java\nByteBuf buffer = ByteBufAllocator.DEFAULT.heapBuffer(10);\n```\n\n也可以使用下面的代码来创建池化基于直接内存的 ByteBuf\n\n```java\nByteBuf buffer = ByteBufAllocator.DEFAULT.directBuffer(10);\n```\n\n* 直接内存创建和销毁的代价昂贵，但读写性能高（少一次内存复制），适合配合池化功能一起用\n* 直接内存对 GC 压力小，因为这部分内存不受 JVM 垃圾回收的管理，但也要注意及时主动释放\n\n\n\n#### 3）池化 vs 非池化\n\n池化的最大意义在于可以重用 ByteBuf，优点有\n\n* 没有池化，则每次都得创建新的 ByteBuf 实例，这个操作对直接内存代价昂贵，就算是堆内存，也会增加 GC 压力\n* 有了池化，则可以重用池中 ByteBuf 实例，并且采用了与 jemalloc 类似的内存分配算法提升分配效率\n* 高并发时，池化功能更节约内存，减少内存溢出的可能\n\n池化功能是否开启，可以通过下面的系统环境变量来设置\n\n```java\n-Dio.netty.allocator.type={unpooled|pooled}\n```\n\n* 4.1 以后，非 Android 平台默认启用池化实现，Android 平台启用非池化实现\n* 4.1 之前，池化功能还不成熟，默认是非池化实现\n\n\n\n#### 4）组成\n\nByteBuf 由四部分组成\n\n![](img/0010.png)\n\n最开始读写指针都在 0 位置\n\n\n\n#### 5）写入\n\n方法列表，省略一些不重要的方法\n\n| 方法签名                                                     | 含义                   | 备注                                        |\n| ------------------------------------------------------------ | ---------------------- | ------------------------------------------- |\n| writeBoolean(boolean value)                                  | 写入 boolean 值        | 用一字节 01\\|00 代表 true\\|false            |\n| writeByte(int value)                                         | 写入 byte 值           |                                             |\n| writeShort(int value)                                        | 写入 short 值          |                                             |\n| writeInt(int value)                                          | 写入 int 值            | Big Endian，即 0x250，写入后 00 00 02 50    |\n| writeIntLE(int value)                                        | 写入 int 值            | Little Endian，即 0x250，写入后 50 02 00 00 |\n| writeLong(long value)                                        | 写入 long 值           |                                             |\n| writeChar(int value)                                         | 写入 char 值           |                                             |\n| writeFloat(float value)                                      | 写入 float 值          |                                             |\n| writeDouble(double value)                                    | 写入 double 值         |                                             |\n| writeBytes(ByteBuf src)                                      | 写入 netty 的 ByteBuf  |                                             |\n| writeBytes(byte[] src)                                       | 写入 byte[]            |                                             |\n| writeBytes(ByteBuffer src)                                   | 写入 nio 的 ByteBuffer |                                             |\n| int writeCharSequence(CharSequence sequence, Charset charset) | 写入字符串             |                                             |\n\n> 注意\n>\n> * 这些方法的未指明返回值的，其返回值都是 ByteBuf，意味着可以链式调用\n> * 网络传输，默认习惯是 Big Endian\n\n\n\n先写入 4 个字节\n\n```java\nbuffer.writeBytes(new byte[]{1, 2, 3, 4});\nlog(buffer);\n```\n\n结果是\n\n```\nread index:0 write index:4 capacity:10\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 01 02 03 04                                     |....            |\n+--------+-------------------------------------------------+----------------+\n```\n\n再写入一个 int 整数，也是 4 个字节\n\n```java\nbuffer.writeInt(5);\nlog(buffer);\n```\n\n结果是\n\n```\nread index:0 write index:8 capacity:10\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 01 02 03 04 00 00 00 05                         |........        |\n+--------+-------------------------------------------------+----------------+\n```\n\n\n\n还有一类方法是 set 开头的一系列方法，也可以写入数据，但不会改变写指针位置\n\n\n\n#### 6）扩容\n\n再写入一个 int 整数时，容量不够了（初始容量是 10），这时会引发扩容\n\n```java\nbuffer.writeInt(6);\nlog(buffer);\n```\n\n扩容规则是\n\n* 如何写入后数据大小未超过 512，则选择下一个 16 的整数倍，例如写入后大小为 12 ，则扩容后 capacity 是 16\n* 如果写入后数据大小超过 512，则选择下一个 2^n，例如写入后大小为 513，则扩容后 capacity 是 2^10=1024（2^9=512 已经不够了）\n* 扩容不能超过 max capacity 会报错\n\n结果是\n\n```\nread index:0 write index:12 capacity:16\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 01 02 03 04 00 00 00 05 00 00 00 06             |............    |\n+--------+-------------------------------------------------+----------------+\n```\n\n\n\n#### 7）读取\n\n例如读了 4 次，每次一个字节\n\n```java\nSystem.out.println(buffer.readByte());\nSystem.out.println(buffer.readByte());\nSystem.out.println(buffer.readByte());\nSystem.out.println(buffer.readByte());\nlog(buffer);\n```\n\n读过的内容，就属于废弃部分了，再读只能读那些尚未读取的部分\n\n```\n1\n2\n3\n4\nread index:4 write index:12 capacity:16\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 00 00 00 05 00 00 00 06                         |........        |\n+--------+-------------------------------------------------+----------------+\n```\n\n如果需要重复读取 int 整数 5，怎么办？\n\n可以在 read 前先做个标记 mark\n\n```java\nbuffer.markReaderIndex();\nSystem.out.println(buffer.readInt());\nlog(buffer);\n```\n\n结果\n\n```\n5\nread index:8 write index:12 capacity:16\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 00 00 00 06                                     |....            |\n+--------+-------------------------------------------------+----------------+\n```\n\n这时要重复读取的话，重置到标记位置 reset\n\n```java\nbuffer.resetReaderIndex();\nlog(buffer);\n```\n\n这时\n\n```\nread index:4 write index:12 capacity:16\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 00 00 00 05 00 00 00 06                         |........        |\n+--------+-------------------------------------------------+----------------+\n```\n\n还有种办法是采用 get 开头的一系列方法，这些方法不会改变 read index\n\n\n\n#### 8）retain & release\n\n由于 Netty 中有堆外内存的 ByteBuf 实现，堆外内存最好是手动来释放，而不是等 GC 垃圾回收。\n\n* UnpooledHeapByteBuf 使用的是 JVM 内存，只需等 GC 回收内存即可\n* UnpooledDirectByteBuf 使用的就是直接内存了，需要特殊的方法来回收内存\n* PooledByteBuf 和它的子类使用了池化机制，需要更复杂的规则来回收内存\n\n\n\n> 回收内存的源码实现，请关注下面方法的不同实现\n>\n> `protected abstract void deallocate()`\n\n\n\nNetty 这里采用了引用计数法来控制回收内存，每个 ByteBuf 都实现了 ReferenceCounted 接口\n\n* 每个 ByteBuf 对象的初始计数为 1\n* 调用 release 方法计数减 1，如果计数为 0，ByteBuf 内存被回收\n* 调用 retain 方法计数加 1，表示调用者没用完之前，其它 handler 即使调用了 release 也不会造成回收\n* 当计数为 0 时，底层内存会被回收，这时即使 ByteBuf 对象还在，其各个方法均无法正常使用\n\n\n\n谁来负责 release 呢？\n\n不是我们想象的（一般情况下）\n\n```java\nByteBuf buf = ...\ntry {\n    ...\n} finally {\n    buf.release();\n}\n```\n\n请思考，因为 pipeline 的存在，一般需要将 ByteBuf 传递给下一个 ChannelHandler，如果在 finally 中 release 了，就失去了传递性（当然，如果在这个 ChannelHandler 内这个 ByteBuf 已完成了它的使命，那么便无须再传递）\n\n基本规则是，**谁是最后使用者，谁负责 release**，详细分析如下\n\n* 起点，对于 NIO 实现来讲，在 io.netty.channel.nio.AbstractNioByteChannel.NioByteUnsafe#read 方法中首次创建 ByteBuf 放入 pipeline（line 163 pipeline.fireChannelRead(byteBuf)）\n* 入站 ByteBuf 处理原则\n  * 对原始 ByteBuf 不做处理，调用 ctx.fireChannelRead(msg) 向后传递，这时无须 release\n  * 将原始 ByteBuf 转换为其它类型的 Java 对象，这时 ByteBuf 就没用了，必须 release\n  * 如果不调用 ctx.fireChannelRead(msg) 向后传递，那么也必须 release\n  * 注意各种异常，如果 ByteBuf 没有成功传递到下一个 ChannelHandler，必须 release\n  * 假设消息一直向后传，那么 TailContext 会负责释放未处理消息（原始的 ByteBuf）\n* 出站 ByteBuf 处理原则\n  * 出站消息最终都会转为 ByteBuf 输出，一直向前传，由 HeadContext flush 后 release\n* 异常处理原则\n  * 有时候不清楚 ByteBuf 被引用了多少次，但又必须彻底释放，可以循环调用 release 直到返回 true\n\n\n\nTailContext 释放未处理消息逻辑\n\n```java\n// io.netty.channel.DefaultChannelPipeline#onUnhandledInboundMessage(java.lang.Object)\nprotected void onUnhandledInboundMessage(Object msg) {\n    try {\n        logger.debug(\n            \"Discarded inbound message {} that reached at the tail of the pipeline. \" +\n            \"Please check your pipeline configuration.\", msg);\n    } finally {\n        ReferenceCountUtil.release(msg);\n    }\n}\n```\n\n具体代码\n\n```java\n// io.netty.util.ReferenceCountUtil#release(java.lang.Object)\npublic static boolean release(Object msg) {\n    if (msg instanceof ReferenceCounted) {\n        return ((ReferenceCounted) msg).release();\n    }\n    return false;\n}\n```\n\n\n\n#### 9）slice\n\n【零拷贝】的体现之一，对原始 ByteBuf 进行切片成多个 ByteBuf，切片后的 ByteBuf 并没有发生内存复制，还是使用原始 ByteBuf 的内存，切片后的 ByteBuf 维护独立的 read，write 指针\n\n![](img/0011.png)\n\n例，原始 ByteBuf 进行一些初始操作\n\n```java\nByteBuf origin = ByteBufAllocator.DEFAULT.buffer(10);\norigin.writeBytes(new byte[]{1, 2, 3, 4});\norigin.readByte();\nSystem.out.println(ByteBufUtil.prettyHexDump(origin));\n```\n\n输出\n\n```\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 02 03 04                                        |...             |\n+--------+-------------------------------------------------+----------------+\n```\n\n这时调用 slice 进行切片，无参 slice 是从原始 ByteBuf 的 read index 到 write index 之间的内容进行切片，切片后的 max capacity 被固定为这个区间的大小，因此不能追加 write\n\n```java\nByteBuf slice = origin.slice();\nSystem.out.println(ByteBufUtil.prettyHexDump(slice));\n// slice.writeByte(5); 如果执行，会报 IndexOutOfBoundsException 异常\n```\n\n输出\n\n```\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 02 03 04                                        |...             |\n+--------+-------------------------------------------------+----------------+\n```\n\n如果原始 ByteBuf 再次读操作（又读了一个字节）\n\n```java\norigin.readByte();\nSystem.out.println(ByteBufUtil.prettyHexDump(origin));\n```\n\n输出\n\n```\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 03 04                                           |..              |\n+--------+-------------------------------------------------+----------------+\n```\n\n这时的 slice 不受影响，因为它有独立的读写指针\n\n```java\nSystem.out.println(ByteBufUtil.prettyHexDump(slice));\n```\n\n输出\n\n```\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 02 03 04                                        |...             |\n+--------+-------------------------------------------------+----------------+\n```\n\n如果 slice 的内容发生了更改\n\n```java\nslice.setByte(2, 5);\nSystem.out.println(ByteBufUtil.prettyHexDump(slice));\n```\n\n输出\n\n```\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 02 03 05                                        |...             |\n+--------+-------------------------------------------------+----------------+\n```\n\n这时，原始 ByteBuf 也会受影响，因为底层都是同一块内存\n\n```\nSystem.out.println(ByteBufUtil.prettyHexDump(origin));\n```\n\n输出\n\n```\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 03 05                                           |..              |\n+--------+-------------------------------------------------+----------------+\n```\n\n\n\n#### 10）duplicate\n\n【零拷贝】的体现之一，就好比截取了原始 ByteBuf 所有内容，并且没有 max capacity 的限制，也是与原始 ByteBuf 使用同一块底层内存，只是读写指针是独立的\n\n![](img/0012.png)\n\n\n\n#### 11）copy\n\n会将底层内存数据进行深拷贝，因此无论读写，都与原始 ByteBuf 无关\n\n\n\n#### 12）CompositeByteBuf\n\n【零拷贝】的体现之一，可以将多个 ByteBuf 合并为一个逻辑上的 ByteBuf，避免拷贝\n\n有两个 ByteBuf 如下\n\n```java\nByteBuf buf1 = ByteBufAllocator.DEFAULT.buffer(5);\nbuf1.writeBytes(new byte[]{1, 2, 3, 4, 5});\nByteBuf buf2 = ByteBufAllocator.DEFAULT.buffer(5);\nbuf2.writeBytes(new byte[]{6, 7, 8, 9, 10});\nSystem.out.println(ByteBufUtil.prettyHexDump(buf1));\nSystem.out.println(ByteBufUtil.prettyHexDump(buf2));\n```\n\n输出\n\n```\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 01 02 03 04 05                                  |.....           |\n+--------+-------------------------------------------------+----------------+\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 06 07 08 09 0a                                  |.....           |\n+--------+-------------------------------------------------+----------------+\n```\n\n现在需要一个新的 ByteBuf，内容来自于刚才的 buf1 和 buf2，如何实现？\n\n方法1：\n\n```java\nByteBuf buf3 = ByteBufAllocator.DEFAULT\n    .buffer(buf1.readableBytes()+buf2.readableBytes());\nbuf3.writeBytes(buf1);\nbuf3.writeBytes(buf2);\nSystem.out.println(ByteBufUtil.prettyHexDump(buf3));\n```\n\n结果\n\n```\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 01 02 03 04 05 06 07 08 09 0a                   |..........      |\n+--------+-------------------------------------------------+----------------+\n```\n\n这种方法好不好？回答是不太好，因为进行了数据的内存复制操作\n\n\n\n方法2：\n\n```java\nCompositeByteBuf buf3 = ByteBufAllocator.DEFAULT.compositeBuffer();\n// true 表示增加新的 ByteBuf 自动递增 write index, 否则 write index 会始终为 0\nbuf3.addComponents(true, buf1, buf2);\n```\n\n结果是一样的\n\n```\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 01 02 03 04 05 06 07 08 09 0a                   |..........      |\n+--------+-------------------------------------------------+----------------+\n```\n\nCompositeByteBuf 是一个组合的 ByteBuf，它内部维护了一个 Component 数组，每个 Component 管理一个 ByteBuf，记录了这个 ByteBuf 相对于整体偏移量等信息，代表着整体中某一段的数据。\n\n* 优点，对外是一个虚拟视图，组合这些 ByteBuf 不会产生内存复制\n* 缺点，复杂了很多，多次操作会带来性能的损耗\n\n\n\n#### 13）Unpooled\n\nUnpooled 是一个工具类，类如其名，提供了非池化的 ByteBuf 创建、组合、复制等操作\n\n这里仅介绍其跟【零拷贝】相关的 wrappedBuffer 方法，可以用来包装 ByteBuf\n\n```java\nByteBuf buf1 = ByteBufAllocator.DEFAULT.buffer(5);\nbuf1.writeBytes(new byte[]{1, 2, 3, 4, 5});\nByteBuf buf2 = ByteBufAllocator.DEFAULT.buffer(5);\nbuf2.writeBytes(new byte[]{6, 7, 8, 9, 10});\n\n// 当包装 ByteBuf 个数超过一个时, 底层使用了 CompositeByteBuf\nByteBuf buf3 = Unpooled.wrappedBuffer(buf1, buf2);\nSystem.out.println(ByteBufUtil.prettyHexDump(buf3));\n```\n\n输出\n\n```\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 01 02 03 04 05 06 07 08 09 0a                   |..........      |\n+--------+-------------------------------------------------+----------------+\n```\n\n也可以用来包装普通字节数组，底层也不会有拷贝操作\n\n```java\nByteBuf buf4 = Unpooled.wrappedBuffer(new byte[]{1, 2, 3}, new byte[]{4, 5, 6});\nSystem.out.println(buf4.getClass());\nSystem.out.println(ByteBufUtil.prettyHexDump(buf4));\n```\n\n输出\n\n```\nclass io.netty.buffer.CompositeByteBuf\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 01 02 03 04 05 06                               |......          |\n+--------+-------------------------------------------------+----------------+\n```\n\n\n\n#### 💡 ByteBuf 优势\n\n* 池化 - 可以重用池中 ByteBuf 实例，更节约内存，减少内存溢出的可能\n* 读写指针分离，不需要像 ByteBuffer 一样切换读写模式\n* 可以自动扩容\n* 支持链式调用，使用更流畅\n* 很多地方体现零拷贝，例如 slice、duplicate、CompositeByteBuf\n\n\n\n## 4. 双向通信\n\n### 4.1 练习\n\n实现一个 echo server\n\n编写 server\n\n```java\nnew ServerBootstrap()\n    .group(new NioEventLoopGroup())\n    .channel(NioServerSocketChannel.class)\n    .childHandler(new ChannelInitializer<NioSocketChannel>() {\n        @Override\n        protected void initChannel(NioSocketChannel ch) {\n            ch.pipeline().addLast(new ChannelInboundHandlerAdapter(){\n                @Override\n                public void channelRead(ChannelHandlerContext ctx, Object msg) {\n                    ByteBuf buffer = (ByteBuf) msg;\n                    System.out.println(buffer.toString(Charset.defaultCharset()));\n\n                    // 建议使用 ctx.alloc() 创建 ByteBuf\n                    ByteBuf response = ctx.alloc().buffer();\n                    response.writeBytes(buffer);\n                    ctx.writeAndFlush(response);\n\n                    // 思考：需要释放 buffer 吗\n                    // 思考：需要释放 response 吗\n                }\n            });\n        }\n    }).bind(8080);\n```\n\n编写 client\n\n```java\nNioEventLoopGroup group = new NioEventLoopGroup();\nChannel channel = new Bootstrap()\n    .group(group)\n    .channel(NioSocketChannel.class)\n    .handler(new ChannelInitializer<NioSocketChannel>() {\n        @Override\n        protected void initChannel(NioSocketChannel ch) throws Exception {\n            ch.pipeline().addLast(new StringEncoder());\n            ch.pipeline().addLast(new ChannelInboundHandlerAdapter() {\n                @Override\n                public void channelRead(ChannelHandlerContext ctx, Object msg) {\n                    ByteBuf buffer = (ByteBuf) msg;\n                    System.out.println(buffer.toString(Charset.defaultCharset()));\n\n                    // 思考：需要释放 buffer 吗\n                }\n            });\n        }\n    }).connect(\"127.0.0.1\", 8080).sync().channel();\n\nchannel.closeFuture().addListener(future -> {\n    group.shutdownGracefully();\n});\n\nnew Thread(() -> {\n    Scanner scanner = new Scanner(System.in);\n    while (true) {\n        String line = scanner.nextLine();\n        if (\"q\".equals(line)) {\n            channel.close();\n            break;\n        }\n        channel.writeAndFlush(line);\n    }\n}).start();\n```\n\n\n\n### 💡 读和写的误解\n\n\n\n我最初在认识上有这样的误区，认为只有在 netty，nio 这样的多路复用 IO 模型时，读写才不会相互阻塞，才可以实现高效的双向通信，但实际上，Java Socket 是全双工的：在任意时刻，线路上存在`A 到 B` 和 `B 到 A` 的双向信号传输。即使是阻塞 IO，读和写是可以同时进行的，只要分别采用读线程和写线程即可，读不会阻塞写、写也不会阻塞读\n\n\n\n例如\n\n```java\npublic class TestServer {\n    public static void main(String[] args) throws IOException {\n        ServerSocket ss = new ServerSocket(8888);\n        Socket s = ss.accept();\n\n        new Thread(() -> {\n            try {\n                BufferedReader reader = new BufferedReader(new InputStreamReader(s.getInputStream()));\n                while (true) {\n                    System.out.println(reader.readLine());\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }).start();\n\n        new Thread(() -> {\n            try {\n                BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(s.getOutputStream()));\n                // 例如在这个位置加入 thread 级别断点，可以发现即使不写入数据，也不妨碍前面线程读取客户端数据\n                for (int i = 0; i < 100; i++) {\n                    writer.write(String.valueOf(i));\n                    writer.newLine();\n                    writer.flush();\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }).start();\n    }\n}\n```\n\n客户端\n\n```java\npublic class TestClient {\n    public static void main(String[] args) throws IOException {\n        Socket s = new Socket(\"localhost\", 8888);\n\n        new Thread(() -> {\n            try {\n                BufferedReader reader = new BufferedReader(new InputStreamReader(s.getInputStream()));\n                while (true) {\n                    System.out.println(reader.readLine());\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }).start();\n\n        new Thread(() -> {\n            try {\n                BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(s.getOutputStream()));\n                for (int i = 0; i < 100; i++) {\n                    writer.write(String.valueOf(i));\n                    writer.newLine();\n                    writer.flush();\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }).start();\n    }\n}\n```\n\n\n\n\n\n\n\n\n\n', '2022-10-14 15:23:35', '2022-10-14 15:32:23', '<h1><a id=\"_Netty_0\"></a>二. Netty</h1>\n<h2><a id=\"1__4\"></a>1. 概述</h2>\n<h3><a id=\"11_Netty__6\"></a>1.1 Netty 是什么？</h3>\n<pre><code class=\"lang-\">Netty is an asynchronous event-driven network application framework\nfor rapid development of maintainable high performance protocol servers &amp; clients.\n</code></pre>\n<p>Netty 是一个异步的、基于事件驱动的网络应用框架，用于快速开发可维护、高性能的网络服务器和客户端</p>\n<h3><a id=\"12_Netty__17\"></a>1.2 Netty 的作者</h3>\n<p><img src=\"img/0005.png\" alt=\"\" /></p>\n<p>他还是另一个著名网络应用框架 Mina 的重要贡献者</p>\n<h3><a id=\"13_Netty__25\"></a>1.3 Netty 的地位</h3>\n<p>Netty 在 Java 网络应用框架中的地位就好比：Spring 框架在 JavaEE 开发中的地位</p>\n<p>以下的框架都使用了 Netty，因为它们有网络通信需求！</p>\n<ul>\n<li>Cassandra - nosql 数据库</li>\n<li>Spark - 大数据分布式计算框架</li>\n<li>Hadoop - 大数据分布式存储框架</li>\n<li>RocketMQ - ali 开源的消息队列</li>\n<li>ElasticSearch - 搜索引擎</li>\n<li>gRPC - rpc 框架</li>\n<li>Dubbo - rpc 框架</li>\n<li>Spring 5.x - flux api 完全抛弃了 tomcat ，使用 netty 作为服务器端</li>\n<li>Zookeeper - 分布式协调框架</li>\n</ul>\n<h3><a id=\"14_Netty__43\"></a>1.4 Netty 的优势</h3>\n<ul>\n<li>Netty vs NIO，工作量大，bug 多\n<ul>\n<li>需要自己构建协议</li>\n<li>解决 TCP 传输问题，如粘包、半包</li>\n<li>epoll 空轮询导致 CPU 100%</li>\n<li>对 API 进行增强，使之更易用，如 FastThreadLocal =&gt; ThreadLocal，ByteBuf =&gt; ByteBuffer</li>\n</ul>\n</li>\n<li>Netty vs 其它网络应用框架\n<ul>\n<li>Mina 由 apache 维护，将来 3.x 版本可能会有较大重构，破坏 API 向下兼容性，Netty 的开发迭代更迅速，API 更简洁、文档更优秀</li>\n<li>久经考验，16年，Netty 版本\n<ul>\n<li>2.x 2004</li>\n<li>3.x 2008</li>\n<li>4.x 2013</li>\n<li>5.x 已废弃（没有明显的性能提升，维护成本高）</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2><a id=\"2_Hello_World_60\"></a>2. Hello World</h2>\n<h3><a id=\"21__62\"></a>2.1 目标</h3>\n<p>开发一个简单的服务器端和客户端</p>\n<ul>\n<li>客户端向服务器端发送 hello, world</li>\n<li>服务器仅接收，不返回</li>\n</ul>\n<p>加入依赖</p>\n<pre><div class=\"hljs\"><code class=\"lang-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.netty<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>netty-all<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>4.1.39.Final<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n</code></div></pre>\n<h3><a id=\"22__85\"></a>2.2 服务器端</h3>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ServerBootstrap</span>()\n    .group(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NioEventLoopGroup</span>()) <span class=\"hljs-comment\">// 1</span>\n    .channel(NioServerSocketChannel.class) <span class=\"hljs-comment\">// 2</span>\n    .childHandler(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelInitializer</span>&lt;NioSocketChannel&gt;() { <span class=\"hljs-comment\">// 3</span>\n        <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">initChannel</span><span class=\"hljs-params\">(NioSocketChannel ch)</span> {\n            ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringDecoder</span>()); <span class=\"hljs-comment\">// 5</span>\n            ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SimpleChannelInboundHandler</span>&lt;String&gt;() { <span class=\"hljs-comment\">// 6</span>\n                <span class=\"hljs-meta\">@Override</span>\n                <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">channelRead0</span><span class=\"hljs-params\">(ChannelHandlerContext ctx, String msg)</span> {\n                    System.out.println(msg);\n                }\n            });\n        }\n    })\n    .bind(<span class=\"hljs-number\">8080</span>); <span class=\"hljs-comment\">// 4</span>\n</code></div></pre>\n<p>代码解读</p>\n<ul>\n<li>1 处，创建 NioEventLoopGroup，可以简单理解为 <code>线程池 + Selector</code> 后面会详细展开</li>\n<li>2 处，选择服务 Scoket 实现类，其中 NioServerSocketChannel 表示基于 NIO 的服务器端实现，其它实现还有</li>\n<li>3 处，为啥方法叫 childHandler，是接下来添加的处理器都是给 SocketChannel 用的，而不是给 ServerSocketChannel。ChannelInitializer 处理器（仅执行一次），它的作用是待客户端 SocketChannel 建立连接后，执行 initChannel 以便添加更多的处理器</li>\n<li>4 处，ServerSocketChannel 绑定的监听端口</li>\n<li>5 处，SocketChannel 的处理器，解码 ByteBuf =&gt; String</li>\n<li>6 处，SocketChannel 的业务处理器，使用上一个处理器的处理结果</li>\n</ul>\n<h3><a id=\"23__115\"></a>2.3 客户端</h3>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Bootstrap</span>()\n    .group(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NioEventLoopGroup</span>()) <span class=\"hljs-comment\">// 1</span>\n    .channel(NioSocketChannel.class) <span class=\"hljs-comment\">// 2</span>\n    .handler(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelInitializer</span>&lt;Channel&gt;() { <span class=\"hljs-comment\">// 3</span>\n        <span class=\"hljs-meta\">@Override</span>\n        <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">initChannel</span><span class=\"hljs-params\">(Channel ch)</span> {\n            ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringEncoder</span>()); <span class=\"hljs-comment\">// 8</span>\n        }\n    })\n    .connect(<span class=\"hljs-string\">&quot;127.0.0.1&quot;</span>, <span class=\"hljs-number\">8080</span>) <span class=\"hljs-comment\">// 4</span>\n    .sync() <span class=\"hljs-comment\">// 5</span>\n    .channel() <span class=\"hljs-comment\">// 6</span>\n    .writeAndFlush(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>() + <span class=\"hljs-string\">&quot;: hello world!&quot;</span>); <span class=\"hljs-comment\">// 7</span>\n</code></div></pre>\n<p>代码解读</p>\n<ul>\n<li>1 处，创建 NioEventLoopGroup，同 Server</li>\n<li>2 处，选择客户 Socket 实现类，NioSocketChannel 表示基于 NIO 的客户端实现，其它实现还有</li>\n<li>3 处，添加 SocketChannel 的处理器，ChannelInitializer 处理器（仅执行一次），它的作用是待客户端 SocketChannel 建立连接后，执行 initChannel 以便添加更多的处理器</li>\n<li>4 处，指定要连接的服务器和端口</li>\n<li>5 处，Netty 中很多方法都是异步的，如 connect，这时需要使用 sync 方法等待 connect 建立连接完毕</li>\n<li>6 处，获取 channel 对象，它即为通道抽象，可以进行数据读写操作</li>\n<li>7 处，写入消息并清空缓冲区</li>\n<li>8 处，消息会经过通道 handler 处理，这里是将 String =&gt; ByteBuf 发出</li>\n<li>数据经过网络传输，到达服务器端，服务器端 5 和 6 处的 handler 先后被触发，走完一个流程</li>\n</ul>\n<h3><a id=\"24__144\"></a>2.4 流程梳理</h3>\n<h4><a id=\"__146\"></a>💡 提示</h4>\n<blockquote>\n<p>一开始需要树立正确的观念</p>\n<ul>\n<li>把 channel 理解为数据的通道</li>\n<li>把 msg 理解为流动的数据，最开始输入是 ByteBuf，但经过 pipeline 的加工，会变成其它类型对象，最后输出又变成 ByteBuf</li>\n<li>把 handler 理解为数据的处理工序\n<ul>\n<li>工序有多道，合在一起就是 pipeline，pipeline 负责发布事件（读、读取完成…）传播给每个 handler， handler 对自己感兴趣的事件进行处理（重写了相应事件处理方法）</li>\n<li>handler 分 Inbound 和 Outbound 两类</li>\n</ul>\n</li>\n<li>把 eventLoop 理解为处理数据的工人\n<ul>\n<li>工人可以管理多个 channel 的 io 操作，并且一旦工人负责了某个 channel，就要负责到底（绑定）</li>\n<li>工人既可以执行 io 操作，也可以进行任务处理，每位工人有任务队列，队列里可以堆放多个 channel 的待处理任务，任务分为普通任务、定时任务</li>\n<li>工人按照 pipeline 顺序，依次按照 handler 的规划（代码）处理数据，可以为每道工序指定不同的工人</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<h2><a id=\"3__162\"></a>3. 组件</h2>\n<h3><a id=\"31_EventLoop_164\"></a>3.1 EventLoop</h3>\n<p>事件循环对象</p>\n<p>EventLoop 本质是一个单线程执行器（同时维护了一个 Selector），里面有 run 方法处理 Channel 上源源不断的 io 事件。</p>\n<p>它的继承关系比较复杂</p>\n<ul>\n<li>一条线是继承自 j.u.c.ScheduledExecutorService 因此包含了线程池中所有的方法</li>\n<li>另一条线是继承自 netty 自己的 OrderedEventExecutor，\n<ul>\n<li>提供了 boolean inEventLoop(Thread thread) 方法判断一个线程是否属于此 EventLoop</li>\n<li>提供了 parent 方法来看看自己属于哪个 EventLoopGroup</li>\n</ul>\n</li>\n</ul>\n<p>事件循环组</p>\n<p>EventLoopGroup 是一组 EventLoop，Channel 一般会调用 EventLoopGroup 的 register 方法来绑定其中一个 EventLoop，后续这个 Channel 上的 io 事件都由此 EventLoop 来处理（保证了 io 事件处理时的线程安全）</p>\n<ul>\n<li>继承自 netty 自己的 EventExecutorGroup\n<ul>\n<li>实现了 Iterable 接口提供遍历 EventLoop 的能力</li>\n<li>另有 next 方法获取集合中下一个 EventLoop</li>\n</ul>\n</li>\n</ul>\n<p>以一个简单的实现为例：</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-comment\">// 内部创建了两个 EventLoop, 每个 EventLoop 维护一个线程</span>\n<span class=\"hljs-type\">DefaultEventLoopGroup</span> <span class=\"hljs-variable\">group</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DefaultEventLoopGroup</span>(<span class=\"hljs-number\">2</span>);\nSystem.out.println(group.next());\nSystem.out.println(group.next());\nSystem.out.println(group.next());\n</code></div></pre>\n<p>输出</p>\n<pre><code class=\"lang-\">io.netty.channel.DefaultEventLoop@60f82f98\nio.netty.channel.DefaultEventLoop@35f983a6\nio.netty.channel.DefaultEventLoop@60f82f98\n</code></pre>\n<p>也可以使用 for 循环</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-type\">DefaultEventLoopGroup</span> <span class=\"hljs-variable\">group</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DefaultEventLoopGroup</span>(<span class=\"hljs-number\">2</span>);\n<span class=\"hljs-keyword\">for</span> (EventExecutor eventLoop : group) {\n    System.out.println(eventLoop);\n}\n</code></div></pre>\n<p>输出</p>\n<pre><code class=\"lang-\">io.netty.channel.DefaultEventLoop@60f82f98\nio.netty.channel.DefaultEventLoop@35f983a6\n</code></pre>\n<h4><a id=\"__225\"></a>💡 优雅关闭</h4>\n<p>优雅关闭 <code>shutdownGracefully</code> 方法。该方法会首先切换 <code>EventLoopGroup</code> 到关闭状态从而拒绝新的任务的加入，然后在任务队列的任务都处理完成后，停止线程的运行。从而确保整体应用是在正常有序的状态下退出的</p>\n<h4><a id=\"_NioEventLoop__io__231\"></a>演示 NioEventLoop 处理 io 事件</h4>\n<p>服务器端两个 nio worker 工人</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ServerBootstrap</span>()\n    .group(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NioEventLoopGroup</span>(<span class=\"hljs-number\">1</span>), <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NioEventLoopGroup</span>(<span class=\"hljs-number\">2</span>))\n    .channel(NioServerSocketChannel.class)\n    .childHandler(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelInitializer</span>&lt;NioSocketChannel&gt;() {\n        <span class=\"hljs-meta\">@Override</span>\n        <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">initChannel</span><span class=\"hljs-params\">(NioSocketChannel ch)</span> {\n            ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelInboundHandlerAdapter</span>() {\n                <span class=\"hljs-meta\">@Override</span>\n                <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">channelRead</span><span class=\"hljs-params\">(ChannelHandlerContext ctx, Object msg)</span> {\n                    <span class=\"hljs-type\">ByteBuf</span> <span class=\"hljs-variable\">byteBuf</span> <span class=\"hljs-operator\">=</span> msg <span class=\"hljs-keyword\">instanceof</span> ByteBuf ? ((ByteBuf) msg) : <span class=\"hljs-literal\">null</span>;\n                    <span class=\"hljs-keyword\">if</span> (byteBuf != <span class=\"hljs-literal\">null</span>) {\n                        <span class=\"hljs-type\">byte</span>[] buf = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">byte</span>[<span class=\"hljs-number\">16</span>];\n                        <span class=\"hljs-type\">ByteBuf</span> <span class=\"hljs-variable\">len</span> <span class=\"hljs-operator\">=</span> byteBuf.readBytes(buf, <span class=\"hljs-number\">0</span>, byteBuf.readableBytes());\n                        log.debug(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">String</span>(buf));\n                    }\n                }\n            });\n        }\n    }).bind(<span class=\"hljs-number\">8080</span>).sync();\n</code></div></pre>\n<p>客户端，启动三次，分别修改发送字符串为 zhangsan（第一次），lisi（第二次），wangwu（第三次）</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> InterruptedException {\n    <span class=\"hljs-type\">Channel</span> <span class=\"hljs-variable\">channel</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Bootstrap</span>()\n            .group(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NioEventLoopGroup</span>(<span class=\"hljs-number\">1</span>))\n            .handler(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelInitializer</span>&lt;NioSocketChannel&gt;() {\n                <span class=\"hljs-meta\">@Override</span>\n                <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">initChannel</span><span class=\"hljs-params\">(NioSocketChannel ch)</span> <span class=\"hljs-keyword\">throws</span> Exception {\n                    System.out.println(<span class=\"hljs-string\">&quot;init...&quot;</span>);\n                    ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LoggingHandler</span>(LogLevel.DEBUG));\n                }\n            })\n            .channel(NioSocketChannel.class).connect(<span class=\"hljs-string\">&quot;localhost&quot;</span>, <span class=\"hljs-number\">8080</span>)\n            .sync()\n            .channel();\n\n    channel.writeAndFlush(ByteBufAllocator.DEFAULT.buffer().writeBytes(<span class=\"hljs-string\">&quot;wangwu&quot;</span>.getBytes()));\n    Thread.sleep(<span class=\"hljs-number\">2000</span>);\n    channel.writeAndFlush(ByteBufAllocator.DEFAULT.buffer().writeBytes(<span class=\"hljs-string\">&quot;wangwu&quot;</span>.getBytes()));\n</code></div></pre>\n<p>最后输出</p>\n<pre><code class=\"lang-\">22:03:34 [DEBUG] [nioEventLoopGroup-3-1] c.i.o.EventLoopTest - zhangsan       \n22:03:36 [DEBUG] [nioEventLoopGroup-3-1] c.i.o.EventLoopTest - zhangsan       \n22:05:36 [DEBUG] [nioEventLoopGroup-3-2] c.i.o.EventLoopTest - lisi           \n22:05:38 [DEBUG] [nioEventLoopGroup-3-2] c.i.o.EventLoopTest - lisi           \n22:06:09 [DEBUG] [nioEventLoopGroup-3-1] c.i.o.EventLoopTest - wangwu        \n22:06:11 [DEBUG] [nioEventLoopGroup-3-1] c.i.o.EventLoopTest - wangwu         \n</code></pre>\n<p>可以看到两个工人轮流处理 channel，但工人与 channel 之间进行了绑定</p>\n<p><img src=\"img/0042.png\" alt=\"\" /></p>\n<p>再增加两个非 nio 工人</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-type\">DefaultEventLoopGroup</span> <span class=\"hljs-variable\">normalWorkers</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DefaultEventLoopGroup</span>(<span class=\"hljs-number\">2</span>);\n<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ServerBootstrap</span>()\n    .group(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NioEventLoopGroup</span>(<span class=\"hljs-number\">1</span>), <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NioEventLoopGroup</span>(<span class=\"hljs-number\">2</span>))\n    .channel(NioServerSocketChannel.class)\n    .childHandler(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelInitializer</span>&lt;NioSocketChannel&gt;() {\n        <span class=\"hljs-meta\">@Override</span>\n        <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">initChannel</span><span class=\"hljs-params\">(NioSocketChannel ch)</span>  {\n            ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LoggingHandler</span>(LogLevel.DEBUG));\n            ch.pipeline().addLast(normalWorkers,<span class=\"hljs-string\">&quot;myhandler&quot;</span>,\n              <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelInboundHandlerAdapter</span>() {\n                <span class=\"hljs-meta\">@Override</span>\n                <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">channelRead</span><span class=\"hljs-params\">(ChannelHandlerContext ctx, Object msg)</span> {\n                    <span class=\"hljs-type\">ByteBuf</span> <span class=\"hljs-variable\">byteBuf</span> <span class=\"hljs-operator\">=</span> msg <span class=\"hljs-keyword\">instanceof</span> ByteBuf ? ((ByteBuf) msg) : <span class=\"hljs-literal\">null</span>;\n                    <span class=\"hljs-keyword\">if</span> (byteBuf != <span class=\"hljs-literal\">null</span>) {\n                        <span class=\"hljs-type\">byte</span>[] buf = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">byte</span>[<span class=\"hljs-number\">16</span>];\n                        <span class=\"hljs-type\">ByteBuf</span> <span class=\"hljs-variable\">len</span> <span class=\"hljs-operator\">=</span> byteBuf.readBytes(buf, <span class=\"hljs-number\">0</span>, byteBuf.readableBytes());\n                        log.debug(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">String</span>(buf));\n                    }\n                }\n            });\n        }\n    }).bind(<span class=\"hljs-number\">8080</span>).sync();\n</code></div></pre>\n<p>客户端代码不变，启动三次，分别修改发送字符串为 zhangsan（第一次），lisi（第二次），wangwu（第三次）</p>\n<p>输出</p>\n<pre><code class=\"lang-\">22:19:48 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x251562d5, L:/127.0.0.1:8080 - R:/127.0.0.1:52588] REGISTERED\n22:19:48 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x251562d5, L:/127.0.0.1:8080 - R:/127.0.0.1:52588] ACTIVE\n22:19:48 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x251562d5, L:/127.0.0.1:8080 - R:/127.0.0.1:52588] READ: 8B\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 7a 68 61 6e 67 73 61 6e                         |zhangsan        |\n+--------+-------------------------------------------------+----------------+\n22:19:48 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x251562d5, L:/127.0.0.1:8080 - R:/127.0.0.1:52588] READ COMPLETE\n22:19:48 [DEBUG] [defaultEventLoopGroup-2-1] c.i.o.EventLoopTest - zhangsan        \n22:19:50 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x251562d5, L:/127.0.0.1:8080 - R:/127.0.0.1:52588] READ: 8B\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 7a 68 61 6e 67 73 61 6e                         |zhangsan        |\n+--------+-------------------------------------------------+----------------+\n22:19:50 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x251562d5, L:/127.0.0.1:8080 - R:/127.0.0.1:52588] READ COMPLETE\n22:19:50 [DEBUG] [defaultEventLoopGroup-2-1] c.i.o.EventLoopTest - zhangsan        \n22:20:24 [DEBUG] [nioEventLoopGroup-4-2] i.n.h.l.LoggingHandler - [id: 0x94b2a840, L:/127.0.0.1:8080 - R:/127.0.0.1:52612] REGISTERED\n22:20:24 [DEBUG] [nioEventLoopGroup-4-2] i.n.h.l.LoggingHandler - [id: 0x94b2a840, L:/127.0.0.1:8080 - R:/127.0.0.1:52612] ACTIVE\n22:20:25 [DEBUG] [nioEventLoopGroup-4-2] i.n.h.l.LoggingHandler - [id: 0x94b2a840, L:/127.0.0.1:8080 - R:/127.0.0.1:52612] READ: 4B\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 6c 69 73 69                                     |lisi            |\n+--------+-------------------------------------------------+----------------+\n22:20:25 [DEBUG] [nioEventLoopGroup-4-2] i.n.h.l.LoggingHandler - [id: 0x94b2a840, L:/127.0.0.1:8080 - R:/127.0.0.1:52612] READ COMPLETE\n22:20:25 [DEBUG] [defaultEventLoopGroup-2-2] c.i.o.EventLoopTest - lisi            \n22:20:27 [DEBUG] [nioEventLoopGroup-4-2] i.n.h.l.LoggingHandler - [id: 0x94b2a840, L:/127.0.0.1:8080 - R:/127.0.0.1:52612] READ: 4B\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 6c 69 73 69                                     |lisi            |\n+--------+-------------------------------------------------+----------------+\n22:20:27 [DEBUG] [nioEventLoopGroup-4-2] i.n.h.l.LoggingHandler - [id: 0x94b2a840, L:/127.0.0.1:8080 - R:/127.0.0.1:52612] READ COMPLETE\n22:20:27 [DEBUG] [defaultEventLoopGroup-2-2] c.i.o.EventLoopTest - lisi            \n22:20:38 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x79a26af9, L:/127.0.0.1:8080 - R:/127.0.0.1:52625] REGISTERED\n22:20:38 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x79a26af9, L:/127.0.0.1:8080 - R:/127.0.0.1:52625] ACTIVE\n22:20:38 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x79a26af9, L:/127.0.0.1:8080 - R:/127.0.0.1:52625] READ: 6B\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 77 61 6e 67 77 75                               |wangwu          |\n+--------+-------------------------------------------------+----------------+\n22:20:38 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x79a26af9, L:/127.0.0.1:8080 - R:/127.0.0.1:52625] READ COMPLETE\n22:20:38 [DEBUG] [defaultEventLoopGroup-2-1] c.i.o.EventLoopTest - wangwu          \n22:20:40 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x79a26af9, L:/127.0.0.1:8080 - R:/127.0.0.1:52625] READ: 6B\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 77 61 6e 67 77 75                               |wangwu          |\n+--------+-------------------------------------------------+----------------+\n22:20:40 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x79a26af9, L:/127.0.0.1:8080 - R:/127.0.0.1:52625] READ COMPLETE\n22:20:40 [DEBUG] [defaultEventLoopGroup-2-1] c.i.o.EventLoopTest - wangwu          \n</code></pre>\n<p>可以看到，nio 工人和 非 nio 工人也分别绑定了 channel（LoggingHandler 由 nio 工人执行，而我们自己的 handler 由非 nio 工人执行）</p>\n<p><img src=\"img/0041.png\" alt=\"\" /></p>\n<h4><a id=\"_handler__392\"></a>💡 handler 执行中如何换人？</h4>\n<p>关键代码 <code>io.netty.channel.AbstractChannelHandlerContext#invokeChannelRead()</code></p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">invokeChannelRead</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">final</span> AbstractChannelHandlerContext next, Object msg)</span> {\n    <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">m</span> <span class=\"hljs-operator\">=</span> next.pipeline.touch(ObjectUtil.checkNotNull(msg, <span class=\"hljs-string\">&quot;msg&quot;</span>), next);\n    <span class=\"hljs-comment\">// 下一个 handler 的事件循环是否与当前的事件循环是同一个线程</span>\n    <span class=\"hljs-type\">EventExecutor</span> <span class=\"hljs-variable\">executor</span> <span class=\"hljs-operator\">=</span> next.executor();\n    \n    <span class=\"hljs-comment\">// 是，直接调用</span>\n    <span class=\"hljs-keyword\">if</span> (executor.inEventLoop()) {\n        next.invokeChannelRead(m);\n    } \n    <span class=\"hljs-comment\">// 不是，将要执行的代码作为任务提交给下一个事件循环处理（换人）</span>\n    <span class=\"hljs-keyword\">else</span> {\n        executor.execute(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Runnable</span>() {\n            <span class=\"hljs-meta\">@Override</span>\n            <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">run</span><span class=\"hljs-params\">()</span> {\n                next.invokeChannelRead(m);\n            }\n        });\n    }\n}\n</code></div></pre>\n<ul>\n<li>如果两个 handler 绑定的是同一个线程，那么就直接调用</li>\n<li>否则，把要调用的代码封装为一个任务对象，由下一个 handler 的线程来调用</li>\n</ul>\n<h4><a id=\"_NioEventLoop__423\"></a>演示 NioEventLoop 处理普通任务</h4>\n<p>NioEventLoop 除了可以处理 io 事件，同样可以向它提交普通任务</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-type\">NioEventLoopGroup</span> <span class=\"hljs-variable\">nioWorkers</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NioEventLoopGroup</span>(<span class=\"hljs-number\">2</span>);\n\nlog.debug(<span class=\"hljs-string\">&quot;server start...&quot;</span>);\nThread.sleep(<span class=\"hljs-number\">2000</span>);\nnioWorkers.execute(()-&gt;{\n    log.debug(<span class=\"hljs-string\">&quot;normal task...&quot;</span>);\n});\n</code></div></pre>\n<p>输出</p>\n<pre><code class=\"lang-\">22:30:36 [DEBUG] [main] c.i.o.EventLoopTest2 - server start...\n22:30:38 [DEBUG] [nioEventLoopGroup-2-1] c.i.o.EventLoopTest2 - normal task...\n</code></pre>\n<blockquote>\n<p>可以用来执行耗时较长的任务</p>\n</blockquote>\n<h4><a id=\"_NioEventLoop__448\"></a>演示 NioEventLoop 处理定时任务</h4>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-type\">NioEventLoopGroup</span> <span class=\"hljs-variable\">nioWorkers</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NioEventLoopGroup</span>(<span class=\"hljs-number\">2</span>);\n\nlog.debug(<span class=\"hljs-string\">&quot;server start...&quot;</span>);\nThread.sleep(<span class=\"hljs-number\">2000</span>);\nnioWorkers.scheduleAtFixedRate(() -&gt; {\n    log.debug(<span class=\"hljs-string\">&quot;running...&quot;</span>);\n}, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, TimeUnit.SECONDS);\n</code></div></pre>\n<p>输出</p>\n<pre><code class=\"lang-\">22:35:15 [DEBUG] [main] c.i.o.EventLoopTest2 - server start...\n22:35:17 [DEBUG] [nioEventLoopGroup-2-1] c.i.o.EventLoopTest2 - running...\n22:35:18 [DEBUG] [nioEventLoopGroup-2-1] c.i.o.EventLoopTest2 - running...\n22:35:19 [DEBUG] [nioEventLoopGroup-2-1] c.i.o.EventLoopTest2 - running...\n22:35:20 [DEBUG] [nioEventLoopGroup-2-1] c.i.o.EventLoopTest2 - running...\n...\n</code></pre>\n<blockquote>\n<p>可以用来执行定时任务</p>\n</blockquote>\n<h3><a id=\"32_Channel_475\"></a>3.2 Channel</h3>\n<p>channel 的主要作用</p>\n<ul>\n<li>close() 可以用来关闭 channel</li>\n<li>closeFuture() 用来处理 channel 的关闭\n<ul>\n<li>sync 方法作用是同步等待 channel 关闭</li>\n<li>而 addListener 方法是异步等待 channel 关闭</li>\n</ul>\n</li>\n<li>pipeline() 方法添加处理器</li>\n<li>write() 方法将数据写入</li>\n<li>writeAndFlush() 方法将数据写入并刷出</li>\n</ul>\n<h4><a id=\"ChannelFuture_489\"></a>ChannelFuture</h4>\n<p>这时刚才的客户端代码</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Bootstrap</span>()\n    .group(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NioEventLoopGroup</span>())\n    .channel(NioSocketChannel.class)\n    .handler(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelInitializer</span>&lt;Channel&gt;() {\n        <span class=\"hljs-meta\">@Override</span>\n        <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">initChannel</span><span class=\"hljs-params\">(Channel ch)</span> {\n            ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringEncoder</span>());\n        }\n    })\n    .connect(<span class=\"hljs-string\">&quot;127.0.0.1&quot;</span>, <span class=\"hljs-number\">8080</span>)\n    .sync()\n    .channel()\n    .writeAndFlush(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>() + <span class=\"hljs-string\">&quot;: hello world!&quot;</span>);\n</code></div></pre>\n<p>现在把它拆开来看</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-type\">ChannelFuture</span> <span class=\"hljs-variable\">channelFuture</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Bootstrap</span>()\n    .group(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NioEventLoopGroup</span>())\n    .channel(NioSocketChannel.class)\n    .handler(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelInitializer</span>&lt;Channel&gt;() {\n        <span class=\"hljs-meta\">@Override</span>\n        <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">initChannel</span><span class=\"hljs-params\">(Channel ch)</span> {\n            ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringEncoder</span>());\n        }\n    })\n    .connect(<span class=\"hljs-string\">&quot;127.0.0.1&quot;</span>, <span class=\"hljs-number\">8080</span>); <span class=\"hljs-comment\">// 1</span>\n\nchannelFuture.sync().channel().writeAndFlush(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>() + <span class=\"hljs-string\">&quot;: hello world!&quot;</span>);\n</code></div></pre>\n<ul>\n<li>1 处返回的是 ChannelFuture 对象，它的作用是利用 channel() 方法来获取 Channel 对象</li>\n</ul>\n<p><strong>注意</strong> connect 方法是异步的，意味着不等连接建立，方法执行就返回了。因此 channelFuture 对象中不能【立刻】获得到正确的 Channel 对象</p>\n<p>实验如下：</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-type\">ChannelFuture</span> <span class=\"hljs-variable\">channelFuture</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Bootstrap</span>()\n    .group(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NioEventLoopGroup</span>())\n    .channel(NioSocketChannel.class)\n    .handler(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelInitializer</span>&lt;Channel&gt;() {\n        <span class=\"hljs-meta\">@Override</span>\n        <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">initChannel</span><span class=\"hljs-params\">(Channel ch)</span> {\n            ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringEncoder</span>());\n        }\n    })\n    .connect(<span class=\"hljs-string\">&quot;127.0.0.1&quot;</span>, <span class=\"hljs-number\">8080</span>);\n\nSystem.out.println(channelFuture.channel()); <span class=\"hljs-comment\">// 1</span>\nchannelFuture.sync(); <span class=\"hljs-comment\">// 2</span>\nSystem.out.println(channelFuture.channel()); <span class=\"hljs-comment\">// 3</span>\n</code></div></pre>\n<ul>\n<li>执行到 1 时，连接未建立，打印 <code>[id: 0x2e1884dd]</code></li>\n<li>执行到 2 时，sync 方法是同步等待连接建立完成</li>\n<li>执行到 3 时，连接肯定建立了，打印 <code>[id: 0x2e1884dd, L:/127.0.0.1:57191 - R:/127.0.0.1:8080]</code></li>\n</ul>\n<p>除了用 sync 方法可以让异步操作同步以外，还可以使用回调的方式：</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-type\">ChannelFuture</span> <span class=\"hljs-variable\">channelFuture</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Bootstrap</span>()\n    .group(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NioEventLoopGroup</span>())\n    .channel(NioSocketChannel.class)\n    .handler(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelInitializer</span>&lt;Channel&gt;() {\n        <span class=\"hljs-meta\">@Override</span>\n        <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">initChannel</span><span class=\"hljs-params\">(Channel ch)</span> {\n            ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringEncoder</span>());\n        }\n    })\n    .connect(<span class=\"hljs-string\">&quot;127.0.0.1&quot;</span>, <span class=\"hljs-number\">8080</span>);\nSystem.out.println(channelFuture.channel()); <span class=\"hljs-comment\">// 1</span>\nchannelFuture.addListener((ChannelFutureListener) future -&gt; {\n    System.out.println(future.channel()); <span class=\"hljs-comment\">// 2</span>\n});\n</code></div></pre>\n<ul>\n<li>执行到 1 时，连接未建立，打印 <code>[id: 0x749124ba]</code></li>\n<li>ChannelFutureListener 会在连接建立时被调用（其中 operationComplete 方法），因此执行到 2 时，连接肯定建立了，打印 <code>[id: 0x749124ba, L:/127.0.0.1:57351 - R:/127.0.0.1:8080]</code></li>\n</ul>\n<h4><a id=\"CloseFuture_577\"></a>CloseFuture</h4>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-meta\">@Slf4j</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CloseFutureClient</span> {\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> InterruptedException {\n        NioEventLoopGroup group <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NioEventLoopGroup</span>();\n        <span class=\"hljs-type\">ChannelFuture</span> <span class=\"hljs-variable\">channelFuture</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Bootstrap</span>()\n                .group(group)\n                .channel(NioSocketChannel.class)\n                .handler(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelInitializer</span>&lt;NioSocketChannel&gt;() {\n                    <span class=\"hljs-meta\">@Override</span> <span class=\"hljs-comment\">// 在连接建立后被调用</span>\n                    <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">initChannel</span><span class=\"hljs-params\">(NioSocketChannel ch)</span> <span class=\"hljs-keyword\">throws</span> Exception {\n                        ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LoggingHandler</span>(LogLevel.DEBUG));\n                        ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringEncoder</span>());\n                    }\n                })\n                .connect(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">InetSocketAddress</span>(<span class=\"hljs-string\">&quot;localhost&quot;</span>, <span class=\"hljs-number\">8080</span>));\n        <span class=\"hljs-type\">Channel</span> <span class=\"hljs-variable\">channel</span> <span class=\"hljs-operator\">=</span> channelFuture.sync().channel();\n        log.debug(<span class=\"hljs-string\">&quot;{}&quot;</span>, channel);\n        <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Thread</span>(()-&gt;{\n            <span class=\"hljs-type\">Scanner</span> <span class=\"hljs-variable\">scanner</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Scanner</span>(System.in);\n            <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) {\n                <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">line</span> <span class=\"hljs-operator\">=</span> scanner.nextLine();\n                <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-string\">&quot;q&quot;</span>.equals(line)) {\n                    channel.close(); <span class=\"hljs-comment\">// close 异步操作 1s 之后</span>\n<span class=\"hljs-comment\">//                    log.debug(&quot;处理关闭之后的操作&quot;); // 不能在这里善后</span>\n                    <span class=\"hljs-keyword\">break</span>;\n                }\n                channel.writeAndFlush(line);\n            }\n        }, <span class=\"hljs-string\">&quot;input&quot;</span>).start();\n\n        <span class=\"hljs-comment\">// 获取 CloseFuture 对象， 1) 同步处理关闭， 2) 异步处理关闭</span>\n        <span class=\"hljs-type\">ChannelFuture</span> <span class=\"hljs-variable\">closeFuture</span> <span class=\"hljs-operator\">=</span> channel.closeFuture();\n        <span class=\"hljs-comment\">/*log.debug(&quot;waiting close...&quot;);\n        closeFuture.sync();\n        log.debug(&quot;处理关闭之后的操作&quot;);*/</span>\n        closeFuture.addListener(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelFutureListener</span>() {\n            <span class=\"hljs-meta\">@Override</span>\n            <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">operationComplete</span><span class=\"hljs-params\">(ChannelFuture future)</span> <span class=\"hljs-keyword\">throws</span> Exception {\n                log.debug(<span class=\"hljs-string\">&quot;处理关闭之后的操作&quot;</span>);\n                group.shutdownGracefully();\n            }\n        });\n    }\n}\n</code></div></pre>\n<h4><a id=\"__630\"></a>💡 异步提升的是什么</h4>\n<ul>\n<li>有些同学看到这里会有疑问：为什么不在一个线程中去执行建立连接、去执行关闭 channel，那样不是也可以吗？非要用这么复杂的异步方式：比如一个线程发起建立连接，另一个线程去真正建立连接。</li>\n<li>还有同学会笼统地回答，因为 netty 异步方式用了多线程、多线程就效率高。其实这些认识都比较片面，多线程和异步所提升的效率并不是所认为的。</li>\n</ul>\n<p>思考下面的场景，4 个医生给人看病，每个病人花费 20 分钟，而且医生看病的过程中是以病人为单位的，一个病人看完了，才能看下一个病人。假设病人源源不断地来，可以计算一下 4 个医生一天工作 8 小时，处理的病人总数是：<code>4 * 8 * 3 = 96</code></p>\n<p>经研究发现，看病可以细分为四个步骤，经拆分后每个步骤需要 5 分钟，如下</p>\n<p>因此可以做如下优化，只有一开始，医生 2、3、4 分别要等待 5、10、15 分钟才能执行工作，但只要后续病人源源不断地来，他们就能够满负荷工作，并且处理病人的能力提高到了 <code>4 * 8 * 12</code> 效率几乎是原来的四倍</p>\n<p>要点</p>\n<ul>\n<li>单线程没法异步提高效率，必须配合多线程、多核 cpu 才能发挥异步的优势</li>\n<li>异步并没有缩短响应时间，反而有所增加</li>\n<li>合理进行任务拆分，也是利用异步的关键</li>\n</ul>\n<h3><a id=\"33_Future__Promise_648\"></a>3.3 Future &amp; Promise</h3>\n<p>在异步处理时，经常用到这两个接口</p>\n<p>首先要说明 netty 中的 Future 与 jdk 中的 Future 同名，但是是两个接口，netty 的 Future 继承自 jdk 的 Future，而 Promise 又对 netty Future 进行了扩展</p>\n<ul>\n<li>jdk Future 只能同步等待任务结束（或成功、或失败）才能得到结果</li>\n<li>netty Future 可以同步等待任务结束得到结果，也可以异步方式得到结果，但都是要等任务结束</li>\n<li>netty Promise 不仅有 netty Future 的功能，而且脱离了任务独立存在，只作为两个线程间传递结果的容器</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>功能/名称</th>\n<th>jdk Future</th>\n<th>netty Future</th>\n<th>Promise</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>cancel</td>\n<td>取消任务</td>\n<td>-</td>\n<td>-</td>\n</tr>\n<tr>\n<td>isCanceled</td>\n<td>任务是否取消</td>\n<td>-</td>\n<td>-</td>\n</tr>\n<tr>\n<td>isDone</td>\n<td>任务是否完成，不能区分成功失败</td>\n<td>-</td>\n<td>-</td>\n</tr>\n<tr>\n<td>get</td>\n<td>获取任务结果，阻塞等待</td>\n<td>-</td>\n<td>-</td>\n</tr>\n<tr>\n<td>getNow</td>\n<td>-</td>\n<td>获取任务结果，非阻塞，还未产生结果时返回 null</td>\n<td>-</td>\n</tr>\n<tr>\n<td>await</td>\n<td>-</td>\n<td>等待任务结束，如果任务失败，不会抛异常，而是通过 isSuccess 判断</td>\n<td>-</td>\n</tr>\n<tr>\n<td>sync</td>\n<td>-</td>\n<td>等待任务结束，如果任务失败，抛出异常</td>\n<td>-</td>\n</tr>\n<tr>\n<td>isSuccess</td>\n<td>-</td>\n<td>判断任务是否成功</td>\n<td>-</td>\n</tr>\n<tr>\n<td>cause</td>\n<td>-</td>\n<td>获取失败信息，非阻塞，如果没有失败，返回null</td>\n<td>-</td>\n</tr>\n<tr>\n<td>addLinstener</td>\n<td>-</td>\n<td>添加回调，异步接收结果</td>\n<td>-</td>\n</tr>\n<tr>\n<td>setSuccess</td>\n<td>-</td>\n<td>-</td>\n<td>设置成功结果</td>\n</tr>\n<tr>\n<td>setFailure</td>\n<td>-</td>\n<td>-</td>\n<td>设置失败结果</td>\n</tr>\n</tbody>\n</table>\n<h4><a id=\"1_675\"></a>例1</h4>\n<p>同步处理任务成功</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-type\">DefaultEventLoop</span> <span class=\"hljs-variable\">eventExecutors</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DefaultEventLoop</span>();\nDefaultPromise&lt;Integer&gt; promise = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DefaultPromise</span>&lt;&gt;(eventExecutors);\n\neventExecutors.execute(()-&gt;{\n    <span class=\"hljs-keyword\">try</span> {\n        Thread.sleep(<span class=\"hljs-number\">1000</span>);\n    } <span class=\"hljs-keyword\">catch</span> (InterruptedException e) {\n        e.printStackTrace();\n    }\n    log.debug(<span class=\"hljs-string\">&quot;set success, {}&quot;</span>,<span class=\"hljs-number\">10</span>);\n    promise.setSuccess(<span class=\"hljs-number\">10</span>);\n});\n\nlog.debug(<span class=\"hljs-string\">&quot;start...&quot;</span>);\nlog.debug(<span class=\"hljs-string\">&quot;{}&quot;</span>,promise.getNow()); <span class=\"hljs-comment\">// 还没有结果</span>\nlog.debug(<span class=\"hljs-string\">&quot;{}&quot;</span>,promise.get());\n</code></div></pre>\n<p>输出</p>\n<pre><code class=\"lang-\">11:51:53 [DEBUG] [main] c.i.o.DefaultPromiseTest2 - start...\n11:51:53 [DEBUG] [main] c.i.o.DefaultPromiseTest2 - null\n11:51:54 [DEBUG] [defaultEventLoop-1-1] c.i.o.DefaultPromiseTest2 - set success, 10\n11:51:54 [DEBUG] [main] c.i.o.DefaultPromiseTest2 - 10\n</code></pre>\n<h4><a id=\"2_709\"></a>例2</h4>\n<p>异步处理任务成功</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-type\">DefaultEventLoop</span> <span class=\"hljs-variable\">eventExecutors</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DefaultEventLoop</span>();\nDefaultPromise&lt;Integer&gt; promise = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DefaultPromise</span>&lt;&gt;(eventExecutors);\n\n<span class=\"hljs-comment\">// 设置回调，异步接收结果</span>\npromise.addListener(future -&gt; {\n    <span class=\"hljs-comment\">// 这里的 future 就是上面的 promise</span>\n    log.debug(<span class=\"hljs-string\">&quot;{}&quot;</span>,future.getNow());\n});\n\n<span class=\"hljs-comment\">// 等待 1000 后设置成功结果</span>\neventExecutors.execute(()-&gt;{\n    <span class=\"hljs-keyword\">try</span> {\n        Thread.sleep(<span class=\"hljs-number\">1000</span>);\n    } <span class=\"hljs-keyword\">catch</span> (InterruptedException e) {\n        e.printStackTrace();\n    }\n    log.debug(<span class=\"hljs-string\">&quot;set success, {}&quot;</span>,<span class=\"hljs-number\">10</span>);\n    promise.setSuccess(<span class=\"hljs-number\">10</span>);\n});\n\nlog.debug(<span class=\"hljs-string\">&quot;start...&quot;</span>);\n</code></div></pre>\n<p>输出</p>\n<pre><code class=\"lang-\">11:49:30 [DEBUG] [main] c.i.o.DefaultPromiseTest2 - start...\n11:49:31 [DEBUG] [defaultEventLoop-1-1] c.i.o.DefaultPromiseTest2 - set success, 10\n11:49:31 [DEBUG] [defaultEventLoop-1-1] c.i.o.DefaultPromiseTest2 - 10\n</code></pre>\n<h4><a id=\"3_747\"></a>例3</h4>\n<p>同步处理任务失败 - sync &amp; get</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-type\">DefaultEventLoop</span> <span class=\"hljs-variable\">eventExecutors</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DefaultEventLoop</span>();\n        DefaultPromise&lt;Integer&gt; promise = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DefaultPromise</span>&lt;&gt;(eventExecutors);\n\n        eventExecutors.execute(() -&gt; {\n            <span class=\"hljs-keyword\">try</span> {\n                Thread.sleep(<span class=\"hljs-number\">1000</span>);\n            } <span class=\"hljs-keyword\">catch</span> (InterruptedException e) {\n                e.printStackTrace();\n            }\n            <span class=\"hljs-type\">RuntimeException</span> <span class=\"hljs-variable\">e</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RuntimeException</span>(<span class=\"hljs-string\">&quot;error...&quot;</span>);\n            log.debug(<span class=\"hljs-string\">&quot;set failure, {}&quot;</span>, e.toString());\n            promise.setFailure(e);\n        });\n\n        log.debug(<span class=\"hljs-string\">&quot;start...&quot;</span>);\n        log.debug(<span class=\"hljs-string\">&quot;{}&quot;</span>, promise.getNow());\n        promise.get(); <span class=\"hljs-comment\">// sync() 也会出现异常，只是 get 会再用 ExecutionException 包一层异常</span>\n</code></div></pre>\n<p>输出</p>\n<pre><code class=\"lang-\">12:11:07 [DEBUG] [main] c.i.o.DefaultPromiseTest2 - start...\n12:11:07 [DEBUG] [main] c.i.o.DefaultPromiseTest2 - null\n12:11:08 [DEBUG] [defaultEventLoop-1-1] c.i.o.DefaultPromiseTest2 - set failure, java.lang.RuntimeException: error...\nException in thread &quot;main&quot; java.util.concurrent.ExecutionException: java.lang.RuntimeException: error...\n	at io.netty.util.concurrent.AbstractFuture.get(AbstractFuture.java:41)\n	at com.itcast.oio.DefaultPromiseTest2.main(DefaultPromiseTest2.java:34)\nCaused by: java.lang.RuntimeException: error...\n	at com.itcast.oio.DefaultPromiseTest2.lambda$main$0(DefaultPromiseTest2.java:27)\n	at io.netty.channel.DefaultEventLoop.run(DefaultEventLoop.java:54)\n	at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:918)\n	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n	at java.lang.Thread.run(Thread.java:745)\n</code></pre>\n<h4><a id=\"4_791\"></a>例4</h4>\n<p>同步处理任务失败 - await</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-type\">DefaultEventLoop</span> <span class=\"hljs-variable\">eventExecutors</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DefaultEventLoop</span>();\nDefaultPromise&lt;Integer&gt; promise = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DefaultPromise</span>&lt;&gt;(eventExecutors);\n\neventExecutors.execute(() -&gt; {\n    <span class=\"hljs-keyword\">try</span> {\n        Thread.sleep(<span class=\"hljs-number\">1000</span>);\n    } <span class=\"hljs-keyword\">catch</span> (InterruptedException e) {\n        e.printStackTrace();\n    }\n    <span class=\"hljs-type\">RuntimeException</span> <span class=\"hljs-variable\">e</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RuntimeException</span>(<span class=\"hljs-string\">&quot;error...&quot;</span>);\n    log.debug(<span class=\"hljs-string\">&quot;set failure, {}&quot;</span>, e.toString());\n    promise.setFailure(e);\n});\n\nlog.debug(<span class=\"hljs-string\">&quot;start...&quot;</span>);\nlog.debug(<span class=\"hljs-string\">&quot;{}&quot;</span>, promise.getNow());\npromise.await(); <span class=\"hljs-comment\">// 与 sync 和 get 区别在于，不会抛异常</span>\nlog.debug(<span class=\"hljs-string\">&quot;result {}&quot;</span>, (promise.isSuccess() ? promise.getNow() : promise.cause()).toString());\n</code></div></pre>\n<p>输出</p>\n<pre><code class=\"lang-\">12:18:53 [DEBUG] [main] c.i.o.DefaultPromiseTest2 - start...\n12:18:53 [DEBUG] [main] c.i.o.DefaultPromiseTest2 - null\n12:18:54 [DEBUG] [defaultEventLoop-1-1] c.i.o.DefaultPromiseTest2 - set failure, java.lang.RuntimeException: error...\n12:18:54 [DEBUG] [main] c.i.o.DefaultPromiseTest2 - result java.lang.RuntimeException: error...\n</code></pre>\n<h4><a id=\"5_827\"></a>例5</h4>\n<p>异步处理任务失败</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-type\">DefaultEventLoop</span> <span class=\"hljs-variable\">eventExecutors</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DefaultEventLoop</span>();\nDefaultPromise&lt;Integer&gt; promise = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DefaultPromise</span>&lt;&gt;(eventExecutors);\n\npromise.addListener(future -&gt; {\n    log.debug(<span class=\"hljs-string\">&quot;result {}&quot;</span>, (promise.isSuccess() ? promise.getNow() : promise.cause()).toString());\n});\n\neventExecutors.execute(() -&gt; {\n    <span class=\"hljs-keyword\">try</span> {\n        Thread.sleep(<span class=\"hljs-number\">1000</span>);\n    } <span class=\"hljs-keyword\">catch</span> (InterruptedException e) {\n        e.printStackTrace();\n    }\n    <span class=\"hljs-type\">RuntimeException</span> <span class=\"hljs-variable\">e</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RuntimeException</span>(<span class=\"hljs-string\">&quot;error...&quot;</span>);\n    log.debug(<span class=\"hljs-string\">&quot;set failure, {}&quot;</span>, e.toString());\n    promise.setFailure(e);\n});\n\nlog.debug(<span class=\"hljs-string\">&quot;start...&quot;</span>);\n</code></div></pre>\n<p>输出</p>\n<pre><code class=\"lang-\">12:04:57 [DEBUG] [main] c.i.o.DefaultPromiseTest2 - start...\n12:04:58 [DEBUG] [defaultEventLoop-1-1] c.i.o.DefaultPromiseTest2 - set failure, java.lang.RuntimeException: error...\n12:04:58 [DEBUG] [defaultEventLoop-1-1] c.i.o.DefaultPromiseTest2 - result java.lang.RuntimeException: error...\n</code></pre>\n<h4><a id=\"6_863\"></a>例6</h4>\n<p>await 死锁检查</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-type\">DefaultEventLoop</span> <span class=\"hljs-variable\">eventExecutors</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DefaultEventLoop</span>();\nDefaultPromise&lt;Integer&gt; promise = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DefaultPromise</span>&lt;&gt;(eventExecutors);\n\neventExecutors.submit(()-&gt;{\n    System.out.println(<span class=\"hljs-string\">&quot;1&quot;</span>);\n    <span class=\"hljs-keyword\">try</span> {\n        promise.await();\n        <span class=\"hljs-comment\">// 注意不能仅捕获 InterruptedException 异常</span>\n        <span class=\"hljs-comment\">// 否则 死锁检查抛出的 BlockingOperationException 会继续向上传播</span>\n        <span class=\"hljs-comment\">// 而提交的任务会被包装为 PromiseTask，它的 run 方法中会 catch 所有异常然后设置为 Promise 的失败结果而不会抛出</span>\n    } <span class=\"hljs-keyword\">catch</span> (Exception e) { \n        e.printStackTrace();\n    }\n    System.out.println(<span class=\"hljs-string\">&quot;2&quot;</span>);\n});\neventExecutors.submit(()-&gt;{\n    System.out.println(<span class=\"hljs-string\">&quot;3&quot;</span>);\n    <span class=\"hljs-keyword\">try</span> {\n        promise.await();\n    } <span class=\"hljs-keyword\">catch</span> (Exception e) {\n        e.printStackTrace();\n    }\n    System.out.println(<span class=\"hljs-string\">&quot;4&quot;</span>);\n});\n</code></div></pre>\n<p>输出</p>\n<pre><code class=\"lang-\">1\n2\n3\n4\nio.netty.util.concurrent.BlockingOperationException: DefaultPromise@47499c2a(incomplete)\n	at io.netty.util.concurrent.DefaultPromise.checkDeadLock(DefaultPromise.java:384)\n	at io.netty.util.concurrent.DefaultPromise.await(DefaultPromise.java:212)\n	at com.itcast.oio.DefaultPromiseTest.lambda$main$0(DefaultPromiseTest.java:27)\n	at io.netty.util.concurrent.PromiseTask$RunnableAdapter.call(PromiseTask.java:38)\n	at io.netty.util.concurrent.PromiseTask.run(PromiseTask.java:73)\n	at io.netty.channel.DefaultEventLoop.run(DefaultEventLoop.java:54)\n	at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:918)\n	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n	at java.lang.Thread.run(Thread.java:745)\nio.netty.util.concurrent.BlockingOperationException: DefaultPromise@47499c2a(incomplete)\n	at io.netty.util.concurrent.DefaultPromise.checkDeadLock(DefaultPromise.java:384)\n	at io.netty.util.concurrent.DefaultPromise.await(DefaultPromise.java:212)\n	at com.itcast.oio.DefaultPromiseTest.lambda$main$1(DefaultPromiseTest.java:36)\n	at io.netty.util.concurrent.PromiseTask$RunnableAdapter.call(PromiseTask.java:38)\n	at io.netty.util.concurrent.PromiseTask.run(PromiseTask.java:73)\n	at io.netty.channel.DefaultEventLoop.run(DefaultEventLoop.java:54)\n	at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:918)\n	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n	at java.lang.Thread.run(Thread.java:745)\n\n</code></pre>\n<h3><a id=\"34_Handler__Pipeline_930\"></a>3.4 Handler &amp; Pipeline</h3>\n<p>ChannelHandler 用来处理 Channel 上的各种事件，分为入站、出站两种。所有 ChannelHandler 被连成一串，就是 Pipeline</p>\n<ul>\n<li>入站处理器通常是 ChannelInboundHandlerAdapter 的子类，主要用来读取客户端数据，写回结果</li>\n<li>出站处理器通常是 ChannelOutboundHandlerAdapter 的子类，主要对写回结果进行加工</li>\n</ul>\n<p>打个比喻，每个 Channel 是一个产品的加工车间，Pipeline 是车间中的流水线，ChannelHandler 就是流水线上的各道工序，而后面要讲的 ByteBuf 是原材料，经过很多工序的加工：先经过一道道入站工序，再经过一道道出站工序最终变成产品</p>\n<p>先搞清楚顺序，服务端</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ServerBootstrap</span>()\n    .group(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NioEventLoopGroup</span>())\n    .channel(NioServerSocketChannel.class)\n    .childHandler(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelInitializer</span>&lt;NioSocketChannel&gt;() {\n        <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">initChannel</span><span class=\"hljs-params\">(NioSocketChannel ch)</span> {\n            ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelInboundHandlerAdapter</span>(){\n                <span class=\"hljs-meta\">@Override</span>\n                <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">channelRead</span><span class=\"hljs-params\">(ChannelHandlerContext ctx, Object msg)</span> {\n                    System.out.println(<span class=\"hljs-number\">1</span>);\n                    ctx.fireChannelRead(msg); <span class=\"hljs-comment\">// 1</span>\n                }\n            });\n            ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelInboundHandlerAdapter</span>(){\n                <span class=\"hljs-meta\">@Override</span>\n                <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">channelRead</span><span class=\"hljs-params\">(ChannelHandlerContext ctx, Object msg)</span> {\n                    System.out.println(<span class=\"hljs-number\">2</span>);\n                    ctx.fireChannelRead(msg); <span class=\"hljs-comment\">// 2</span>\n                }\n            });\n            ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelInboundHandlerAdapter</span>(){\n                <span class=\"hljs-meta\">@Override</span>\n                <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">channelRead</span><span class=\"hljs-params\">(ChannelHandlerContext ctx, Object msg)</span> {\n                    System.out.println(<span class=\"hljs-number\">3</span>);\n                    ctx.channel().write(msg); <span class=\"hljs-comment\">// 3</span>\n                }\n            });\n            ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelOutboundHandlerAdapter</span>(){\n                <span class=\"hljs-meta\">@Override</span>\n                <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">write</span><span class=\"hljs-params\">(ChannelHandlerContext ctx, Object msg, \n                                  ChannelPromise promise)</span> {\n                    System.out.println(<span class=\"hljs-number\">4</span>);\n                    ctx.write(msg, promise); <span class=\"hljs-comment\">// 4</span>\n                }\n            });\n            ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelOutboundHandlerAdapter</span>(){\n                <span class=\"hljs-meta\">@Override</span>\n                <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">write</span><span class=\"hljs-params\">(ChannelHandlerContext ctx, Object msg, \n                                  ChannelPromise promise)</span> {\n                    System.out.println(<span class=\"hljs-number\">5</span>);\n                    ctx.write(msg, promise); <span class=\"hljs-comment\">// 5</span>\n                }\n            });\n            ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelOutboundHandlerAdapter</span>(){\n                <span class=\"hljs-meta\">@Override</span>\n                <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">write</span><span class=\"hljs-params\">(ChannelHandlerContext ctx, Object msg, \n                                  ChannelPromise promise)</span> {\n                    System.out.println(<span class=\"hljs-number\">6</span>);\n                    ctx.write(msg, promise); <span class=\"hljs-comment\">// 6</span>\n                }\n            });\n        }\n    })\n    .bind(<span class=\"hljs-number\">8080</span>);\n</code></div></pre>\n<p>客户端</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Bootstrap</span>()\n    .group(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NioEventLoopGroup</span>())\n    .channel(NioSocketChannel.class)\n    .handler(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelInitializer</span>&lt;Channel&gt;() {\n        <span class=\"hljs-meta\">@Override</span>\n        <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">initChannel</span><span class=\"hljs-params\">(Channel ch)</span> {\n            ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringEncoder</span>());\n        }\n    })\n    .connect(<span class=\"hljs-string\">&quot;127.0.0.1&quot;</span>, <span class=\"hljs-number\">8080</span>)\n    .addListener((ChannelFutureListener) future -&gt; {\n        future.channel().writeAndFlush(<span class=\"hljs-string\">&quot;hello,world&quot;</span>);\n    });\n</code></div></pre>\n<p>服务器端打印：</p>\n<pre><code class=\"lang-\">1\n2\n3\n6\n5\n4\n</code></pre>\n<p>可以看到，ChannelInboundHandlerAdapter 是按照 addLast 的顺序执行的，而 ChannelOutboundHandlerAdapter 是按照 addLast 的逆序执行的。ChannelPipeline 的实现是一个 ChannelHandlerContext（包装了 ChannelHandler） 组成的双向链表</p>\n<p><img src=\"img/0008.png\" alt=\"\" /></p>\n<ul>\n<li>入站处理器中，ctx.fireChannelRead(msg) 是 <strong>调用下一个入站处理器</strong>\n<ul>\n<li>如果注释掉 1 处代码，则仅会打印 1</li>\n<li>如果注释掉 2 处代码，则仅会打印 1 2</li>\n</ul>\n</li>\n<li>3 处的 ctx.channel().write(msg) 会 <strong>从尾部开始触发</strong> 后续出站处理器的执行\n<ul>\n<li>如果注释掉 3 处代码，则仅会打印 1 2 3</li>\n</ul>\n</li>\n<li>类似的，出站处理器中，ctx.write(msg, promise) 的调用也会 <strong>触发上一个出站处理器</strong>\n<ul>\n<li>如果注释掉 6 处代码，则仅会打印 1 2 3 6</li>\n</ul>\n</li>\n<li>ctx.channel().write(msg) vs ctx.write(msg)\n<ul>\n<li>都是触发出站处理器的执行</li>\n<li>ctx.channel().write(msg) 从尾部开始查找出站处理器</li>\n<li>ctx.write(msg) 是从当前节点找上一个出站处理器</li>\n<li>3 处的 ctx.channel().write(msg) 如果改为 ctx.write(msg) 仅会打印 1 2 3，因为节点3 之前没有其它出站处理器了</li>\n<li>6 处的 ctx.write(msg, promise) 如果改为 ctx.channel().write(msg) 会打印 1 2 3 6 6 6… 因为 ctx.channel().write() 是从尾部开始查找，结果又是节点6 自己</li>\n</ul>\n</li>\n</ul>\n<p>图1 - 服务端 pipeline 触发的原始流程，图中数字代表了处理步骤的先后次序</p>\n<p><img src=\"img/0009.png\" alt=\"\" /></p>\n<h3><a id=\"35_ByteBuf_1054\"></a>3.5 ByteBuf</h3>\n<p>是对字节数据的封装</p>\n<h4><a id=\"1_1058\"></a>1）创建</h4>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-type\">ByteBuf</span> <span class=\"hljs-variable\">buffer</span> <span class=\"hljs-operator\">=</span> ByteBufAllocator.DEFAULT.buffer(<span class=\"hljs-number\">10</span>);\nlog(buffer);\n</code></div></pre>\n<p>上面代码创建了一个默认的 ByteBuf（池化基于直接内存的 ByteBuf），初始容量是 10</p>\n<p>输出</p>\n<pre><code class=\"lang-\">read index:0 write index:0 capacity:10\n</code></pre>\n<p>其中 log 方法参考如下</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">log</span><span class=\"hljs-params\">(ByteBuf buffer)</span> {\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">length</span> <span class=\"hljs-operator\">=</span> buffer.readableBytes();\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">rows</span> <span class=\"hljs-operator\">=</span> length / <span class=\"hljs-number\">16</span> + (length % <span class=\"hljs-number\">15</span> == <span class=\"hljs-number\">0</span> ? <span class=\"hljs-number\">0</span> : <span class=\"hljs-number\">1</span>) + <span class=\"hljs-number\">4</span>;\n    <span class=\"hljs-type\">StringBuilder</span> <span class=\"hljs-variable\">buf</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringBuilder</span>(rows * <span class=\"hljs-number\">80</span> * <span class=\"hljs-number\">2</span>)\n        .append(<span class=\"hljs-string\">&quot;read index:&quot;</span>).append(buffer.readerIndex())\n        .append(<span class=\"hljs-string\">&quot; write index:&quot;</span>).append(buffer.writerIndex())\n        .append(<span class=\"hljs-string\">&quot; capacity:&quot;</span>).append(buffer.capacity())\n        .append(NEWLINE);\n    appendPrettyHexDump(buf, buffer);\n    System.out.println(buf.toString());\n}\n</code></div></pre>\n<h4><a id=\"2_vs__1091\"></a>2）直接内存 vs 堆内存</h4>\n<p>可以使用下面的代码来创建池化基于堆的 ByteBuf</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-type\">ByteBuf</span> <span class=\"hljs-variable\">buffer</span> <span class=\"hljs-operator\">=</span> ByteBufAllocator.DEFAULT.heapBuffer(<span class=\"hljs-number\">10</span>);\n</code></div></pre>\n<p>也可以使用下面的代码来创建池化基于直接内存的 ByteBuf</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-type\">ByteBuf</span> <span class=\"hljs-variable\">buffer</span> <span class=\"hljs-operator\">=</span> ByteBufAllocator.DEFAULT.directBuffer(<span class=\"hljs-number\">10</span>);\n</code></div></pre>\n<ul>\n<li>直接内存创建和销毁的代价昂贵，但读写性能高（少一次内存复制），适合配合池化功能一起用</li>\n<li>直接内存对 GC 压力小，因为这部分内存不受 JVM 垃圾回收的管理，但也要注意及时主动释放</li>\n</ul>\n<h4><a id=\"3_vs__1110\"></a>3）池化 vs 非池化</h4>\n<p>池化的最大意义在于可以重用 ByteBuf，优点有</p>\n<ul>\n<li>没有池化，则每次都得创建新的 ByteBuf 实例，这个操作对直接内存代价昂贵，就算是堆内存，也会增加 GC 压力</li>\n<li>有了池化，则可以重用池中 ByteBuf 实例，并且采用了与 jemalloc 类似的内存分配算法提升分配效率</li>\n<li>高并发时，池化功能更节约内存，减少内存溢出的可能</li>\n</ul>\n<p>池化功能是否开启，可以通过下面的系统环境变量来设置</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\">-Dio.netty.allocator.type={unpooled|pooled}\n</code></div></pre>\n<ul>\n<li>4.1 以后，非 Android 平台默认启用池化实现，Android 平台启用非池化实现</li>\n<li>4.1 之前，池化功能还不成熟，默认是非池化实现</li>\n</ul>\n<h4><a id=\"4_1129\"></a>4）组成</h4>\n<p>ByteBuf 由四部分组成</p>\n<p><img src=\"img/0010.png\" alt=\"\" /></p>\n<p>最开始读写指针都在 0 位置</p>\n<h4><a id=\"5_1139\"></a>5）写入</h4>\n<p>方法列表，省略一些不重要的方法</p>\n<table>\n<thead>\n<tr>\n<th>方法签名</th>\n<th>含义</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>writeBoolean(boolean value)</td>\n<td>写入 boolean 值</td>\n<td>用一字节 01|00 代表 true|false</td>\n</tr>\n<tr>\n<td>writeByte(int value)</td>\n<td>写入 byte 值</td>\n<td></td>\n</tr>\n<tr>\n<td>writeShort(int value)</td>\n<td>写入 short 值</td>\n<td></td>\n</tr>\n<tr>\n<td>writeInt(int value)</td>\n<td>写入 int 值</td>\n<td>Big Endian，即 0x250，写入后 00 00 02 50</td>\n</tr>\n<tr>\n<td>writeIntLE(int value)</td>\n<td>写入 int 值</td>\n<td>Little Endian，即 0x250，写入后 50 02 00 00</td>\n</tr>\n<tr>\n<td>writeLong(long value)</td>\n<td>写入 long 值</td>\n<td></td>\n</tr>\n<tr>\n<td>writeChar(int value)</td>\n<td>写入 char 值</td>\n<td></td>\n</tr>\n<tr>\n<td>writeFloat(float value)</td>\n<td>写入 float 值</td>\n<td></td>\n</tr>\n<tr>\n<td>writeDouble(double value)</td>\n<td>写入 double 值</td>\n<td></td>\n</tr>\n<tr>\n<td>writeBytes(ByteBuf src)</td>\n<td>写入 netty 的 ByteBuf</td>\n<td></td>\n</tr>\n<tr>\n<td>writeBytes(byte[] src)</td>\n<td>写入 byte[]</td>\n<td></td>\n</tr>\n<tr>\n<td>writeBytes(ByteBuffer src)</td>\n<td>写入 nio 的 ByteBuffer</td>\n<td></td>\n</tr>\n<tr>\n<td>int writeCharSequence(CharSequence sequence, Charset charset)</td>\n<td>写入字符串</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>注意</p>\n<ul>\n<li>这些方法的未指明返回值的，其返回值都是 ByteBuf，意味着可以链式调用</li>\n<li>网络传输，默认习惯是 Big Endian</li>\n</ul>\n</blockquote>\n<p>先写入 4 个字节</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\">buffer.writeBytes(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">byte</span>[]{<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>});\nlog(buffer);\n</code></div></pre>\n<p>结果是</p>\n<pre><code class=\"lang-\">read index:0 write index:4 capacity:10\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 01 02 03 04                                     |....            |\n+--------+-------------------------------------------------+----------------+\n</code></pre>\n<p>再写入一个 int 整数，也是 4 个字节</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\">buffer.writeInt(<span class=\"hljs-number\">5</span>);\nlog(buffer);\n</code></div></pre>\n<p>结果是</p>\n<pre><code class=\"lang-\">read index:0 write index:8 capacity:10\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 01 02 03 04 00 00 00 05                         |........        |\n+--------+-------------------------------------------------+----------------+\n</code></pre>\n<p>还有一类方法是 set 开头的一系列方法，也可以写入数据，但不会改变写指针位置</p>\n<h4><a id=\"6_1208\"></a>6）扩容</h4>\n<p>再写入一个 int 整数时，容量不够了（初始容量是 10），这时会引发扩容</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\">buffer.writeInt(<span class=\"hljs-number\">6</span>);\nlog(buffer);\n</code></div></pre>\n<p>扩容规则是</p>\n<ul>\n<li>如何写入后数据大小未超过 512，则选择下一个 16 的整数倍，例如写入后大小为 12 ，则扩容后 capacity 是 16</li>\n<li>如果写入后数据大小超过 512，则选择下一个 2^n，例如写入后大小为 513，则扩容后 capacity 是 2<sup>10=1024（2</sup>9=512 已经不够了）</li>\n<li>扩容不能超过 max capacity 会报错</li>\n</ul>\n<p>结果是</p>\n<pre><code class=\"lang-\">read index:0 write index:12 capacity:16\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 01 02 03 04 00 00 00 05 00 00 00 06             |............    |\n+--------+-------------------------------------------------+----------------+\n</code></pre>\n<h4><a id=\"7_1236\"></a>7）读取</h4>\n<p>例如读了 4 次，每次一个字节</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\">System.out.println(buffer.readByte());\nSystem.out.println(buffer.readByte());\nSystem.out.println(buffer.readByte());\nSystem.out.println(buffer.readByte());\nlog(buffer);\n</code></div></pre>\n<p>读过的内容，就属于废弃部分了，再读只能读那些尚未读取的部分</p>\n<pre><code class=\"lang-\">1\n2\n3\n4\nread index:4 write index:12 capacity:16\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 00 00 00 05 00 00 00 06                         |........        |\n+--------+-------------------------------------------------+----------------+\n</code></pre>\n<p>如果需要重复读取 int 整数 5，怎么办？</p>\n<p>可以在 read 前先做个标记 mark</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\">buffer.markReaderIndex();\nSystem.out.println(buffer.readInt());\nlog(buffer);\n</code></div></pre>\n<p>结果</p>\n<pre><code class=\"lang-\">5\nread index:8 write index:12 capacity:16\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 00 00 00 06                                     |....            |\n+--------+-------------------------------------------------+----------------+\n</code></pre>\n<p>这时要重复读取的话，重置到标记位置 reset</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\">buffer.resetReaderIndex();\nlog(buffer);\n</code></div></pre>\n<p>这时</p>\n<pre><code class=\"lang-\">read index:4 write index:12 capacity:16\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 00 00 00 05 00 00 00 06                         |........        |\n+--------+-------------------------------------------------+----------------+\n</code></pre>\n<p>还有种办法是采用 get 开头的一系列方法，这些方法不会改变 read index</p>\n<h4><a id=\"8retain__release_1307\"></a>8）retain &amp; release</h4>\n<p>由于 Netty 中有堆外内存的 ByteBuf 实现，堆外内存最好是手动来释放，而不是等 GC 垃圾回收。</p>\n<ul>\n<li>UnpooledHeapByteBuf 使用的是 JVM 内存，只需等 GC 回收内存即可</li>\n<li>UnpooledDirectByteBuf 使用的就是直接内存了，需要特殊的方法来回收内存</li>\n<li>PooledByteBuf 和它的子类使用了池化机制，需要更复杂的规则来回收内存</li>\n</ul>\n<blockquote>\n<p>回收内存的源码实现，请关注下面方法的不同实现</p>\n<p><code>protected abstract void deallocate()</code></p>\n</blockquote>\n<p>Netty 这里采用了引用计数法来控制回收内存，每个 ByteBuf 都实现了 ReferenceCounted 接口</p>\n<ul>\n<li>每个 ByteBuf 对象的初始计数为 1</li>\n<li>调用 release 方法计数减 1，如果计数为 0，ByteBuf 内存被回收</li>\n<li>调用 retain 方法计数加 1，表示调用者没用完之前，其它 handler 即使调用了 release 也不会造成回收</li>\n<li>当计数为 0 时，底层内存会被回收，这时即使 ByteBuf 对象还在，其各个方法均无法正常使用</li>\n</ul>\n<p>谁来负责 release 呢？</p>\n<p>不是我们想象的（一般情况下）</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-type\">ByteBuf</span> <span class=\"hljs-variable\">buf</span> <span class=\"hljs-operator\">=</span> ...\n<span class=\"hljs-keyword\">try</span> {\n    ...\n} <span class=\"hljs-keyword\">finally</span> {\n    buf.release();\n}\n</code></div></pre>\n<p>请思考，因为 pipeline 的存在，一般需要将 ByteBuf 传递给下一个 ChannelHandler，如果在 finally 中 release 了，就失去了传递性（当然，如果在这个 ChannelHandler 内这个 ByteBuf 已完成了它的使命，那么便无须再传递）</p>\n<p>基本规则是，<strong>谁是最后使用者，谁负责 release</strong>，详细分析如下</p>\n<ul>\n<li>起点，对于 NIO 实现来讲，在 io.netty.channel.nio.AbstractNioByteChannel.NioByteUnsafe#read 方法中首次创建 ByteBuf 放入 pipeline（line 163 pipeline.fireChannelRead(byteBuf)）</li>\n<li>入站 ByteBuf 处理原则\n<ul>\n<li>对原始 ByteBuf 不做处理，调用 ctx.fireChannelRead(msg) 向后传递，这时无须 release</li>\n<li>将原始 ByteBuf 转换为其它类型的 Java 对象，这时 ByteBuf 就没用了，必须 release</li>\n<li>如果不调用 ctx.fireChannelRead(msg) 向后传递，那么也必须 release</li>\n<li>注意各种异常，如果 ByteBuf 没有成功传递到下一个 ChannelHandler，必须 release</li>\n<li>假设消息一直向后传，那么 TailContext 会负责释放未处理消息（原始的 ByteBuf）</li>\n</ul>\n</li>\n<li>出站 ByteBuf 处理原则\n<ul>\n<li>出站消息最终都会转为 ByteBuf 输出，一直向前传，由 HeadContext flush 后 release</li>\n</ul>\n</li>\n<li>异常处理原则\n<ul>\n<li>有时候不清楚 ByteBuf 被引用了多少次，但又必须彻底释放，可以循环调用 release 直到返回 true</li>\n</ul>\n</li>\n</ul>\n<p>TailContext 释放未处理消息逻辑</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-comment\">// io.netty.channel.DefaultChannelPipeline#onUnhandledInboundMessage(java.lang.Object)</span>\n<span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">onUnhandledInboundMessage</span><span class=\"hljs-params\">(Object msg)</span> {\n    <span class=\"hljs-keyword\">try</span> {\n        logger.debug(\n            <span class=\"hljs-string\">&quot;Discarded inbound message {} that reached at the tail of the pipeline. &quot;</span> +\n            <span class=\"hljs-string\">&quot;Please check your pipeline configuration.&quot;</span>, msg);\n    } <span class=\"hljs-keyword\">finally</span> {\n        ReferenceCountUtil.release(msg);\n    }\n}\n</code></div></pre>\n<p>具体代码</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-comment\">// io.netty.util.ReferenceCountUtil#release(java.lang.Object)</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">release</span><span class=\"hljs-params\">(Object msg)</span> {\n    <span class=\"hljs-keyword\">if</span> (msg <span class=\"hljs-keyword\">instanceof</span> ReferenceCounted) {\n        <span class=\"hljs-keyword\">return</span> ((ReferenceCounted) msg).release();\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n}\n</code></div></pre>\n<h4><a id=\"9slice_1392\"></a>9）slice</h4>\n<p>【零拷贝】的体现之一，对原始 ByteBuf 进行切片成多个 ByteBuf，切片后的 ByteBuf 并没有发生内存复制，还是使用原始 ByteBuf 的内存，切片后的 ByteBuf 维护独立的 read，write 指针</p>\n<p><img src=\"img/0011.png\" alt=\"\" /></p>\n<p>例，原始 ByteBuf 进行一些初始操作</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-type\">ByteBuf</span> <span class=\"hljs-variable\">origin</span> <span class=\"hljs-operator\">=</span> ByteBufAllocator.DEFAULT.buffer(<span class=\"hljs-number\">10</span>);\norigin.writeBytes(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">byte</span>[]{<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>});\norigin.readByte();\nSystem.out.println(ByteBufUtil.prettyHexDump(origin));\n</code></div></pre>\n<p>输出</p>\n<pre><code class=\"lang-\">         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 02 03 04                                        |...             |\n+--------+-------------------------------------------------+----------------+\n</code></pre>\n<p>这时调用 slice 进行切片，无参 slice 是从原始 ByteBuf 的 read index 到 write index 之间的内容进行切片，切片后的 max capacity 被固定为这个区间的大小，因此不能追加 write</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-type\">ByteBuf</span> <span class=\"hljs-variable\">slice</span> <span class=\"hljs-operator\">=</span> origin.slice();\nSystem.out.println(ByteBufUtil.prettyHexDump(slice));\n<span class=\"hljs-comment\">// slice.writeByte(5); 如果执行，会报 IndexOutOfBoundsException 异常</span>\n</code></div></pre>\n<p>输出</p>\n<pre><code class=\"lang-\">         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 02 03 04                                        |...             |\n+--------+-------------------------------------------------+----------------+\n</code></pre>\n<p>如果原始 ByteBuf 再次读操作（又读了一个字节）</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\">origin.readByte();\nSystem.out.println(ByteBufUtil.prettyHexDump(origin));\n</code></div></pre>\n<p>输出</p>\n<pre><code class=\"lang-\">         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 03 04                                           |..              |\n+--------+-------------------------------------------------+----------------+\n</code></pre>\n<p>这时的 slice 不受影响，因为它有独立的读写指针</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\">System.out.println(ByteBufUtil.prettyHexDump(slice));\n</code></div></pre>\n<p>输出</p>\n<pre><code class=\"lang-\">         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 02 03 04                                        |...             |\n+--------+-------------------------------------------------+----------------+\n</code></pre>\n<p>如果 slice 的内容发生了更改</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\">slice.setByte(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">5</span>);\nSystem.out.println(ByteBufUtil.prettyHexDump(slice));\n</code></div></pre>\n<p>输出</p>\n<pre><code class=\"lang-\">         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 02 03 05                                        |...             |\n+--------+-------------------------------------------------+----------------+\n</code></pre>\n<p>这时，原始 ByteBuf 也会受影响，因为底层都是同一块内存</p>\n<pre><code class=\"lang-\">System.out.println(ByteBufUtil.prettyHexDump(origin));\n</code></pre>\n<p>输出</p>\n<pre><code class=\"lang-\">         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 03 05                                           |..              |\n+--------+-------------------------------------------------+----------------+\n</code></pre>\n<h4><a id=\"10duplicate_1503\"></a>10）duplicate</h4>\n<p>【零拷贝】的体现之一，就好比截取了原始 ByteBuf 所有内容，并且没有 max capacity 的限制，也是与原始 ByteBuf 使用同一块底层内存，只是读写指针是独立的</p>\n<p><img src=\"img/0012.png\" alt=\"\" /></p>\n<h4><a id=\"11copy_1511\"></a>11）copy</h4>\n<p>会将底层内存数据进行深拷贝，因此无论读写，都与原始 ByteBuf 无关</p>\n<h4><a id=\"12CompositeByteBuf_1517\"></a>12）CompositeByteBuf</h4>\n<p>【零拷贝】的体现之一，可以将多个 ByteBuf 合并为一个逻辑上的 ByteBuf，避免拷贝</p>\n<p>有两个 ByteBuf 如下</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-type\">ByteBuf</span> <span class=\"hljs-variable\">buf1</span> <span class=\"hljs-operator\">=</span> ByteBufAllocator.DEFAULT.buffer(<span class=\"hljs-number\">5</span>);\nbuf1.writeBytes(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">byte</span>[]{<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>});\n<span class=\"hljs-type\">ByteBuf</span> <span class=\"hljs-variable\">buf2</span> <span class=\"hljs-operator\">=</span> ByteBufAllocator.DEFAULT.buffer(<span class=\"hljs-number\">5</span>);\nbuf2.writeBytes(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">byte</span>[]{<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">10</span>});\nSystem.out.println(ByteBufUtil.prettyHexDump(buf1));\nSystem.out.println(ByteBufUtil.prettyHexDump(buf2));\n</code></div></pre>\n<p>输出</p>\n<pre><code class=\"lang-\">         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 01 02 03 04 05                                  |.....           |\n+--------+-------------------------------------------------+----------------+\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 06 07 08 09 0a                                  |.....           |\n+--------+-------------------------------------------------+----------------+\n</code></pre>\n<p>现在需要一个新的 ByteBuf，内容来自于刚才的 buf1 和 buf2，如何实现？</p>\n<p>方法1：</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-type\">ByteBuf</span> <span class=\"hljs-variable\">buf3</span> <span class=\"hljs-operator\">=</span> ByteBufAllocator.DEFAULT\n    .buffer(buf1.readableBytes()+buf2.readableBytes());\nbuf3.writeBytes(buf1);\nbuf3.writeBytes(buf2);\nSystem.out.println(ByteBufUtil.prettyHexDump(buf3));\n</code></div></pre>\n<p>结果</p>\n<pre><code class=\"lang-\">         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 01 02 03 04 05 06 07 08 09 0a                   |..........      |\n+--------+-------------------------------------------------+----------------+\n</code></pre>\n<p>这种方法好不好？回答是不太好，因为进行了数据的内存复制操作</p>\n<p>方法2：</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-type\">CompositeByteBuf</span> <span class=\"hljs-variable\">buf3</span> <span class=\"hljs-operator\">=</span> ByteBufAllocator.DEFAULT.compositeBuffer();\n<span class=\"hljs-comment\">// true 表示增加新的 ByteBuf 自动递增 write index, 否则 write index 会始终为 0</span>\nbuf3.addComponents(<span class=\"hljs-literal\">true</span>, buf1, buf2);\n</code></div></pre>\n<p>结果是一样的</p>\n<pre><code class=\"lang-\">         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 01 02 03 04 05 06 07 08 09 0a                   |..........      |\n+--------+-------------------------------------------------+----------------+\n</code></pre>\n<p>CompositeByteBuf 是一个组合的 ByteBuf，它内部维护了一个 Component 数组，每个 Component 管理一个 ByteBuf，记录了这个 ByteBuf 相对于整体偏移量等信息，代表着整体中某一段的数据。</p>\n<ul>\n<li>优点，对外是一个虚拟视图，组合这些 ByteBuf 不会产生内存复制</li>\n<li>缺点，复杂了很多，多次操作会带来性能的损耗</li>\n</ul>\n<h4><a id=\"13Unpooled_1598\"></a>13）Unpooled</h4>\n<p>Unpooled 是一个工具类，类如其名，提供了非池化的 ByteBuf 创建、组合、复制等操作</p>\n<p>这里仅介绍其跟【零拷贝】相关的 wrappedBuffer 方法，可以用来包装 ByteBuf</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-type\">ByteBuf</span> <span class=\"hljs-variable\">buf1</span> <span class=\"hljs-operator\">=</span> ByteBufAllocator.DEFAULT.buffer(<span class=\"hljs-number\">5</span>);\nbuf1.writeBytes(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">byte</span>[]{<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>});\n<span class=\"hljs-type\">ByteBuf</span> <span class=\"hljs-variable\">buf2</span> <span class=\"hljs-operator\">=</span> ByteBufAllocator.DEFAULT.buffer(<span class=\"hljs-number\">5</span>);\nbuf2.writeBytes(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">byte</span>[]{<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">10</span>});\n\n<span class=\"hljs-comment\">// 当包装 ByteBuf 个数超过一个时, 底层使用了 CompositeByteBuf</span>\n<span class=\"hljs-type\">ByteBuf</span> <span class=\"hljs-variable\">buf3</span> <span class=\"hljs-operator\">=</span> Unpooled.wrappedBuffer(buf1, buf2);\nSystem.out.println(ByteBufUtil.prettyHexDump(buf3));\n</code></div></pre>\n<p>输出</p>\n<pre><code class=\"lang-\">         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 01 02 03 04 05 06 07 08 09 0a                   |..........      |\n+--------+-------------------------------------------------+----------------+\n</code></pre>\n<p>也可以用来包装普通字节数组，底层也不会有拷贝操作</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-type\">ByteBuf</span> <span class=\"hljs-variable\">buf4</span> <span class=\"hljs-operator\">=</span> Unpooled.wrappedBuffer(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">byte</span>[]{<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>}, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">byte</span>[]{<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>});\nSystem.out.println(buf4.getClass());\nSystem.out.println(ByteBufUtil.prettyHexDump(buf4));\n</code></div></pre>\n<p>输出</p>\n<pre><code class=\"lang-\">class io.netty.buffer.CompositeByteBuf\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 01 02 03 04 05 06                               |......          |\n+--------+-------------------------------------------------+----------------+\n</code></pre>\n<h4><a id=\"_ByteBuf__1646\"></a>💡 ByteBuf 优势</h4>\n<ul>\n<li>池化 - 可以重用池中 ByteBuf 实例，更节约内存，减少内存溢出的可能</li>\n<li>读写指针分离，不需要像 ByteBuffer 一样切换读写模式</li>\n<li>可以自动扩容</li>\n<li>支持链式调用，使用更流畅</li>\n<li>很多地方体现零拷贝，例如 slice、duplicate、CompositeByteBuf</li>\n</ul>\n<h2><a id=\"4__1656\"></a>4. 双向通信</h2>\n<h3><a id=\"41__1658\"></a>4.1 练习</h3>\n<p>实现一个 echo server</p>\n<p>编写 server</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ServerBootstrap</span>()\n    .group(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NioEventLoopGroup</span>())\n    .channel(NioServerSocketChannel.class)\n    .childHandler(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelInitializer</span>&lt;NioSocketChannel&gt;() {\n        <span class=\"hljs-meta\">@Override</span>\n        <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">initChannel</span><span class=\"hljs-params\">(NioSocketChannel ch)</span> {\n            ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelInboundHandlerAdapter</span>(){\n                <span class=\"hljs-meta\">@Override</span>\n                <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">channelRead</span><span class=\"hljs-params\">(ChannelHandlerContext ctx, Object msg)</span> {\n                    <span class=\"hljs-type\">ByteBuf</span> <span class=\"hljs-variable\">buffer</span> <span class=\"hljs-operator\">=</span> (ByteBuf) msg;\n                    System.out.println(buffer.toString(Charset.defaultCharset()));\n\n                    <span class=\"hljs-comment\">// 建议使用 ctx.alloc() 创建 ByteBuf</span>\n                    <span class=\"hljs-type\">ByteBuf</span> <span class=\"hljs-variable\">response</span> <span class=\"hljs-operator\">=</span> ctx.alloc().buffer();\n                    response.writeBytes(buffer);\n                    ctx.writeAndFlush(response);\n\n                    <span class=\"hljs-comment\">// 思考：需要释放 buffer 吗</span>\n                    <span class=\"hljs-comment\">// 思考：需要释放 response 吗</span>\n                }\n            });\n        }\n    }).bind(<span class=\"hljs-number\">8080</span>);\n</code></div></pre>\n<p>编写 client</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-type\">NioEventLoopGroup</span> <span class=\"hljs-variable\">group</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NioEventLoopGroup</span>();\n<span class=\"hljs-type\">Channel</span> <span class=\"hljs-variable\">channel</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Bootstrap</span>()\n    .group(group)\n    .channel(NioSocketChannel.class)\n    .handler(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelInitializer</span>&lt;NioSocketChannel&gt;() {\n        <span class=\"hljs-meta\">@Override</span>\n        <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">initChannel</span><span class=\"hljs-params\">(NioSocketChannel ch)</span> <span class=\"hljs-keyword\">throws</span> Exception {\n            ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringEncoder</span>());\n            ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelInboundHandlerAdapter</span>() {\n                <span class=\"hljs-meta\">@Override</span>\n                <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">channelRead</span><span class=\"hljs-params\">(ChannelHandlerContext ctx, Object msg)</span> {\n                    <span class=\"hljs-type\">ByteBuf</span> <span class=\"hljs-variable\">buffer</span> <span class=\"hljs-operator\">=</span> (ByteBuf) msg;\n                    System.out.println(buffer.toString(Charset.defaultCharset()));\n\n                    <span class=\"hljs-comment\">// 思考：需要释放 buffer 吗</span>\n                }\n            });\n        }\n    }).connect(<span class=\"hljs-string\">&quot;127.0.0.1&quot;</span>, <span class=\"hljs-number\">8080</span>).sync().channel();\n\nchannel.closeFuture().addListener(future -&gt; {\n    group.shutdownGracefully();\n});\n\n<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Thread</span>(() -&gt; {\n    <span class=\"hljs-type\">Scanner</span> <span class=\"hljs-variable\">scanner</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Scanner</span>(System.in);\n    <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) {\n        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">line</span> <span class=\"hljs-operator\">=</span> scanner.nextLine();\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-string\">&quot;q&quot;</span>.equals(line)) {\n            channel.close();\n            <span class=\"hljs-keyword\">break</span>;\n        }\n        channel.writeAndFlush(line);\n    }\n}).start();\n</code></div></pre>\n<h3><a id=\"__1732\"></a>💡 读和写的误解</h3>\n<p>我最初在认识上有这样的误区，认为只有在 netty，nio 这样的多路复用 IO 模型时，读写才不会相互阻塞，才可以实现高效的双向通信，但实际上，Java Socket 是全双工的：在任意时刻，线路上存在<code>A 到 B</code> 和 <code>B 到 A</code> 的双向信号传输。即使是阻塞 IO，读和写是可以同时进行的，只要分别采用读线程和写线程即可，读不会阻塞写、写也不会阻塞读</p>\n<p>例如</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TestServer</span> {\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> IOException {\n        <span class=\"hljs-type\">ServerSocket</span> <span class=\"hljs-variable\">ss</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ServerSocket</span>(<span class=\"hljs-number\">8888</span>);\n        <span class=\"hljs-type\">Socket</span> <span class=\"hljs-variable\">s</span> <span class=\"hljs-operator\">=</span> ss.accept();\n\n        <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Thread</span>(() -&gt; {\n            <span class=\"hljs-keyword\">try</span> {\n                <span class=\"hljs-type\">BufferedReader</span> <span class=\"hljs-variable\">reader</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BufferedReader</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">InputStreamReader</span>(s.getInputStream()));\n                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) {\n                    System.out.println(reader.readLine());\n                }\n            } <span class=\"hljs-keyword\">catch</span> (IOException e) {\n                e.printStackTrace();\n            }\n        }).start();\n\n        <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Thread</span>(() -&gt; {\n            <span class=\"hljs-keyword\">try</span> {\n                <span class=\"hljs-type\">BufferedWriter</span> <span class=\"hljs-variable\">writer</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BufferedWriter</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">OutputStreamWriter</span>(s.getOutputStream()));\n                <span class=\"hljs-comment\">// 例如在这个位置加入 thread 级别断点，可以发现即使不写入数据，也不妨碍前面线程读取客户端数据</span>\n                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">100</span>; i++) {\n                    writer.write(String.valueOf(i));\n                    writer.newLine();\n                    writer.flush();\n                }\n            } <span class=\"hljs-keyword\">catch</span> (IOException e) {\n                e.printStackTrace();\n            }\n        }).start();\n    }\n}\n</code></div></pre>\n<p>客户端</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TestClient</span> {\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> IOException {\n        <span class=\"hljs-type\">Socket</span> <span class=\"hljs-variable\">s</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Socket</span>(<span class=\"hljs-string\">&quot;localhost&quot;</span>, <span class=\"hljs-number\">8888</span>);\n\n        <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Thread</span>(() -&gt; {\n            <span class=\"hljs-keyword\">try</span> {\n                <span class=\"hljs-type\">BufferedReader</span> <span class=\"hljs-variable\">reader</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BufferedReader</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">InputStreamReader</span>(s.getInputStream()));\n                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) {\n                    System.out.println(reader.readLine());\n                }\n            } <span class=\"hljs-keyword\">catch</span> (IOException e) {\n                e.printStackTrace();\n            }\n        }).start();\n\n        <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Thread</span>(() -&gt; {\n            <span class=\"hljs-keyword\">try</span> {\n                <span class=\"hljs-type\">BufferedWriter</span> <span class=\"hljs-variable\">writer</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BufferedWriter</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">OutputStreamWriter</span>(s.getOutputStream()));\n                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">100</span>; i++) {\n                    writer.write(String.valueOf(i));\n                    writer.newLine();\n                    writer.flush();\n                }\n            } <span class=\"hljs-keyword\">catch</span> (IOException e) {\n                e.printStackTrace();\n            }\n        }).start();\n    }\n}\n</code></div></pre>\n');
INSERT INTO `article_content` VALUES ('57f718d5122663a93110cf52264e929b', '### 背景\n公司项目数据量比较大，部分表拥有千万数据量，但是项目里面导出功能陈旧，使用的是传统的POI导出，限制了单次导出数量为6W条，每次用户需要分批次导出。既然有需求那我就尝试能否解决吧。\n\n\n### 未抽取模板版本\n\n这段并未抽取成通用模板，泛用性不强，仅测试在指定类型不需要转换下可节省多少时间。\n```java\npublic void export(HttpServletRequest request, HttpServletResponse response, JSONObject params) {\n        long start = System.currentTimeMillis();\n        OutputStream outputStream = null;\n        try {\n            outputStream = response.getOutputStream();\n            ExcelWriter writer = new ExcelWriter(outputStream, ExcelTypeEnum.XLSX);\n            String fileName = new String((\"excel100w\").getBytes(), \"UTF-8\");\n            //title\n            WriteTable writeTable = new WriteTable();\n            List<List<String>> titles = new ArrayList<>();\n            titles.add(Arrays.asList(\"id\"));\n            titles.add(Arrays.asList(\"姓名\"));\n            writeTable.setHead(titles);\n            //记录总数:实际中需要根据查询条件进行统计即可\n            Integer totalCount = baseMapper.selectCount(null);\n            //每一个Sheet存放100w条数据\n            Integer sheetDataRows = 1000000;\n            //每次写入的数据量20w\n            int writeDataRows = 200000;\n            //计算需要的Sheet数量\n            int sheetNum = totalCount % sheetDataRows == 0 ? (totalCount / sheetDataRows) : (totalCount / sheetDataRows + 1);\n            //计算一般情况下每一个Sheet需要写入的次数(一般情况不包含最后一个sheet,因为最后一个sheet不确定会写入多少条数据)\n            int oneSheetWriteCount = sheetDataRows / writeDataRows;\n            //计算最后一个sheet需要写入的次数\n            int lastSheetWriteCount = totalCount % sheetDataRows == 0 ? oneSheetWriteCount : (totalCount % sheetDataRows % writeDataRows == 0 ? (totalCount % sheetDataRows / writeDataRows) : (totalCount % sheetDataRows / writeDataRows + 1));\n\n            //开始分批查询分次写入\n            //注意这次的循环就需要进行嵌套循环了,外层循环是Sheet数目,内层循环是写入次数\n            List<List<String>> dataList = new ArrayList<>();\n            for (int i = 0; i < sheetNum; i++) {\n                //创建Sheet\n                WriteSheet writeSheet = new WriteSheet();\n                writeSheet.setSheetName(\"页数\"+i);\n                //循环写入次数: j的自增条件是当不是最后一个Sheet的时候写入次数为正常的每个Sheet写入的次数,如果是最后一个就需要使用计算的次数lastSheetWriteCount\n                for (int j = 0; j < (i != sheetNum - 1 ? oneSheetWriteCount : lastSheetWriteCount); j++) {\n                    //集合复用,便于GC清理\n                    dataList.clear();\n                    //分页查询一次20w\n                    List<CheckTeenage> resultList = baseMapper.selectPage(new Page<>(j + 1 + oneSheetWriteCount * i, writeDataRows), null).getRecords();\n                    if (!CollectionUtils.isEmpty(resultList)) {\n                        resultList.forEach(item -> {\n                            dataList.add(Arrays.asList(item.getId(),item.getName()));\n                        });\n                    }\n                    //写数据\n                    writer.write(dataList, writeSheet, writeTable);\n                }\n            }\n            // 下载EXCEL\n            response.setHeader(\"Content-Disposition\", \"attachment;filename=\" + new String((fileName).getBytes(\"gb2312\"), \"ISO-8859-1\") + \".xlsx\");\n            response.setContentType(\"multipart/form-data\");\n            response.setCharacterEncoding(\"utf-8\");\n            writer.finish();\n            outputStream.flush();\n            long end = System.currentTimeMillis();\n            System.out.println(String.format(\"导出条数:\"+totalCount+\"用时：%d ms\", end - start));\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            if (outputStream != null) {\n                try {\n                    outputStream.close();\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n    }\n```\n\n最终执行结果：\n::: hljs-center\n\n![image.png](https://vue-vblog.oss-cn-shenzhen.aliyuncs.com/article/2022/10/31/2fc01ee15bfd4675bac84e6af65195fd.png)\n\n\n:::\n\n通过结果可看出250W数据用时50秒，测试使用Mybatis进行的数据库查询，可以通过直接使用JDBC连接进行查询优化查询速度。\n\n注意：==每台运行的电脑配置不同会影响最终用时==\n\n### 抽取成模板工具类\n```java\npublic class EasyExcelUtil {\n\n    private static final int SHEET_DATA_ROWS = 1000000;\n\n    private static final int WRITE_DATA_ROWS = 200000;\n\n    private BaseMapper mapper;\n\n    public EasyExcelUtil(BaseMapper mapper) {\n        //通过传入需要导出的Mapper来调用方法\n        this.mapper = mapper;\n    }\n    \n    /**\n     * \n     * @param fileName 导出文件名\n     * @param response \n     * @param titles 表头名称\n     * @param wrapper 查询条件\n     * @param totalCount 总条数\n     * @param <T>\n     */\n    public <T> void export(String fileName, HttpServletResponse response, List<List<String>> titles, QueryWrapper<T> wrapper,Integer totalCount){\n        long start = System.currentTimeMillis();\n        OutputStream outputStream = null;\n        try {\n            outputStream = response.getOutputStream();\n            WriteWorkbook workbook = new WriteWorkbook();\n            workbook.setOutputStream(outputStream);\n            workbook.setExcelType(ExcelTypeEnum.XLSX);\n            ExcelWriter writer = new ExcelWriter(workbook);\n            WriteTable writeTable = new WriteTable();\n            writeTable.setHead(titles);\n            //每一个Sheet存放100w条数据\n            Integer sheetDataRows = SHEET_DATA_ROWS;\n            //每次写入的数据量20w\n            int writeDataRows = WRITE_DATA_ROWS;\n            //计算需要的Sheet数量\n            int sheetNum = totalCount % sheetDataRows == 0 ? (totalCount / sheetDataRows) : (totalCount / sheetDataRows + 1);\n            //计算一般情况下每一个Sheet需要写入的次数(一般情况不包含最后一个sheet,因为最后一个sheet不确定会写入多少条数据)\n            int oneSheetWriteCount = sheetDataRows / writeDataRows;\n            //计算最后一个sheet需要写入的次数\n            int lastSheetWriteCount = totalCount % sheetDataRows == 0 ? oneSheetWriteCount : (totalCount % sheetDataRows % writeDataRows == 0 ? (totalCount % sheetDataRows / writeDataRows) : (totalCount % sheetDataRows / writeDataRows + 1));\n\n            //开始分批查询分次写入\n            //注意这次的循环就需要进行嵌套循环了,外层循环是Sheet数目,内层循环是写入次数\n            List dataList = new ArrayList<>(writeDataRows);\n            for (int i = 0; i < sheetNum; i++) {\n                //创建Sheet\n                WriteSheet writeSheet = new WriteSheet();\n                writeSheet.setSheetName(\"页数\"+i);\n                //循环写入次数: j的自增条件是当不是最后一个Sheet的时候写入次数为正常的每个Sheet写入的次数,如果是最后一个就需要使用计算的次数lastSheetWriteCount\n                for (int j = 0; j < (i != sheetNum - 1 ? oneSheetWriteCount : lastSheetWriteCount); j++) {\n                    //集合复用,便于GC清理\n                    dataList.clear();\n                    //分页查询一次20w\n                    dataList = mapper.selectPage(new Page<>(j + 1 + oneSheetWriteCount * i, writeDataRows), wrapper).getRecords();\n                    //写数据\n                    writer.write(dataList, writeSheet, writeTable);\n                }\n            }\n            // 下载EXCEL\n            response.setHeader(\"Content-Disposition\", \"attachment;filename=\" + new String((fileName).getBytes(\"gb2312\"), \"ISO-8859-1\") + \".xlsx\");\n            response.setContentType(\"multipart/form-data\");\n            response.setCharacterEncoding(\"utf-8\");\n            writer.finish();\n            outputStream.flush();\n            long end = System.currentTimeMillis();\n            System.out.println(String.format(\"导出条数:\"+totalCount+\"用时：%d ms\", end - start));\n        } catch (IOException e){\n            e.printStackTrace();\n        } finally {\n            if (outputStream != null) {\n                try {\n                    outputStream.close();\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n    }\n\n}\n```\n\n使用：\n```java\npublic void export(HttpServletRequest request, HttpServletResponse response, JSONObject params) {\n        Date startTime = params.getDate(\"startTime\");\n        Date endTime = params.getDate(\"endTime\");\n        String fileName = params.getString(\"fileName\");\n\n        //表头定义\n        List<List<String>> titles = new ArrayList<>();\n        titles.add(Collections.singletonList(\"id\"));\n        titles.add(Collections.singletonList(\"姓名\"));\n        //查询条件\n        QueryWrapper<CheckTeenage> wrapper = new QueryWrapper<>();\n        if (null != startTime && null != endTime) {\n            wrapper.between(\"create_time\",startTime,endTime);\n        }\n        //总条数\n        Integer count = baseMapper.selectCount(wrapper);\n        //查询字段\n        wrapper.select(\"id\",\"name\");\n        //查询\n        new EasyExcelUtil(baseMapper).export(fileName,response,titles,wrapper,count);\n    }\n```\n运行结果：\n::: hljs-center\n\n![image.png](https://vue-vblog.oss-cn-shenzhen.aliyuncs.com/article/2022/10/31/b94f713088c449559b4cc9c49a79bb2a.png)\n\n:::\n\n模板因类型转换原因比指定慢，后续会优化。', '2022-10-31 15:17:57', '2022-10-31 15:17:57', '<h3><a id=\"_0\"></a>背景</h3>\n<p>公司项目数据量比较大，部分表拥有千万数据量，但是项目里面导出功能陈旧，使用的是传统的POI导出，限制了单次导出数量为6W条，每次用户需要分批次导出。既然有需求那我就尝试能否解决吧。</p>\n<h3><a id=\"_4\"></a>未抽取模板版本</h3>\n<p>这段并未抽取成通用模板，泛用性不强，仅测试在指定类型不需要转换下可节省多少时间。</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">export</span><span class=\"hljs-params\">(HttpServletRequest request, HttpServletResponse response, JSONObject params)</span> {\n        <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">start</span> <span class=\"hljs-operator\">=</span> System.currentTimeMillis();\n        <span class=\"hljs-type\">OutputStream</span> <span class=\"hljs-variable\">outputStream</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;\n        <span class=\"hljs-keyword\">try</span> {\n            outputStream = response.getOutputStream();\n            <span class=\"hljs-type\">ExcelWriter</span> <span class=\"hljs-variable\">writer</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ExcelWriter</span>(outputStream, ExcelTypeEnum.XLSX);\n            <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">fileName</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">String</span>((<span class=\"hljs-string\">&quot;excel100w&quot;</span>).getBytes(), <span class=\"hljs-string\">&quot;UTF-8&quot;</span>);\n            <span class=\"hljs-comment\">//title</span>\n            <span class=\"hljs-type\">WriteTable</span> <span class=\"hljs-variable\">writeTable</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">WriteTable</span>();\n            List&lt;List&lt;String&gt;&gt; titles = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();\n            titles.add(Arrays.asList(<span class=\"hljs-string\">&quot;id&quot;</span>));\n            titles.add(Arrays.asList(<span class=\"hljs-string\">&quot;姓名&quot;</span>));\n            writeTable.setHead(titles);\n            <span class=\"hljs-comment\">//记录总数:实际中需要根据查询条件进行统计即可</span>\n            <span class=\"hljs-type\">Integer</span> <span class=\"hljs-variable\">totalCount</span> <span class=\"hljs-operator\">=</span> baseMapper.selectCount(<span class=\"hljs-literal\">null</span>);\n            <span class=\"hljs-comment\">//每一个Sheet存放100w条数据</span>\n            <span class=\"hljs-type\">Integer</span> <span class=\"hljs-variable\">sheetDataRows</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1000000</span>;\n            <span class=\"hljs-comment\">//每次写入的数据量20w</span>\n            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">writeDataRows</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">200000</span>;\n            <span class=\"hljs-comment\">//计算需要的Sheet数量</span>\n            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">sheetNum</span> <span class=\"hljs-operator\">=</span> totalCount % sheetDataRows == <span class=\"hljs-number\">0</span> ? (totalCount / sheetDataRows) : (totalCount / sheetDataRows + <span class=\"hljs-number\">1</span>);\n            <span class=\"hljs-comment\">//计算一般情况下每一个Sheet需要写入的次数(一般情况不包含最后一个sheet,因为最后一个sheet不确定会写入多少条数据)</span>\n            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">oneSheetWriteCount</span> <span class=\"hljs-operator\">=</span> sheetDataRows / writeDataRows;\n            <span class=\"hljs-comment\">//计算最后一个sheet需要写入的次数</span>\n            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">lastSheetWriteCount</span> <span class=\"hljs-operator\">=</span> totalCount % sheetDataRows == <span class=\"hljs-number\">0</span> ? oneSheetWriteCount : (totalCount % sheetDataRows % writeDataRows == <span class=\"hljs-number\">0</span> ? (totalCount % sheetDataRows / writeDataRows) : (totalCount % sheetDataRows / writeDataRows + <span class=\"hljs-number\">1</span>));\n\n            <span class=\"hljs-comment\">//开始分批查询分次写入</span>\n            <span class=\"hljs-comment\">//注意这次的循环就需要进行嵌套循环了,外层循环是Sheet数目,内层循环是写入次数</span>\n            List&lt;List&lt;String&gt;&gt; dataList = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; sheetNum; i++) {\n                <span class=\"hljs-comment\">//创建Sheet</span>\n                <span class=\"hljs-type\">WriteSheet</span> <span class=\"hljs-variable\">writeSheet</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">WriteSheet</span>();\n                writeSheet.setSheetName(<span class=\"hljs-string\">&quot;页数&quot;</span>+i);\n                <span class=\"hljs-comment\">//循环写入次数: j的自增条件是当不是最后一个Sheet的时候写入次数为正常的每个Sheet写入的次数,如果是最后一个就需要使用计算的次数lastSheetWriteCount</span>\n                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; j &lt; (i != sheetNum - <span class=\"hljs-number\">1</span> ? oneSheetWriteCount : lastSheetWriteCount); j++) {\n                    <span class=\"hljs-comment\">//集合复用,便于GC清理</span>\n                    dataList.clear();\n                    <span class=\"hljs-comment\">//分页查询一次20w</span>\n                    List&lt;CheckTeenage&gt; resultList = baseMapper.selectPage(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Page</span>&lt;&gt;(j + <span class=\"hljs-number\">1</span> + oneSheetWriteCount * i, writeDataRows), <span class=\"hljs-literal\">null</span>).getRecords();\n                    <span class=\"hljs-keyword\">if</span> (!CollectionUtils.isEmpty(resultList)) {\n                        resultList.forEach(item -&gt; {\n                            dataList.add(Arrays.asList(item.getId(),item.getName()));\n                        });\n                    }\n                    <span class=\"hljs-comment\">//写数据</span>\n                    writer.write(dataList, writeSheet, writeTable);\n                }\n            }\n            <span class=\"hljs-comment\">// 下载EXCEL</span>\n            response.setHeader(<span class=\"hljs-string\">&quot;Content-Disposition&quot;</span>, <span class=\"hljs-string\">&quot;attachment;filename=&quot;</span> + <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">String</span>((fileName).getBytes(<span class=\"hljs-string\">&quot;gb2312&quot;</span>), <span class=\"hljs-string\">&quot;ISO-8859-1&quot;</span>) + <span class=\"hljs-string\">&quot;.xlsx&quot;</span>);\n            response.setContentType(<span class=\"hljs-string\">&quot;multipart/form-data&quot;</span>);\n            response.setCharacterEncoding(<span class=\"hljs-string\">&quot;utf-8&quot;</span>);\n            writer.finish();\n            outputStream.flush();\n            <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">end</span> <span class=\"hljs-operator\">=</span> System.currentTimeMillis();\n            System.out.println(String.format(<span class=\"hljs-string\">&quot;导出条数:&quot;</span>+totalCount+<span class=\"hljs-string\">&quot;用时：%d ms&quot;</span>, end - start));\n        } <span class=\"hljs-keyword\">catch</span> (FileNotFoundException e) {\n            e.printStackTrace();\n        } <span class=\"hljs-keyword\">catch</span> (IOException e) {\n            e.printStackTrace();\n        } <span class=\"hljs-keyword\">finally</span> {\n            <span class=\"hljs-keyword\">if</span> (outputStream != <span class=\"hljs-literal\">null</span>) {\n                <span class=\"hljs-keyword\">try</span> {\n                    outputStream.close();\n                } <span class=\"hljs-keyword\">catch</span> (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n    }\n</code></div></pre>\n<p>最终执行结果：</p>\n<div class=\"hljs-center\">\n<p><img src=\"https://vue-vblog.oss-cn-shenzhen.aliyuncs.com/article/2022/10/31/2fc01ee15bfd4675bac84e6af65195fd.png\" alt=\"image.png\" /></p>\n</div>\n<p>通过结果可看出250W数据用时50秒，测试使用Mybatis进行的数据库查询，可以通过直接使用JDBC连接进行查询优化查询速度。</p>\n<p>注意：<mark>每台运行的电脑配置不同会影响最终用时</mark></p>\n<h3><a id=\"_92\"></a>抽取成模板工具类</h3>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">EasyExcelUtil</span> {\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">SHEET_DATA_ROWS</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1000000</span>;\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">WRITE_DATA_ROWS</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">200000</span>;\n\n    <span class=\"hljs-keyword\">private</span> BaseMapper mapper;\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">EasyExcelUtil</span><span class=\"hljs-params\">(BaseMapper mapper)</span> {\n        <span class=\"hljs-comment\">//通过传入需要导出的Mapper来调用方法</span>\n        <span class=\"hljs-built_in\">this</span>.mapper = mapper;\n    }\n    \n    <span class=\"hljs-comment\">/**\n     * \n     * <span class=\"hljs-doctag\">@param</span> fileName 导出文件名\n     * <span class=\"hljs-doctag\">@param</span> response \n     * <span class=\"hljs-doctag\">@param</span> titles 表头名称\n     * <span class=\"hljs-doctag\">@param</span> wrapper 查询条件\n     * <span class=\"hljs-doctag\">@param</span> totalCount 总条数\n     * <span class=\"hljs-doctag\">@param</span> &lt;T&gt;\n     */</span>\n    <span class=\"hljs-keyword\">public</span> &lt;T&gt; <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">export</span><span class=\"hljs-params\">(String fileName, HttpServletResponse response, List&lt;List&lt;String&gt;&gt; titles, QueryWrapper&lt;T&gt; wrapper,Integer totalCount)</span>{\n        <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">start</span> <span class=\"hljs-operator\">=</span> System.currentTimeMillis();\n        <span class=\"hljs-type\">OutputStream</span> <span class=\"hljs-variable\">outputStream</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;\n        <span class=\"hljs-keyword\">try</span> {\n            outputStream = response.getOutputStream();\n            <span class=\"hljs-type\">WriteWorkbook</span> <span class=\"hljs-variable\">workbook</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">WriteWorkbook</span>();\n            workbook.setOutputStream(outputStream);\n            workbook.setExcelType(ExcelTypeEnum.XLSX);\n            <span class=\"hljs-type\">ExcelWriter</span> <span class=\"hljs-variable\">writer</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ExcelWriter</span>(workbook);\n            <span class=\"hljs-type\">WriteTable</span> <span class=\"hljs-variable\">writeTable</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">WriteTable</span>();\n            writeTable.setHead(titles);\n            <span class=\"hljs-comment\">//每一个Sheet存放100w条数据</span>\n            <span class=\"hljs-type\">Integer</span> <span class=\"hljs-variable\">sheetDataRows</span> <span class=\"hljs-operator\">=</span> SHEET_DATA_ROWS;\n            <span class=\"hljs-comment\">//每次写入的数据量20w</span>\n            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">writeDataRows</span> <span class=\"hljs-operator\">=</span> WRITE_DATA_ROWS;\n            <span class=\"hljs-comment\">//计算需要的Sheet数量</span>\n            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">sheetNum</span> <span class=\"hljs-operator\">=</span> totalCount % sheetDataRows == <span class=\"hljs-number\">0</span> ? (totalCount / sheetDataRows) : (totalCount / sheetDataRows + <span class=\"hljs-number\">1</span>);\n            <span class=\"hljs-comment\">//计算一般情况下每一个Sheet需要写入的次数(一般情况不包含最后一个sheet,因为最后一个sheet不确定会写入多少条数据)</span>\n            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">oneSheetWriteCount</span> <span class=\"hljs-operator\">=</span> sheetDataRows / writeDataRows;\n            <span class=\"hljs-comment\">//计算最后一个sheet需要写入的次数</span>\n            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">lastSheetWriteCount</span> <span class=\"hljs-operator\">=</span> totalCount % sheetDataRows == <span class=\"hljs-number\">0</span> ? oneSheetWriteCount : (totalCount % sheetDataRows % writeDataRows == <span class=\"hljs-number\">0</span> ? (totalCount % sheetDataRows / writeDataRows) : (totalCount % sheetDataRows / writeDataRows + <span class=\"hljs-number\">1</span>));\n\n            <span class=\"hljs-comment\">//开始分批查询分次写入</span>\n            <span class=\"hljs-comment\">//注意这次的循环就需要进行嵌套循环了,外层循环是Sheet数目,内层循环是写入次数</span>\n            <span class=\"hljs-type\">List</span> <span class=\"hljs-variable\">dataList</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;(writeDataRows);\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; sheetNum; i++) {\n                <span class=\"hljs-comment\">//创建Sheet</span>\n                <span class=\"hljs-type\">WriteSheet</span> <span class=\"hljs-variable\">writeSheet</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">WriteSheet</span>();\n                writeSheet.setSheetName(<span class=\"hljs-string\">&quot;页数&quot;</span>+i);\n                <span class=\"hljs-comment\">//循环写入次数: j的自增条件是当不是最后一个Sheet的时候写入次数为正常的每个Sheet写入的次数,如果是最后一个就需要使用计算的次数lastSheetWriteCount</span>\n                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; j &lt; (i != sheetNum - <span class=\"hljs-number\">1</span> ? oneSheetWriteCount : lastSheetWriteCount); j++) {\n                    <span class=\"hljs-comment\">//集合复用,便于GC清理</span>\n                    dataList.clear();\n                    <span class=\"hljs-comment\">//分页查询一次20w</span>\n                    dataList = mapper.selectPage(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Page</span>&lt;&gt;(j + <span class=\"hljs-number\">1</span> + oneSheetWriteCount * i, writeDataRows), wrapper).getRecords();\n                    <span class=\"hljs-comment\">//写数据</span>\n                    writer.write(dataList, writeSheet, writeTable);\n                }\n            }\n            <span class=\"hljs-comment\">// 下载EXCEL</span>\n            response.setHeader(<span class=\"hljs-string\">&quot;Content-Disposition&quot;</span>, <span class=\"hljs-string\">&quot;attachment;filename=&quot;</span> + <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">String</span>((fileName).getBytes(<span class=\"hljs-string\">&quot;gb2312&quot;</span>), <span class=\"hljs-string\">&quot;ISO-8859-1&quot;</span>) + <span class=\"hljs-string\">&quot;.xlsx&quot;</span>);\n            response.setContentType(<span class=\"hljs-string\">&quot;multipart/form-data&quot;</span>);\n            response.setCharacterEncoding(<span class=\"hljs-string\">&quot;utf-8&quot;</span>);\n            writer.finish();\n            outputStream.flush();\n            <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">end</span> <span class=\"hljs-operator\">=</span> System.currentTimeMillis();\n            System.out.println(String.format(<span class=\"hljs-string\">&quot;导出条数:&quot;</span>+totalCount+<span class=\"hljs-string\">&quot;用时：%d ms&quot;</span>, end - start));\n        } <span class=\"hljs-keyword\">catch</span> (IOException e){\n            e.printStackTrace();\n        } <span class=\"hljs-keyword\">finally</span> {\n            <span class=\"hljs-keyword\">if</span> (outputStream != <span class=\"hljs-literal\">null</span>) {\n                <span class=\"hljs-keyword\">try</span> {\n                    outputStream.close();\n                } <span class=\"hljs-keyword\">catch</span> (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n    }\n\n}\n</code></div></pre>\n<p>使用：</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">export</span><span class=\"hljs-params\">(HttpServletRequest request, HttpServletResponse response, JSONObject params)</span> {\n        <span class=\"hljs-type\">Date</span> <span class=\"hljs-variable\">startTime</span> <span class=\"hljs-operator\">=</span> params.getDate(<span class=\"hljs-string\">&quot;startTime&quot;</span>);\n        <span class=\"hljs-type\">Date</span> <span class=\"hljs-variable\">endTime</span> <span class=\"hljs-operator\">=</span> params.getDate(<span class=\"hljs-string\">&quot;endTime&quot;</span>);\n        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">fileName</span> <span class=\"hljs-operator\">=</span> params.getString(<span class=\"hljs-string\">&quot;fileName&quot;</span>);\n\n        <span class=\"hljs-comment\">//表头定义</span>\n        List&lt;List&lt;String&gt;&gt; titles = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();\n        titles.add(Collections.singletonList(<span class=\"hljs-string\">&quot;id&quot;</span>));\n        titles.add(Collections.singletonList(<span class=\"hljs-string\">&quot;姓名&quot;</span>));\n        <span class=\"hljs-comment\">//查询条件</span>\n        QueryWrapper&lt;CheckTeenage&gt; wrapper = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">QueryWrapper</span>&lt;&gt;();\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">null</span> != startTime &amp;&amp; <span class=\"hljs-literal\">null</span> != endTime) {\n            wrapper.between(<span class=\"hljs-string\">&quot;create_time&quot;</span>,startTime,endTime);\n        }\n        <span class=\"hljs-comment\">//总条数</span>\n        <span class=\"hljs-type\">Integer</span> <span class=\"hljs-variable\">count</span> <span class=\"hljs-operator\">=</span> baseMapper.selectCount(wrapper);\n        <span class=\"hljs-comment\">//查询字段</span>\n        wrapper.select(<span class=\"hljs-string\">&quot;id&quot;</span>,<span class=\"hljs-string\">&quot;name&quot;</span>);\n        <span class=\"hljs-comment\">//查询</span>\n        <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">EasyExcelUtil</span>(baseMapper).export(fileName,response,titles,wrapper,count);\n    }\n</code></div></pre>\n<p>运行结果：</p>\n<div class=\"hljs-center\">\n<p><img src=\"https://vue-vblog.oss-cn-shenzhen.aliyuncs.com/article/2022/10/31/b94f713088c449559b4cc9c49a79bb2a.png\" alt=\"image.png\" /></p>\n</div>\n<p>模板因类型转换原因比指定慢，后续会优化。</p>\n');
INSERT INTO `article_content` VALUES ('5dc9ccb15fe3224878945a842f7f6427', '1. SocketChannel 就是 NIO 对于非阻塞 socket 操作的支持的组件，其在 socket 上 封装了一层，主要是支持了非阻塞的读写。同时改进了传统的单向流 API,，Channel 同时支持读写。\n2. socket 通道类主要分为 DatagramChannel、SocketChannel 和 ServerSocketChannel，它们在被实例化时都会创建一个对等 socket 对象。要把一个 socket 通道置于非阻塞模式，我们要依靠所有 socket 通道类的公有超级类： SelectableChannel。就绪选择（readiness selection）是一种可以用来查询通道的 机制，该查询可以判断通道是否准备好执行一个目标操作，如读或写。非阻塞 I/O 和 可选择性是紧密相连的，那也正是管理阻塞模式的 API 代码要在 SelectableChannel 超级类中定义的原因。\n3. 设置或重新设置一个通道的阻塞模式是很简单的，只要调用 configureBlocking( )方法即可，传递参数值为 true 则设为阻塞模式，参数值为 false 值设为非阻塞模式。可以通过调用 isBlocking( )方法来判断某个 socket 通道当前处于 哪种模式。\n\n\nAbstractSelectableChannel.java 中实现的 configureBlocking()方法如下：\n::: hljs-center\n\n![image.png](https://vue-vblog.oss-cn-shenzhen.aliyuncs.com/article/2022/09/30/13ce8ae8652a4cafa8312081c19f7adc.png)\n\n:::\n\n下面分别介绍这 3 个通道\n\n### 1 ServerSocketChannel\nServerSocketChannel 是一个基于通道的 socket 监听器。它同我们所熟悉的 java.net.ServerSocket 执行相同的任务，不过它增加了通道语义，因此能够在非阻塞 模式下运行。\n\n由于 ServerSocketChannel 没有 bind()方法，因此有必要取出对等的 socket 并使用 它来绑定到一个端口以开始监听连接。我们也是使用对等 ServerSocket 的 API 来根 据需要设置其他的 socket 选项。\n\n同 java.net.ServerSocket 一样，ServerSocketChannel 也有 accept( )方法。 ServerSocketChannel 的 accept()方法会返回 SocketChannel 类型对象， SocketChannel 可以在非阻塞模式下运行。\n\n以下代码演示了如何使用一个非阻塞的 accept( )方法：\n```java\npublic class ServerSocketChannelDemo {\n    public static void main(String[] args) throws Exception {\n        //端口号\n        int port = 9999;\n        //buffer\n        ByteBuffer buffer = ByteBuffer.wrap(\"hello word\".getBytes(StandardCharsets.UTF_8));\n\n        //ServerSocketChannel\n        ServerSocketChannel ssc = ServerSocketChannel.open();\n        //绑定\n        ssc.socket().bind(new InetSocketAddress(port));\n        //设置非阻塞模式\n        ssc.configureBlocking(false);\n\n        //监听是否有新链接传入\n        while (true){\n            System.out.println(\"Waiting for connections\");\n            SocketChannel sc = ssc.accept();\n            if(sc == null){\n                //没有链接传入\n                System.out.println(\"null\");\n                Thread.sleep(2000);\n            }else {\n                System.out.println(\"Incoming connection from:\"+sc.socket().getRemoteSocketAddress());\n                buffer.rewind(); //指针0\n                sc.write(buffer);\n                sc.close();\n            }\n        }\n    }\n}\n```\n::: hljs-center\n\n![image.png](https://vue-vblog.oss-cn-shenzhen.aliyuncs.com/article/2022/10/08/57a63832c66f45c5bbff395c36d92be7.png)\n\n:::\n\n- 打开 ServerSocketChannel\n通过调用 ServerSocketChannel.open() 方法来打开 ServerSocketChannel.\n```java\nServerSocketChannel serverSocketChannel = ServerSocketChannel.open();\n```\n- 关闭 ServerSocketChannel\n通过调用 ServerSocketChannel.close() 方法来关闭 ServerSocketChannel.\n```java\nserverSocketChannel.close();\n```\n\n\n- 监听新的连接\n通过 ServerSocketChannel.accept() 方法监听新进的连接。当 accept()方法返回时 候,它返回一个包含新进来的连接的 SocketChannel。因此, accept()方法会一直阻塞 到有新连接到达。\n通常不会仅仅只监听一个连接,在 while 循环中调用 accept()方法. 如下面的例子：\n::: hljs-center\n\n![image.png](https://vue-vblog.oss-cn-shenzhen.aliyuncs.com/article/2022/10/08/3e5b7a01f90e49efa8f1f6ad814858cd.png)\n\n:::\n\n- 阻塞模式\n会在 SocketChannel sc = ssc.accept();这里阻塞住进程。\n\n::: hljs-center\n\n![image.png](https://vue-vblog.oss-cn-shenzhen.aliyuncs.com/article/2022/10/08/3b10263a28184fa199557f6f2aeaa674.png)\n\n:::\n\n\n- 非阻塞模式\nServerSocketChannel 可以设置成非阻塞模式。在非阻塞模式下，accept() 方法会立 刻返回，如果还没有新进来的连接,返回的将是 null。 因此，需要检查返回的 SocketChannel 是否是 null.如：\n::: hljs-center\n\n![image.png](https://vue-vblog.oss-cn-shenzhen.aliyuncs.com/article/2022/10/08/07e22f9e39af427b817c698bdc089c43.png)\n\n:::\n\n### 2 SocketChannel\n#### 2.1 SocketChannel 介绍\nJava NIO 中的 SocketChannel 是一个连接到 TCP 网络套接字的通道。\n> A selectable channel for stream-oriented connecting sockets.\n\n以上是 Java docs 中对于 SocketChannel 的描述：SocketChannel 是一种面向流连接 sockets 套接字的可选择通道。从这里可以看出：\n-  SocketChannel 是用来连接 Socket 套接字\n- SocketChannel 主要用途用来处理网络 I/O 的通道\n- SocketChannel 是基于 TCP 连接传输\n- SocketChannel 实现了可选择通道，可以被多路复用的\n\n#### 2.2 SocketChannel 特征\n- 对于已经存在的 socket 不能创建 SocketChannel\n- SocketChannel 中提供的 open 接口创建的 Channel 并没有进行网络级联，需要使 用 connect 接口连接到指定地址\n- 未进行连接的 SocketChannle 执行 I/O 操作时，会抛出 NotYetConnectedException\n- SocketChannel 支持两种 I/O 模式：阻塞式和非阻塞式\n- SocketChannel 支持异步关闭。如果 SocketChannel 在一个线程上 read 阻塞，另 一个线程对该 SocketChannel 调用 shutdownInput，则读阻塞的线程将返回-1 表示没有 读取任何数据；如果 SocketChannel 在一个线程上 write 阻塞，另一个线程对该 SocketChannel 调用 shutdownWrite，则写阻塞的线程将抛出 AsynchronousCloseException\n- SocketChannel 支持设定参数 SO_SNDBUF 套接字发送缓冲区大小, SO_RCVBUF 套接字接收缓冲区大小, SO_KEEPALIVE 保活连接 O_REUSEADDR 复用地址, SO_LINGER 有数据传输时延缓关闭 Channel (只有在非阻塞模式下有用), TCP_NODELAY 禁用 Nagle 算法\n\n#### 2.3 SocketChannel 的使用\n- 创建 SocketChannel\n\n\n第一种：\n```java\nSocketChannel socketChannel = SocketChannel.open(new InetSocketAddress(\"www.baidu.com\", 80));\n```\n第二种：\n```java\nSocketChannel socketChanne2 = SocketChannel.open(); \nsocketChanne2.connect(new InetSocketAddress(\"www.baidu.com\", 80));\n```\n直接使用有参 open api 或者使用无参 open api，但是在无参 open 只是创建了一个 SocketChannel 对象，并没有进行实质的 tcp 连接。\n- 连接校验\n```java\nsocketChannel.isOpen(); // 测试 SocketChannel 是否为 open 状态 \nsocketChannel.isConnected(); //测试 SocketChannel 是否已经被连接 \nsocketChannel.isConnectionPending(); //测试 SocketChannel 是否正在进行 连接\nsocketChannel.finishConnect(); //校验正在进行套接字连接的 SocketChannel 是否已经完成连接\n```\n- 读写模式\n前面提到 SocketChannel 支持阻塞和非阻塞两种模式：\n```java\nsocketChannel.configureBlocking(false);\n```\n通过以上方法设置 SocketChannel 的读写模式。false 表示非阻塞，true 表示阻塞。\n- 读写\n```java\nSocketChannel socketChannel = SocketChannel.open( new InetSocketAddress(\"www.baidu.com\", 80)); \nByteBuffer byteBuffer = ByteBuffer.allocate(16); \nsocketChannel.read(byteBuffer); socketChannel.close(); \nSystem.out.println(\"read over\");\n```\n以上为阻塞式读，当执行到 read 出，线程将阻塞，控制台将无法打印 read over\n```java\nSocketChannel socketChannel = SocketChannel.open( new InetSocketAddress(\"www.baidu.com\", 80)); \nsocketChannel.configureBlocking(false); ByteBuffer byteBuffer = ByteBuffer.allocate(16); \nsocketChannel.read(byteBuffer); socketChannel.close();\nSystem.out.println(\"read over\");\n```\n以上为非阻塞读，控制台将打印 read over\n读写都是面向缓冲区，这个读写方式与前文中的 FileChannel 相同。\n- 设置和获取参数\n```java\nsocketChannel.setOption(StandardSocketOptions.SO_KEEPALIVE, Boolean.TRUE)\n.setOption(StandardSocketOptions.TCP_NODELAY, Boolean.TRUE);\n```\n通过 setOptions 方法可以设置 socket 套接字的相关参数\n```java\nsocketChannel.getOption(StandardSocketOptions.SO_KEEPALIVE); \nsocketChannel.getOption(StandardSocketOptions.SO_RCVBUF);\n```\n可以通过 getOption 获取相关参数的值。如默认的接收缓冲区大小是 8192byte。\nSocketChannel 还支持多路复用，但是多路复用在后续内容中会介绍到。\n\n### 3 DatagramChannel\n正如 SocketChannel 对应 Socket，ServerSocketChannel 对应 ServerSocket，每 一个 DatagramChannel 对象也有一个关联的 DatagramSocket 对象。正如 SocketChannel 模拟连接导向的流协议（如 TCP/IP），DatagramChannel 则模拟包 导向的无连接协议（如 UDP/IP）。DatagramChannel 是无连接的，每个数据报 （datagram）都是一个自包含的实体，拥有它自己的目的地址及不依赖其他数据报的 数据负载。与面向流的的 socket 不同，DatagramChannel 可以发送单独的数据报给 不同的目的地址。同样，DatagramChannel 对象也可以接收来自任意地址的数据包。 每个到达的数据报都含有关于它来自何处的信息（源地址）。\n\n#### 3.1 打开 DatagramChannel\n```java\nDatagramChannel server = DatagramChannel.open(); \nserver.socket().bind(new InetSocketAddress(10086));\n```\n此例子是打开 10086 端口接收 UDP 数据包\n\n#### 3.2 接收数据\n通过 receive()接收 UDP 包\n```java\nByteBuffer receiveBuffer = ByteBuffer.allocate(64); \nreceiveBuffer.clear(); \nSocketAddress receiveAddr = server.receive(receiveBuffer);\n```\nSocketAddress 可以获得发包的 ip、端口等信息，用 toString 查看\n\n#### 3.3 发送数据\n通过 send()发送 UDP 包\n```java\nDatagramChannel server = DatagramChannel.open(); \nByteBuffer sendBuffer = ByteBuffer.wrap(\"client send\".getBytes()); \nserver.send(sendBuffer, new InetSocketAddress(\"127.0.0.1\",10086));\n```\n\n#### 3.4 连接\nUDP 不存在真正意义上的连接，这里的连接是向特定服务地址用 read 和 write 接收 发送数据包。\n```java\nclient.connect(new InetSocketAddress(\"127.0.0.1\",10086)); \nint readSize= client.read(sendBuffer); \nserver.write(sendBuffer);\n```\nread()和 write()只有在 connect()后才能使用，不然会抛 NotYetConnectedException 异常。用 read()接收时，如果没有接收到包，会抛 PortUnreachableException 异常。\n\n#### 3.4 DatagramChannel 示例\n客户端发送，服务端接收的例子\n```java\npublic class DatagramChannelDemo {\n\n    //发送实现\n    @Test\n    public void sendDatagram() throws Exception {\n        //打开DatagramChannel\n        DatagramChannel sendChannel = DatagramChannel.open();\n        InetSocketAddress sendAddress = new InetSocketAddress(\"127.0.0.1\", 9999);\n\n        //发送\n        while (true){\n            ByteBuffer buffer = ByteBuffer.wrap(\"发送Jzj\".getBytes(StandardCharsets.UTF_8));\n            sendChannel.send(buffer,sendAddress);\n            System.out.println(\"已经完成发送\");\n            Thread.sleep(1000);\n        }\n    }\n\n\n    //接收实现\n    @Test\n    public void receiveDatagram() throws Exception{\n        //打开DatagramChannel\n        DatagramChannel receiveChannel = DatagramChannel.open();\n        InetSocketAddress receiveAddress = new InetSocketAddress(9999);\n        //绑定\n        receiveChannel.bind(receiveAddress);\n        //Buffer\n        ByteBuffer receiveBuffer = ByteBuffer.allocate(1024);\n        while (true){\n            receiveBuffer.clear();\n            SocketAddress socketAddress = receiveChannel.receive(receiveBuffer);\n            receiveBuffer.flip();\n            System.out.println(socketAddress.toString());\n            System.out.println(Charset.forName(\"UTF-8\").decode(receiveBuffer));\n        }\n    }\n\n    //连接 read 和 write\n    @Test\n    public void testConnect() throws Exception {\n        //打开DatagramChannel\n        DatagramChannel connChannel = DatagramChannel.open();\n        //绑定\n        connChannel.bind(new InetSocketAddress(9999));\n        //连接\n        connChannel.connect(new InetSocketAddress(\"127.0.0.1\",9999));\n        //write方法\n        connChannel.write(ByteBuffer.wrap(\"发送Jzj\".getBytes(StandardCharsets.UTF_8)));\n        //buffer\n        ByteBuffer readBuffer = ByteBuffer.allocate(1024);\n        while (true){\n            readBuffer.clear();\n            connChannel.read(readBuffer);\n            readBuffer.flip();\n            System.out.println(Charset.forName(\"UTF-8\").decode(readBuffer));\n        }\n    }\n}\n```\n', '2022-09-30 16:30:45', '2022-10-08 16:26:27', '<ol>\n<li>SocketChannel 就是 NIO 对于非阻塞 socket 操作的支持的组件，其在 socket 上 封装了一层，主要是支持了非阻塞的读写。同时改进了传统的单向流 API,，Channel 同时支持读写。</li>\n<li>socket 通道类主要分为 DatagramChannel、SocketChannel 和 ServerSocketChannel，它们在被实例化时都会创建一个对等 socket 对象。要把一个 socket 通道置于非阻塞模式，我们要依靠所有 socket 通道类的公有超级类： SelectableChannel。就绪选择（readiness selection）是一种可以用来查询通道的 机制，该查询可以判断通道是否准备好执行一个目标操作，如读或写。非阻塞 I/O 和 可选择性是紧密相连的，那也正是管理阻塞模式的 API 代码要在 SelectableChannel 超级类中定义的原因。</li>\n<li>设置或重新设置一个通道的阻塞模式是很简单的，只要调用 configureBlocking( )方法即可，传递参数值为 true 则设为阻塞模式，参数值为 false 值设为非阻塞模式。可以通过调用 isBlocking( )方法来判断某个 socket 通道当前处于 哪种模式。</li>\n</ol>\n<p>AbstractSelectableChannel.java 中实现的 configureBlocking()方法如下：</p>\n<div class=\"hljs-center\">\n<p><img src=\"https://vue-vblog.oss-cn-shenzhen.aliyuncs.com/article/2022/09/30/13ce8ae8652a4cafa8312081c19f7adc.png\" alt=\"image.png\" /></p>\n</div>\n<p>下面分别介绍这 3 个通道</p>\n<h3><a id=\"1_ServerSocketChannel_14\"></a>1 ServerSocketChannel</h3>\n<p>ServerSocketChannel 是一个基于通道的 socket 监听器。它同我们所熟悉的 java.net.ServerSocket 执行相同的任务，不过它增加了通道语义，因此能够在非阻塞 模式下运行。</p>\n<p>由于 ServerSocketChannel 没有 bind()方法，因此有必要取出对等的 socket 并使用 它来绑定到一个端口以开始监听连接。我们也是使用对等 ServerSocket 的 API 来根 据需要设置其他的 socket 选项。</p>\n<p>同 java.net.ServerSocket 一样，ServerSocketChannel 也有 accept( )方法。 ServerSocketChannel 的 accept()方法会返回 SocketChannel 类型对象， SocketChannel 可以在非阻塞模式下运行。</p>\n<p>以下代码演示了如何使用一个非阻塞的 accept( )方法：</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ServerSocketChannelDemo</span> {\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> Exception {\n        <span class=\"hljs-comment\">//端口号</span>\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">port</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">9999</span>;\n        <span class=\"hljs-comment\">//buffer</span>\n        <span class=\"hljs-type\">ByteBuffer</span> <span class=\"hljs-variable\">buffer</span> <span class=\"hljs-operator\">=</span> ByteBuffer.wrap(<span class=\"hljs-string\">&quot;hello word&quot;</span>.getBytes(StandardCharsets.UTF_8));\n\n        <span class=\"hljs-comment\">//ServerSocketChannel</span>\n        <span class=\"hljs-type\">ServerSocketChannel</span> <span class=\"hljs-variable\">ssc</span> <span class=\"hljs-operator\">=</span> ServerSocketChannel.open();\n        <span class=\"hljs-comment\">//绑定</span>\n        ssc.socket().bind(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">InetSocketAddress</span>(port));\n        <span class=\"hljs-comment\">//设置非阻塞模式</span>\n        ssc.configureBlocking(<span class=\"hljs-literal\">false</span>);\n\n        <span class=\"hljs-comment\">//监听是否有新链接传入</span>\n        <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>){\n            System.out.println(<span class=\"hljs-string\">&quot;Waiting for connections&quot;</span>);\n            <span class=\"hljs-type\">SocketChannel</span> <span class=\"hljs-variable\">sc</span> <span class=\"hljs-operator\">=</span> ssc.accept();\n            <span class=\"hljs-keyword\">if</span>(sc == <span class=\"hljs-literal\">null</span>){\n                <span class=\"hljs-comment\">//没有链接传入</span>\n                System.out.println(<span class=\"hljs-string\">&quot;null&quot;</span>);\n                Thread.sleep(<span class=\"hljs-number\">2000</span>);\n            }<span class=\"hljs-keyword\">else</span> {\n                System.out.println(<span class=\"hljs-string\">&quot;Incoming connection from:&quot;</span>+sc.socket().getRemoteSocketAddress());\n                buffer.rewind(); <span class=\"hljs-comment\">//指针0</span>\n                sc.write(buffer);\n                sc.close();\n            }\n        }\n    }\n}\n</code></div></pre>\n<div class=\"hljs-center\">\n<p><img src=\"https://vue-vblog.oss-cn-shenzhen.aliyuncs.com/article/2022/10/08/57a63832c66f45c5bbff395c36d92be7.png\" alt=\"image.png\" /></p>\n</div>\n<ul>\n<li>打开 ServerSocketChannel<br />\n通过调用 ServerSocketChannel.open() 方法来打开 ServerSocketChannel.</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-type\">ServerSocketChannel</span> <span class=\"hljs-variable\">serverSocketChannel</span> <span class=\"hljs-operator\">=</span> ServerSocketChannel.open();\n</code></div></pre>\n<ul>\n<li>关闭 ServerSocketChannel<br />\n通过调用 ServerSocketChannel.close() 方法来关闭 ServerSocketChannel.</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-java\">serverSocketChannel.close();\n</code></div></pre>\n<ul>\n<li>监听新的连接<br />\n通过 ServerSocketChannel.accept() 方法监听新进的连接。当 accept()方法返回时 候,它返回一个包含新进来的连接的 SocketChannel。因此, accept()方法会一直阻塞 到有新连接到达。<br />\n通常不会仅仅只监听一个连接,在 while 循环中调用 accept()方法. 如下面的例子：</li>\n</ul>\n<div class=\"hljs-center\">\n<p><img src=\"https://vue-vblog.oss-cn-shenzhen.aliyuncs.com/article/2022/10/08/3e5b7a01f90e49efa8f1f6ad814858cd.png\" alt=\"image.png\" /></p>\n</div>\n<ul>\n<li>阻塞模式<br />\n会在 SocketChannel sc = ssc.accept();这里阻塞住进程。</li>\n</ul>\n<div class=\"hljs-center\">\n<p><img src=\"https://vue-vblog.oss-cn-shenzhen.aliyuncs.com/article/2022/10/08/3b10263a28184fa199557f6f2aeaa674.png\" alt=\"image.png\" /></p>\n</div>\n<ul>\n<li>非阻塞模式<br />\nServerSocketChannel 可以设置成非阻塞模式。在非阻塞模式下，accept() 方法会立 刻返回，如果还没有新进来的连接,返回的将是 null。 因此，需要检查返回的 SocketChannel 是否是 null.如：</li>\n</ul>\n<div class=\"hljs-center\">\n<p><img src=\"https://vue-vblog.oss-cn-shenzhen.aliyuncs.com/article/2022/10/08/07e22f9e39af427b817c698bdc089c43.png\" alt=\"image.png\" /></p>\n</div>\n<h3><a id=\"2_SocketChannel_100\"></a>2 SocketChannel</h3>\n<h4><a id=\"21_SocketChannel__101\"></a>2.1 SocketChannel 介绍</h4>\n<p>Java NIO 中的 SocketChannel 是一个连接到 TCP 网络套接字的通道。</p>\n<blockquote>\n<p>A selectable channel for stream-oriented connecting sockets.</p>\n</blockquote>\n<p>以上是 Java docs 中对于 SocketChannel 的描述：SocketChannel 是一种面向流连接 sockets 套接字的可选择通道。从这里可以看出：</p>\n<ul>\n<li>SocketChannel 是用来连接 Socket 套接字</li>\n<li>SocketChannel 主要用途用来处理网络 I/O 的通道</li>\n<li>SocketChannel 是基于 TCP 连接传输</li>\n<li>SocketChannel 实现了可选择通道，可以被多路复用的</li>\n</ul>\n<h4><a id=\"22_SocketChannel__111\"></a>2.2 SocketChannel 特征</h4>\n<ul>\n<li>对于已经存在的 socket 不能创建 SocketChannel</li>\n<li>SocketChannel 中提供的 open 接口创建的 Channel 并没有进行网络级联，需要使 用 connect 接口连接到指定地址</li>\n<li>未进行连接的 SocketChannle 执行 I/O 操作时，会抛出 NotYetConnectedException</li>\n<li>SocketChannel 支持两种 I/O 模式：阻塞式和非阻塞式</li>\n<li>SocketChannel 支持异步关闭。如果 SocketChannel 在一个线程上 read 阻塞，另 一个线程对该 SocketChannel 调用 shutdownInput，则读阻塞的线程将返回-1 表示没有 读取任何数据；如果 SocketChannel 在一个线程上 write 阻塞，另一个线程对该 SocketChannel 调用 shutdownWrite，则写阻塞的线程将抛出 AsynchronousCloseException</li>\n<li>SocketChannel 支持设定参数 SO_SNDBUF 套接字发送缓冲区大小, SO_RCVBUF 套接字接收缓冲区大小, SO_KEEPALIVE 保活连接 O_REUSEADDR 复用地址, SO_LINGER 有数据传输时延缓关闭 Channel (只有在非阻塞模式下有用), TCP_NODELAY 禁用 Nagle 算法</li>\n</ul>\n<h4><a id=\"23_SocketChannel__119\"></a>2.3 SocketChannel 的使用</h4>\n<ul>\n<li>创建 SocketChannel</li>\n</ul>\n<p>第一种：</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-type\">SocketChannel</span> <span class=\"hljs-variable\">socketChannel</span> <span class=\"hljs-operator\">=</span> SocketChannel.open(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">InetSocketAddress</span>(<span class=\"hljs-string\">&quot;www.baidu.com&quot;</span>, <span class=\"hljs-number\">80</span>));\n</code></div></pre>\n<p>第二种：</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-type\">SocketChannel</span> <span class=\"hljs-variable\">socketChanne2</span> <span class=\"hljs-operator\">=</span> SocketChannel.open(); \nsocketChanne2.connect(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">InetSocketAddress</span>(<span class=\"hljs-string\">&quot;www.baidu.com&quot;</span>, <span class=\"hljs-number\">80</span>));\n</code></div></pre>\n<p>直接使用有参 open api 或者使用无参 open api，但是在无参 open 只是创建了一个 SocketChannel 对象，并没有进行实质的 tcp 连接。</p>\n<ul>\n<li>连接校验</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-java\">socketChannel.isOpen(); <span class=\"hljs-comment\">// 测试 SocketChannel 是否为 open 状态 </span>\nsocketChannel.isConnected(); <span class=\"hljs-comment\">//测试 SocketChannel 是否已经被连接 </span>\nsocketChannel.isConnectionPending(); <span class=\"hljs-comment\">//测试 SocketChannel 是否正在进行 连接</span>\nsocketChannel.finishConnect(); <span class=\"hljs-comment\">//校验正在进行套接字连接的 SocketChannel 是否已经完成连接</span>\n</code></div></pre>\n<ul>\n<li>读写模式<br />\n前面提到 SocketChannel 支持阻塞和非阻塞两种模式：</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-java\">socketChannel.configureBlocking(<span class=\"hljs-literal\">false</span>);\n</code></div></pre>\n<p>通过以上方法设置 SocketChannel 的读写模式。false 表示非阻塞，true 表示阻塞。</p>\n<ul>\n<li>读写</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-type\">SocketChannel</span> <span class=\"hljs-variable\">socketChannel</span> <span class=\"hljs-operator\">=</span> SocketChannel.open( <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">InetSocketAddress</span>(<span class=\"hljs-string\">&quot;www.baidu.com&quot;</span>, <span class=\"hljs-number\">80</span>)); \n<span class=\"hljs-type\">ByteBuffer</span> <span class=\"hljs-variable\">byteBuffer</span> <span class=\"hljs-operator\">=</span> ByteBuffer.allocate(<span class=\"hljs-number\">16</span>); \nsocketChannel.read(byteBuffer); socketChannel.close(); \nSystem.out.println(<span class=\"hljs-string\">&quot;read over&quot;</span>);\n</code></div></pre>\n<p>以上为阻塞式读，当执行到 read 出，线程将阻塞，控制台将无法打印 read over</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-type\">SocketChannel</span> <span class=\"hljs-variable\">socketChannel</span> <span class=\"hljs-operator\">=</span> SocketChannel.open( <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">InetSocketAddress</span>(<span class=\"hljs-string\">&quot;www.baidu.com&quot;</span>, <span class=\"hljs-number\">80</span>)); \nsocketChannel.configureBlocking(<span class=\"hljs-literal\">false</span>); <span class=\"hljs-type\">ByteBuffer</span> <span class=\"hljs-variable\">byteBuffer</span> <span class=\"hljs-operator\">=</span> ByteBuffer.allocate(<span class=\"hljs-number\">16</span>); \nsocketChannel.read(byteBuffer); socketChannel.close();\nSystem.out.println(<span class=\"hljs-string\">&quot;read over&quot;</span>);\n</code></div></pre>\n<p>以上为非阻塞读，控制台将打印 read over<br />\n读写都是面向缓冲区，这个读写方式与前文中的 FileChannel 相同。</p>\n<ul>\n<li>设置和获取参数</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-java\">socketChannel.setOption(StandardSocketOptions.SO_KEEPALIVE, Boolean.TRUE)\n.setOption(StandardSocketOptions.TCP_NODELAY, Boolean.TRUE);\n</code></div></pre>\n<p>通过 setOptions 方法可以设置 socket 套接字的相关参数</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\">socketChannel.getOption(StandardSocketOptions.SO_KEEPALIVE); \nsocketChannel.getOption(StandardSocketOptions.SO_RCVBUF);\n</code></div></pre>\n<p>可以通过 getOption 获取相关参数的值。如默认的接收缓冲区大小是 8192byte。<br />\nSocketChannel 还支持多路复用，但是多路复用在后续内容中会介绍到。</p>\n<h3><a id=\"3_DatagramChannel_175\"></a>3 DatagramChannel</h3>\n<p>正如 SocketChannel 对应 Socket，ServerSocketChannel 对应 ServerSocket，每 一个 DatagramChannel 对象也有一个关联的 DatagramSocket 对象。正如 SocketChannel 模拟连接导向的流协议（如 TCP/IP），DatagramChannel 则模拟包 导向的无连接协议（如 UDP/IP）。DatagramChannel 是无连接的，每个数据报 （datagram）都是一个自包含的实体，拥有它自己的目的地址及不依赖其他数据报的 数据负载。与面向流的的 socket 不同，DatagramChannel 可以发送单独的数据报给 不同的目的地址。同样，DatagramChannel 对象也可以接收来自任意地址的数据包。 每个到达的数据报都含有关于它来自何处的信息（源地址）。</p>\n<h4><a id=\"31__DatagramChannel_178\"></a>3.1 打开 DatagramChannel</h4>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-type\">DatagramChannel</span> <span class=\"hljs-variable\">server</span> <span class=\"hljs-operator\">=</span> DatagramChannel.open(); \nserver.socket().bind(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">InetSocketAddress</span>(<span class=\"hljs-number\">10086</span>));\n</code></div></pre>\n<p>此例子是打开 10086 端口接收 UDP 数据包</p>\n<h4><a id=\"32__185\"></a>3.2 接收数据</h4>\n<p>通过 receive()接收 UDP 包</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-type\">ByteBuffer</span> <span class=\"hljs-variable\">receiveBuffer</span> <span class=\"hljs-operator\">=</span> ByteBuffer.allocate(<span class=\"hljs-number\">64</span>); \nreceiveBuffer.clear(); \n<span class=\"hljs-type\">SocketAddress</span> <span class=\"hljs-variable\">receiveAddr</span> <span class=\"hljs-operator\">=</span> server.receive(receiveBuffer);\n</code></div></pre>\n<p>SocketAddress 可以获得发包的 ip、端口等信息，用 toString 查看</p>\n<h4><a id=\"33__194\"></a>3.3 发送数据</h4>\n<p>通过 send()发送 UDP 包</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-type\">DatagramChannel</span> <span class=\"hljs-variable\">server</span> <span class=\"hljs-operator\">=</span> DatagramChannel.open(); \n<span class=\"hljs-type\">ByteBuffer</span> <span class=\"hljs-variable\">sendBuffer</span> <span class=\"hljs-operator\">=</span> ByteBuffer.wrap(<span class=\"hljs-string\">&quot;client send&quot;</span>.getBytes()); \nserver.send(sendBuffer, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">InetSocketAddress</span>(<span class=\"hljs-string\">&quot;127.0.0.1&quot;</span>,<span class=\"hljs-number\">10086</span>));\n</code></div></pre>\n<h4><a id=\"34__202\"></a>3.4 连接</h4>\n<p>UDP 不存在真正意义上的连接，这里的连接是向特定服务地址用 read 和 write 接收 发送数据包。</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\">client.connect(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">InetSocketAddress</span>(<span class=\"hljs-string\">&quot;127.0.0.1&quot;</span>,<span class=\"hljs-number\">10086</span>)); \n<span class=\"hljs-type\">int</span> readSize= client.read(sendBuffer); \nserver.write(sendBuffer);\n</code></div></pre>\n<p>read()和 write()只有在 connect()后才能使用，不然会抛 NotYetConnectedException 异常。用 read()接收时，如果没有接收到包，会抛 PortUnreachableException 异常。</p>\n<h4><a id=\"34_DatagramChannel__211\"></a>3.4 DatagramChannel 示例</h4>\n<p>客户端发送，服务端接收的例子</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DatagramChannelDemo</span> {\n\n    <span class=\"hljs-comment\">//发送实现</span>\n    <span class=\"hljs-meta\">@Test</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">sendDatagram</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> Exception {\n        <span class=\"hljs-comment\">//打开DatagramChannel</span>\n        <span class=\"hljs-type\">DatagramChannel</span> <span class=\"hljs-variable\">sendChannel</span> <span class=\"hljs-operator\">=</span> DatagramChannel.open();\n        <span class=\"hljs-type\">InetSocketAddress</span> <span class=\"hljs-variable\">sendAddress</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">InetSocketAddress</span>(<span class=\"hljs-string\">&quot;127.0.0.1&quot;</span>, <span class=\"hljs-number\">9999</span>);\n\n        <span class=\"hljs-comment\">//发送</span>\n        <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>){\n            <span class=\"hljs-type\">ByteBuffer</span> <span class=\"hljs-variable\">buffer</span> <span class=\"hljs-operator\">=</span> ByteBuffer.wrap(<span class=\"hljs-string\">&quot;发送Jzj&quot;</span>.getBytes(StandardCharsets.UTF_8));\n            sendChannel.send(buffer,sendAddress);\n            System.out.println(<span class=\"hljs-string\">&quot;已经完成发送&quot;</span>);\n            Thread.sleep(<span class=\"hljs-number\">1000</span>);\n        }\n    }\n\n\n    <span class=\"hljs-comment\">//接收实现</span>\n    <span class=\"hljs-meta\">@Test</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">receiveDatagram</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> Exception{\n        <span class=\"hljs-comment\">//打开DatagramChannel</span>\n        <span class=\"hljs-type\">DatagramChannel</span> <span class=\"hljs-variable\">receiveChannel</span> <span class=\"hljs-operator\">=</span> DatagramChannel.open();\n        <span class=\"hljs-type\">InetSocketAddress</span> <span class=\"hljs-variable\">receiveAddress</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">InetSocketAddress</span>(<span class=\"hljs-number\">9999</span>);\n        <span class=\"hljs-comment\">//绑定</span>\n        receiveChannel.bind(receiveAddress);\n        <span class=\"hljs-comment\">//Buffer</span>\n        <span class=\"hljs-type\">ByteBuffer</span> <span class=\"hljs-variable\">receiveBuffer</span> <span class=\"hljs-operator\">=</span> ByteBuffer.allocate(<span class=\"hljs-number\">1024</span>);\n        <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>){\n            receiveBuffer.clear();\n            <span class=\"hljs-type\">SocketAddress</span> <span class=\"hljs-variable\">socketAddress</span> <span class=\"hljs-operator\">=</span> receiveChannel.receive(receiveBuffer);\n            receiveBuffer.flip();\n            System.out.println(socketAddress.toString());\n            System.out.println(Charset.forName(<span class=\"hljs-string\">&quot;UTF-8&quot;</span>).decode(receiveBuffer));\n        }\n    }\n\n    <span class=\"hljs-comment\">//连接 read 和 write</span>\n    <span class=\"hljs-meta\">@Test</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testConnect</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> Exception {\n        <span class=\"hljs-comment\">//打开DatagramChannel</span>\n        <span class=\"hljs-type\">DatagramChannel</span> <span class=\"hljs-variable\">connChannel</span> <span class=\"hljs-operator\">=</span> DatagramChannel.open();\n        <span class=\"hljs-comment\">//绑定</span>\n        connChannel.bind(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">InetSocketAddress</span>(<span class=\"hljs-number\">9999</span>));\n        <span class=\"hljs-comment\">//连接</span>\n        connChannel.connect(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">InetSocketAddress</span>(<span class=\"hljs-string\">&quot;127.0.0.1&quot;</span>,<span class=\"hljs-number\">9999</span>));\n        <span class=\"hljs-comment\">//write方法</span>\n        connChannel.write(ByteBuffer.wrap(<span class=\"hljs-string\">&quot;发送Jzj&quot;</span>.getBytes(StandardCharsets.UTF_8)));\n        <span class=\"hljs-comment\">//buffer</span>\n        <span class=\"hljs-type\">ByteBuffer</span> <span class=\"hljs-variable\">readBuffer</span> <span class=\"hljs-operator\">=</span> ByteBuffer.allocate(<span class=\"hljs-number\">1024</span>);\n        <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>){\n            readBuffer.clear();\n            connChannel.read(readBuffer);\n            readBuffer.flip();\n            System.out.println(Charset.forName(<span class=\"hljs-string\">&quot;UTF-8&quot;</span>).decode(readBuffer));\n        }\n    }\n}\n</code></div></pre>\n');
INSERT INTO `article_content` VALUES ('68c89984823c939509f7601517b358ad', '### 1 Selector 简介\n#### 1.1 Selector 和 Channel 关系\nSelector 一般称 为选择器 ，也可以翻译为 多路复用器 。它是 Java NIO 核心组件中 的一个，用于检查一个或多个 NIO Channel（通道）的状态是否处于可读、可写。如 此可以实现单线程管理多个 channels,也就是可以管理多个网络链接。\n::: hljs-center\n\n![image.png](https://vue-vblog.oss-cn-shenzhen.aliyuncs.com/article/2022/10/09/7ae9446e0bca4a518b305073e07475d0.png)\n\n:::\n\n使用 Selector 的好处在于： 使用更少的线程来就可以来处理通道了， 相比使用多个 线程，避免了线程上下文切换带来的开销。\n\n#### 1.2 可选择通道(SelectableChannel)\n（1）不是所有的 Channel 都可以被 Selector 复用的。比方说，FileChannel 就不能 被选择器复用。判断一个 Channel 能被 Selector 复用，有一个前提：判断他是否继承了一个抽象类 SelectableChannel。如果继承了 SelectableChannel，则可以被复 用，否则不能。\n\n（2）SelectableChannel 类提供了实现通道的可选择性所需要的公共方法。它是所有 支持就绪检查的通道类的父类。所有 socket 通道，都继承了 SelectableChannel 类 都是可选择的，包括从管道(Pipe)对象的中获得的通道。而 FileChannel 类，没有继 承 SelectableChannel，因此是不是可选通道。\n\n（3）一个通道可以被注册到多个选择器上，但对每个选择器而言只能被注册一次。通 道和选择器之间的关系，使用注册的方式完成。SelectableChannel 可以被注册到 Selector 对象上，在注册的时候，需要指定通道的哪些操作，是 Selector 感兴趣的。\n\n::: hljs-center\n\n![image.png](https://vue-vblog.oss-cn-shenzhen.aliyuncs.com/article/2022/10/09/4f68bfeb91434f1eb900f948f52e0dae.png)\n\n:::\n\n#### 1.3 Channel 注册到 Selector\n（1）使用 Channel.register（Selector sel，int ops）方法，将一个通道注册到一个 选择器时。第一个参数，指定通道要注册的选择器。第二个参数指定选择器需要查询 的通道操作。 \n（2）可以供选择器查询的通道操作，从类型来分，包括以下四种：\n- 可读 : SelectionKey.OP_READ\n- 可写 : SelectionKey.OP_WRITE\n- 连接 : SelectionKey.OP_CONNECT\n- 接收 : SelectionKey.OP_ACCEPT\n\n如果 Selector 对通道的多操作类型感兴趣，可以用“位或”操作符来实现： 比如：int key = SelectionKey.OP_READ | SelectionKey.OP_WRITE ;\n\n（3）选择器查询的不是通道的操作，而是通道的某个操作的一种就绪状态。什么是操 作的就绪状态？一旦通道具备完成某个操作的条件，表示该通道的某个操作已经就绪， 就可以被 Selector 查询到，程序可以对通道进行对应的操作。比方说，某个 SocketChannel 通道可以连接到一个服务器，则处于“连接就绪”(OP_CONNECT)。 再比方说，一个 ServerSocketChannel 服务器通道准备好接收新进入的连接，则处于 “接收就绪”（OP_ACCEPT）状态。还比方说，一个有数据可读的通道，可以说是 “读就绪”(OP_READ)。一个等待写数据的通道可以说是“写就绪”(OP_WRITE)。\n\n#### 1.4 选择键(SelectionKey)\n（1）Channel 注册到后，并且一旦通道处于某种就绪的状态，就可以被选择器查询到。 这个工作，使用选择器 Selector 的 select（）方法完成。select 方法的作用，对感兴 趣的通道操作，进行就绪状态的查询。\n\n（2）Selector 可以不断的查询 Channel 中发生的操作的就绪状态。并且挑选感兴趣 的操作就绪状态。一旦通道有操作的就绪状态达成，并且是 Selector 感兴趣的操作， 就会被 Selector 选中，放入选择键集合中。\n\n（3）一个选择键，首先是包含了注册在 Selector 的通道操作的类型，比方说 SelectionKey.OP_READ。也包含了特定的通道与特定的选择器之间的注册关系。\n\n开发应用程序是，选择键是编程的关键。NIO 的编程，就是根据对应的选择键，进行 不同的业务逻辑处理。\n\n（4）选择键的概念，和事件的概念比较相似。一个选择键类似监听器模式里边的一个 事件。由于 Selector 不是事件触发的模式，而是主动去查询的模式，所以不叫事件 Event，而是叫 SelectionKey 选择键。\n\n### 2 Selector 的使用方法\n\n#### 2.1 Selector 的创建\n通过调用 Selector.open()方法创建一个 Selector 对象，如下：\n```java\n// 1、获取 Selector 选择器 \nSelector selector = Selector.open();\n```\n#### 2.2 注册 Channel 到 Selector\n要实现 Selector 管理 Channel，需要将 channel 注册到相应的 Selector 上\n```java\n// 1、获取 Selector 选择器 \nSelector selector = Selector.open(); \n// 2、获取通道 \nServerSocketChannel serverSocketChannel = ServerSocketChannel.open(); \n// 3.设置为非阻塞 \nserverSocketChannel.configureBlocking(false); \n// 4、绑定连接 \nserverSocketChannel.bind(new InetSocketAddress(9999)); \n// 5、将通道注册到选择器上,并制定监听事件为：“接收”事件 \nserverSocketChannel.register(selector,SelectionKey.OP_ACCEPT);\n```\n上面通过调用通道的 register()方法会将它注册到一个选择器上。 首先需要注意的是：\n\n（1）与 Selector 一起使用时，Channel 必须处于非阻塞模式下，否则将抛出异常 IllegalBlockingModeException。这意味着，FileChannel 不能与 Selector 一起使用，因 为 FileChannel 不能切换到非阻塞模式，而套接字相关的所有的通道都可以。 \n\n（2）一个通道，并没有一定要支持所有的四种操作。比如服务器通道 ServerSocketChannel 支持 Accept 接受操作，而 SocketChannel 客户端通道则不支持。 可以通过通道上的 validOps()方法，来获取特定通道下所有支持的操作集合。\n\n#### 2.3 轮询查询就绪操作\n\n（1）通过 Selector 的 select（）方法，可以查询出已经就绪的通道操作，这些就绪的 状态集合，包存在一个元素是 SelectionKey 对象的 Set 集合中。\n\n（2）下面是 Selector 几个重载的查询 select()方法：\n- select():阻塞到至少有一个通道在你注册的事件上就绪了。\n- select(long timeout)：和 select()一样，但最长阻塞事件为 timeout 毫秒。\n- selectNow():非阻塞，只要有通道就绪就立刻返回。\n\nselect()方法返回的 int 值，表示有多少通道已经就绪，更准确的说，是自前一次 select 方法以来到这一次 select 方法之间的时间段上，有多少通道变成就绪状态。\n\n例如：首次调用 select()方法，如果有一个通道变成就绪状态，返回了 1，若再次调用 select()方法，如果另一个通道就绪了，它会再次返回 1。如果对第一个就绪的 channel 没有做任何操作，现在就有两个就绪的通道，但在每次 select()方法调用之间， 只有一个通道就绪了。\n\n一旦调用 select()方法，并且返回值不为 0 时，在 Selector 中有一个 selectedKeys()方 法，用来访问已选择键集合，迭代集合的每一个选择键元素，根据就绪操作的类型， 完成对应的操作：\n```java\nSet selectedKeys = selector.selectedKeys(); \nIterator keyIterator = selectedKeys.iterator();\nwhile (iterator.hasNext()) {\n            SelectionKey key = iterator.next();\n            if (key.isAcceptable()) {\n                // a connection was accepted by a ServerSocketChannel.\n            } else if (key.isConnectable()) {\n                // a connection was established with a remote server.\n            } else if (key.isReadable()) {\n                // a channel is ready for reading\n            } else if (key.isWritable()) {\n                // a channel is ready for writing\n            }\n        }\n```\n#### 2.4 停止选择的方法\n选择器执行选择的过程，系统底层会依次询问每个通道是否已经就绪，这个过程可能 会造成调用线程进入阻塞状态,那么我们有以下三种方式可以唤醒在 select（）方法中 阻塞的线程。\n\nwakeup()方法 ：通过调用 Selector 对象的 wakeup（）方法让处在阻塞状态的 select()方法立刻返回该方法使得选择器上的第一个还没有返回的选择操作立即返回。如果当前没有进行中 的选择操作，那么下一次对 select()方法的一次调用将立即返回。\n\nclose()方法 ：通过 close（）方法关闭 Selector。\n\n该方法使得任何一个在选择操作中阻塞的线程都被唤醒（类似 wakeup（）），同时 使得注册到该 Selector 的所有 Channel 被注销，所有的键将被取消，但是 Channel 本身并不会关闭。\n\n### 3 NIO 编程步骤\n第一步：创建 Selector 选择器 \n第二步：创建 ServerSocketChannel 通道，并绑定监听端口 \n第三步：设置 Channel 通道是非阻塞模式 \n第四步：把 Channel 注册到 Socketor 选择器上，监听连接事件 \n第五步：调用 Selector 的 select 方法（循环调用），监测通道的就绪状况 \n第六步：调用 selectKeys 方法获取就绪 channel 集合 \n第七步：遍历就绪 channel 集合，判断就绪事件类型，实现具体的业务操作 \n第八步：根据业务，决定是否需要再次注册监听事件，重复执行第三步操作\n\n### 4 示例代码\n\n#### 4.1 服务端代码\n```java\n//服务端\n    @Test\n    public void serverDemo() throws Exception {\n        //获取服务端通道\n        ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();\n        //切换非阻塞模式\n        serverSocketChannel.configureBlocking(false);\n        //创建buffer\n        ByteBuffer serverByteBuffer = ByteBuffer.allocate(1024);\n        //绑定端口号\n        serverSocketChannel.bind(new InetSocketAddress(9999));\n        //获取selector选择器\n        Selector selector = Selector.open();\n        //通道注册到选择器，\n        serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);\n        //选择器进行轮询\n        while (selector.select()>0){\n            Set<SelectionKey> selectionKeys = selector.selectedKeys();\n            Iterator<SelectionKey> iterator = selectionKeys.iterator();\n            while (iterator.hasNext()){\n                SelectionKey next = iterator.next();\n                //判断什么操作\n                if(next.isAcceptable()){\n                    //获取链接\n                    SocketChannel accept = serverSocketChannel.accept();\n                    //切换非阻塞模式\n                    accept.configureBlocking(false);\n                    //注册\n                    accept.register(selector,SelectionKey.OP_READ);\n                }else if(next.isReadable()){\n                    SocketChannel channel = (SocketChannel) next.channel();\n                    ByteBuffer byteBuffer = ByteBuffer.allocate(1024);\n                    //读取数据\n                    int length =0;\n                    while ((length = channel.read(byteBuffer))>0){\n                        byteBuffer.flip();\n                        System.out.println(new String(byteBuffer.array(),0,length));\n                        byteBuffer.clear();\n                    }\n                }\n            }\n            iterator.remove();\n        }\n    }\n```\n#### 4.2 客户端代码\n```java\npublic static void main(String[] args) throws Exception{\n        //获取通道，绑定主机端口号\n        SocketChannel socketChannel = SocketChannel.open(new InetSocketAddress(\"127.0.0.1\",9999));\n        //切换非阻塞模式\n        socketChannel.configureBlocking(false);\n\n        //创建buffer\n        ByteBuffer byteBuffer = ByteBuffer.allocate(1024);\n\n        Scanner scanner = new Scanner(System.in);\n        while (scanner.hasNext()){\n            String str = scanner.next();\n            //写入buffer数据\n            byteBuffer.put((new Date() +\"--->\"+str).getBytes(StandardCharsets.UTF_8));\n            //模式切换\n            byteBuffer.flip();\n            //写入通道\n            socketChannel.write(byteBuffer);\n            //关闭\n            byteBuffer.clear();\n        }\n\n    }\n```\n', '2022-10-09 10:56:26', '2022-10-09 15:59:38', '<h3><a id=\"1_Selector__0\"></a>1 Selector 简介</h3>\n<h4><a id=\"11_Selector__Channel__1\"></a>1.1 Selector 和 Channel 关系</h4>\n<p>Selector 一般称 为选择器 ，也可以翻译为 多路复用器 。它是 Java NIO 核心组件中 的一个，用于检查一个或多个 NIO Channel（通道）的状态是否处于可读、可写。如 此可以实现单线程管理多个 channels,也就是可以管理多个网络链接。</p>\n<div class=\"hljs-center\">\n<p><img src=\"https://vue-vblog.oss-cn-shenzhen.aliyuncs.com/article/2022/10/09/7ae9446e0bca4a518b305073e07475d0.png\" alt=\"image.png\" /></p>\n</div>\n<p>使用 Selector 的好处在于： 使用更少的线程来就可以来处理通道了， 相比使用多个 线程，避免了线程上下文切换带来的开销。</p>\n<h4><a id=\"12_SelectableChannel_11\"></a>1.2 可选择通道(SelectableChannel)</h4>\n<p>（1）不是所有的 Channel 都可以被 Selector 复用的。比方说，FileChannel 就不能 被选择器复用。判断一个 Channel 能被 Selector 复用，有一个前提：判断他是否继承了一个抽象类 SelectableChannel。如果继承了 SelectableChannel，则可以被复 用，否则不能。</p>\n<p>（2）SelectableChannel 类提供了实现通道的可选择性所需要的公共方法。它是所有 支持就绪检查的通道类的父类。所有 socket 通道，都继承了 SelectableChannel 类 都是可选择的，包括从管道(Pipe)对象的中获得的通道。而 FileChannel 类，没有继 承 SelectableChannel，因此是不是可选通道。</p>\n<p>（3）一个通道可以被注册到多个选择器上，但对每个选择器而言只能被注册一次。通 道和选择器之间的关系，使用注册的方式完成。SelectableChannel 可以被注册到 Selector 对象上，在注册的时候，需要指定通道的哪些操作，是 Selector 感兴趣的。</p>\n<div class=\"hljs-center\">\n<p><img src=\"https://vue-vblog.oss-cn-shenzhen.aliyuncs.com/article/2022/10/09/4f68bfeb91434f1eb900f948f52e0dae.png\" alt=\"image.png\" /></p>\n</div>\n<h4><a id=\"13_Channel__Selector_24\"></a>1.3 Channel 注册到 Selector</h4>\n<p>（1）使用 Channel.register（Selector sel，int ops）方法，将一个通道注册到一个 选择器时。第一个参数，指定通道要注册的选择器。第二个参数指定选择器需要查询 的通道操作。<br />\n（2）可以供选择器查询的通道操作，从类型来分，包括以下四种：</p>\n<ul>\n<li>可读 : SelectionKey.OP_READ</li>\n<li>可写 : SelectionKey.OP_WRITE</li>\n<li>连接 : SelectionKey.OP_CONNECT</li>\n<li>接收 : SelectionKey.OP_ACCEPT</li>\n</ul>\n<p>如果 Selector 对通道的多操作类型感兴趣，可以用“位或”操作符来实现： 比如：int key = SelectionKey.OP_READ | SelectionKey.OP_WRITE ;</p>\n<p>（3）选择器查询的不是通道的操作，而是通道的某个操作的一种就绪状态。什么是操 作的就绪状态？一旦通道具备完成某个操作的条件，表示该通道的某个操作已经就绪， 就可以被 Selector 查询到，程序可以对通道进行对应的操作。比方说，某个 SocketChannel 通道可以连接到一个服务器，则处于“连接就绪”(OP_CONNECT)。 再比方说，一个 ServerSocketChannel 服务器通道准备好接收新进入的连接，则处于 “接收就绪”（OP_ACCEPT）状态。还比方说，一个有数据可读的通道，可以说是 “读就绪”(OP_READ)。一个等待写数据的通道可以说是“写就绪”(OP_WRITE)。</p>\n<h4><a id=\"14_SelectionKey_36\"></a>1.4 选择键(SelectionKey)</h4>\n<p>（1）Channel 注册到后，并且一旦通道处于某种就绪的状态，就可以被选择器查询到。 这个工作，使用选择器 Selector 的 select（）方法完成。select 方法的作用，对感兴 趣的通道操作，进行就绪状态的查询。</p>\n<p>（2）Selector 可以不断的查询 Channel 中发生的操作的就绪状态。并且挑选感兴趣 的操作就绪状态。一旦通道有操作的就绪状态达成，并且是 Selector 感兴趣的操作， 就会被 Selector 选中，放入选择键集合中。</p>\n<p>（3）一个选择键，首先是包含了注册在 Selector 的通道操作的类型，比方说 SelectionKey.OP_READ。也包含了特定的通道与特定的选择器之间的注册关系。</p>\n<p>开发应用程序是，选择键是编程的关键。NIO 的编程，就是根据对应的选择键，进行 不同的业务逻辑处理。</p>\n<p>（4）选择键的概念，和事件的概念比较相似。一个选择键类似监听器模式里边的一个 事件。由于 Selector 不是事件触发的模式，而是主动去查询的模式，所以不叫事件 Event，而是叫 SelectionKey 选择键。</p>\n<h3><a id=\"2_Selector__47\"></a>2 Selector 的使用方法</h3>\n<h4><a id=\"21_Selector__49\"></a>2.1 Selector 的创建</h4>\n<p>通过调用 Selector.open()方法创建一个 Selector 对象，如下：</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-comment\">// 1、获取 Selector 选择器 </span>\n<span class=\"hljs-type\">Selector</span> <span class=\"hljs-variable\">selector</span> <span class=\"hljs-operator\">=</span> Selector.open();\n</code></div></pre>\n<h4><a id=\"22__Channel__Selector_55\"></a>2.2 注册 Channel 到 Selector</h4>\n<p>要实现 Selector 管理 Channel，需要将 channel 注册到相应的 Selector 上</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-comment\">// 1、获取 Selector 选择器 </span>\n<span class=\"hljs-type\">Selector</span> <span class=\"hljs-variable\">selector</span> <span class=\"hljs-operator\">=</span> Selector.open(); \n<span class=\"hljs-comment\">// 2、获取通道 </span>\n<span class=\"hljs-type\">ServerSocketChannel</span> <span class=\"hljs-variable\">serverSocketChannel</span> <span class=\"hljs-operator\">=</span> ServerSocketChannel.open(); \n<span class=\"hljs-comment\">// 3.设置为非阻塞 </span>\nserverSocketChannel.configureBlocking(<span class=\"hljs-literal\">false</span>); \n<span class=\"hljs-comment\">// 4、绑定连接 </span>\nserverSocketChannel.bind(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">InetSocketAddress</span>(<span class=\"hljs-number\">9999</span>)); \n<span class=\"hljs-comment\">// 5、将通道注册到选择器上,并制定监听事件为：“接收”事件 </span>\nserverSocketChannel.register(selector,SelectionKey.OP_ACCEPT);\n</code></div></pre>\n<p>上面通过调用通道的 register()方法会将它注册到一个选择器上。 首先需要注意的是：</p>\n<p>（1）与 Selector 一起使用时，Channel 必须处于非阻塞模式下，否则将抛出异常 IllegalBlockingModeException。这意味着，FileChannel 不能与 Selector 一起使用，因 为 FileChannel 不能切换到非阻塞模式，而套接字相关的所有的通道都可以。</p>\n<p>（2）一个通道，并没有一定要支持所有的四种操作。比如服务器通道 ServerSocketChannel 支持 Accept 接受操作，而 SocketChannel 客户端通道则不支持。 可以通过通道上的 validOps()方法，来获取特定通道下所有支持的操作集合。</p>\n<h4><a id=\"23__75\"></a>2.3 轮询查询就绪操作</h4>\n<p>（1）通过 Selector 的 select（）方法，可以查询出已经就绪的通道操作，这些就绪的 状态集合，包存在一个元素是 SelectionKey 对象的 Set 集合中。</p>\n<p>（2）下面是 Selector 几个重载的查询 select()方法：</p>\n<ul>\n<li>select():阻塞到至少有一个通道在你注册的事件上就绪了。</li>\n<li>select(long timeout)：和 select()一样，但最长阻塞事件为 timeout 毫秒。</li>\n<li>selectNow():非阻塞，只要有通道就绪就立刻返回。</li>\n</ul>\n<p>select()方法返回的 int 值，表示有多少通道已经就绪，更准确的说，是自前一次 select 方法以来到这一次 select 方法之间的时间段上，有多少通道变成就绪状态。</p>\n<p>例如：首次调用 select()方法，如果有一个通道变成就绪状态，返回了 1，若再次调用 select()方法，如果另一个通道就绪了，它会再次返回 1。如果对第一个就绪的 channel 没有做任何操作，现在就有两个就绪的通道，但在每次 select()方法调用之间， 只有一个通道就绪了。</p>\n<p>一旦调用 select()方法，并且返回值不为 0 时，在 Selector 中有一个 selectedKeys()方 法，用来访问已选择键集合，迭代集合的每一个选择键元素，根据就绪操作的类型， 完成对应的操作：</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-type\">Set</span> <span class=\"hljs-variable\">selectedKeys</span> <span class=\"hljs-operator\">=</span> selector.selectedKeys(); \n<span class=\"hljs-type\">Iterator</span> <span class=\"hljs-variable\">keyIterator</span> <span class=\"hljs-operator\">=</span> selectedKeys.iterator();\n<span class=\"hljs-keyword\">while</span> (iterator.hasNext()) {\n            <span class=\"hljs-type\">SelectionKey</span> <span class=\"hljs-variable\">key</span> <span class=\"hljs-operator\">=</span> iterator.next();\n            <span class=\"hljs-keyword\">if</span> (key.isAcceptable()) {\n                <span class=\"hljs-comment\">// a connection was accepted by a ServerSocketChannel.</span>\n            } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (key.isConnectable()) {\n                <span class=\"hljs-comment\">// a connection was established with a remote server.</span>\n            } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (key.isReadable()) {\n                <span class=\"hljs-comment\">// a channel is ready for reading</span>\n            } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (key.isWritable()) {\n                <span class=\"hljs-comment\">// a channel is ready for writing</span>\n            }\n        }\n</code></div></pre>\n<h4><a id=\"24__105\"></a>2.4 停止选择的方法</h4>\n<p>选择器执行选择的过程，系统底层会依次询问每个通道是否已经就绪，这个过程可能 会造成调用线程进入阻塞状态,那么我们有以下三种方式可以唤醒在 select（）方法中 阻塞的线程。</p>\n<p>wakeup()方法 ：通过调用 Selector 对象的 wakeup（）方法让处在阻塞状态的 select()方法立刻返回该方法使得选择器上的第一个还没有返回的选择操作立即返回。如果当前没有进行中 的选择操作，那么下一次对 select()方法的一次调用将立即返回。</p>\n<p>close()方法 ：通过 close（）方法关闭 Selector。</p>\n<p>该方法使得任何一个在选择操作中阻塞的线程都被唤醒（类似 wakeup（）），同时 使得注册到该 Selector 的所有 Channel 被注销，所有的键将被取消，但是 Channel 本身并不会关闭。</p>\n<h3><a id=\"3_NIO__114\"></a>3 NIO 编程步骤</h3>\n<p>第一步：创建 Selector 选择器<br />\n第二步：创建 ServerSocketChannel 通道，并绑定监听端口<br />\n第三步：设置 Channel 通道是非阻塞模式<br />\n第四步：把 Channel 注册到 Socketor 选择器上，监听连接事件<br />\n第五步：调用 Selector 的 select 方法（循环调用），监测通道的就绪状况<br />\n第六步：调用 selectKeys 方法获取就绪 channel 集合<br />\n第七步：遍历就绪 channel 集合，判断就绪事件类型，实现具体的业务操作<br />\n第八步：根据业务，决定是否需要再次注册监听事件，重复执行第三步操作</p>\n<h3><a id=\"4__124\"></a>4 示例代码</h3>\n<h4><a id=\"41__126\"></a>4.1 服务端代码</h4>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-comment\">//服务端</span>\n    <span class=\"hljs-meta\">@Test</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">serverDemo</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> Exception {\n        <span class=\"hljs-comment\">//获取服务端通道</span>\n        <span class=\"hljs-type\">ServerSocketChannel</span> <span class=\"hljs-variable\">serverSocketChannel</span> <span class=\"hljs-operator\">=</span> ServerSocketChannel.open();\n        <span class=\"hljs-comment\">//切换非阻塞模式</span>\n        serverSocketChannel.configureBlocking(<span class=\"hljs-literal\">false</span>);\n        <span class=\"hljs-comment\">//创建buffer</span>\n        <span class=\"hljs-type\">ByteBuffer</span> <span class=\"hljs-variable\">serverByteBuffer</span> <span class=\"hljs-operator\">=</span> ByteBuffer.allocate(<span class=\"hljs-number\">1024</span>);\n        <span class=\"hljs-comment\">//绑定端口号</span>\n        serverSocketChannel.bind(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">InetSocketAddress</span>(<span class=\"hljs-number\">9999</span>));\n        <span class=\"hljs-comment\">//获取selector选择器</span>\n        <span class=\"hljs-type\">Selector</span> <span class=\"hljs-variable\">selector</span> <span class=\"hljs-operator\">=</span> Selector.open();\n        <span class=\"hljs-comment\">//通道注册到选择器，</span>\n        serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);\n        <span class=\"hljs-comment\">//选择器进行轮询</span>\n        <span class=\"hljs-keyword\">while</span> (selector.select()&gt;<span class=\"hljs-number\">0</span>){\n            Set&lt;SelectionKey&gt; selectionKeys = selector.selectedKeys();\n            Iterator&lt;SelectionKey&gt; iterator = selectionKeys.iterator();\n            <span class=\"hljs-keyword\">while</span> (iterator.hasNext()){\n                <span class=\"hljs-type\">SelectionKey</span> <span class=\"hljs-variable\">next</span> <span class=\"hljs-operator\">=</span> iterator.next();\n                <span class=\"hljs-comment\">//判断什么操作</span>\n                <span class=\"hljs-keyword\">if</span>(next.isAcceptable()){\n                    <span class=\"hljs-comment\">//获取链接</span>\n                    <span class=\"hljs-type\">SocketChannel</span> <span class=\"hljs-variable\">accept</span> <span class=\"hljs-operator\">=</span> serverSocketChannel.accept();\n                    <span class=\"hljs-comment\">//切换非阻塞模式</span>\n                    accept.configureBlocking(<span class=\"hljs-literal\">false</span>);\n                    <span class=\"hljs-comment\">//注册</span>\n                    accept.register(selector,SelectionKey.OP_READ);\n                }<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(next.isReadable()){\n                    <span class=\"hljs-type\">SocketChannel</span> <span class=\"hljs-variable\">channel</span> <span class=\"hljs-operator\">=</span> (SocketChannel) next.channel();\n                    <span class=\"hljs-type\">ByteBuffer</span> <span class=\"hljs-variable\">byteBuffer</span> <span class=\"hljs-operator\">=</span> ByteBuffer.allocate(<span class=\"hljs-number\">1024</span>);\n                    <span class=\"hljs-comment\">//读取数据</span>\n                    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">length</span> <span class=\"hljs-operator\">=</span><span class=\"hljs-number\">0</span>;\n                    <span class=\"hljs-keyword\">while</span> ((length = channel.read(byteBuffer))&gt;<span class=\"hljs-number\">0</span>){\n                        byteBuffer.flip();\n                        System.out.println(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">String</span>(byteBuffer.array(),<span class=\"hljs-number\">0</span>,length));\n                        byteBuffer.clear();\n                    }\n                }\n            }\n            iterator.remove();\n        }\n    }\n</code></div></pre>\n<h4><a id=\"42__173\"></a>4.2 客户端代码</h4>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> Exception{\n        <span class=\"hljs-comment\">//获取通道，绑定主机端口号</span>\n        <span class=\"hljs-type\">SocketChannel</span> <span class=\"hljs-variable\">socketChannel</span> <span class=\"hljs-operator\">=</span> SocketChannel.open(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">InetSocketAddress</span>(<span class=\"hljs-string\">&quot;127.0.0.1&quot;</span>,<span class=\"hljs-number\">9999</span>));\n        <span class=\"hljs-comment\">//切换非阻塞模式</span>\n        socketChannel.configureBlocking(<span class=\"hljs-literal\">false</span>);\n\n        <span class=\"hljs-comment\">//创建buffer</span>\n        <span class=\"hljs-type\">ByteBuffer</span> <span class=\"hljs-variable\">byteBuffer</span> <span class=\"hljs-operator\">=</span> ByteBuffer.allocate(<span class=\"hljs-number\">1024</span>);\n\n        <span class=\"hljs-type\">Scanner</span> <span class=\"hljs-variable\">scanner</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Scanner</span>(System.in);\n        <span class=\"hljs-keyword\">while</span> (scanner.hasNext()){\n            <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">str</span> <span class=\"hljs-operator\">=</span> scanner.next();\n            <span class=\"hljs-comment\">//写入buffer数据</span>\n            byteBuffer.put((<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>() +<span class=\"hljs-string\">&quot;---&gt;&quot;</span>+str).getBytes(StandardCharsets.UTF_8));\n            <span class=\"hljs-comment\">//模式切换</span>\n            byteBuffer.flip();\n            <span class=\"hljs-comment\">//写入通道</span>\n            socketChannel.write(byteBuffer);\n            <span class=\"hljs-comment\">//关闭</span>\n            byteBuffer.clear();\n        }\n\n    }\n</code></div></pre>\n');
INSERT INTO `article_content` VALUES ('6ad6bbb7161e5ad89760b8ca830870ef', '### 1 IO概述\nIO 的操作方式通常分为几种：同步阻塞 BIO、同步非阻塞 NIO、异步非阻塞 AIO。\n\n- 在 JDK1.4 之前，我们建立网络连接的时候采用的是 BIO 模式。\n- Java NIO（New IO 或 Non Blocking IO）是从 Java 1.4 版本开始引入的一个新的 IO API，可以替代标准的 Java IO API。NIO 支持面向缓冲区的、基于通道的 IO 操作。 NIO 将以更加高效的方式进行文件的读写操作。BIO 与 NIO 一个比较重要的不同是， 我们使用 BIO 的时候往往会引入多线程，每个连接对应一个单独的线程；而 NIO 则是 使用单线程或者只使用少量的多线程，让连接共用一个线程。\n- AIO 也就是 NIO 2，在 Java 7 中引入了 NIO 的改进版 NIO 2,它是异步非阻塞的 IO 模型。\n\n\n下面我们来详细介绍这几种 IO 方式\n\n### 2 阻塞 IO (BIO)\n阻塞 IO（BIO）是最传统的一种 IO 模型，即在读写数据过程中会发生阻塞现象，直至 有可供读取的数据或者数据能够写入。\n\n- 在 BIO 模式中，服务器会为每个客户端请求建立一个线程，由该线程单独负责 处理一个客户请求，这种模式虽然简单方便，但由于服务器为每个客户端的连接都采 用一个线程去处理，使得资源占用非常大。因此，当连接数量达到上限时，如果再有 用户请求连接，直接会导致资源瓶颈，严重的可能会直接导致服务器崩溃。\n- 大多数情况下为了避免上述问题，都采用了线程池模型。也就是创建一个固定大 小的线程池，如果有客户端请求，就从线程池中取一个空闲线程来处理，当客户端处 理完操作之后，就会释放对线程的占用。因此这样就避免为每一个客户端都要创建线 程带来的资源浪费，使得线程可以重用。但线程池也有它的弊端，如果连接大多是长 连接，可能会导致在一段时间内，线程池中的线程都被占用，那么当再有客户端请求 连接时，由于没有空闲线程来处理，就会导致客户端连接失败。传统的 BIO 模式如下 图所示：\n::: hljs-center\n\n![image.png](https://vue-vblog.oss-cn-shenzhen.aliyuncs.com/article/2022/09/30/86e940e7fb5e478aa334c15a9d8d8e8e.png)\n\n:::\n\n\n### 3 非阻塞 IO(NIO)\n基于 BIO 的各种弊端，在 JDK1.4 开始出现了高性能 IO 设计模式非阻塞 IO（NIO）。\n\n- NIO 采用非阻塞模式，基于 Reactor 模式的工作方式，I/O 调用不会被阻塞，它 的实现过程是：会先对每个客户端注册感兴趣的事件，然后有一个线程专门去轮询每 个客户端是否有事件发生，当有事件发生时，便顺序处理每个事件，当所有事件处理 完之后，便再转去继续轮询。如下图所示：\n::: hljs-center\n\n![image.png](https://vue-vblog.oss-cn-shenzhen.aliyuncs.com/article/2022/09/30/33ee136a8a2d491887385a59a60c952a.png)\n\n:::\n\n\n- NIO 中实现非阻塞 I/O 的核心对象就是 Selector，Selector 就是注册各种 I/O 事件地方，而且当我们感兴趣的事件发生时，就是这个对象告诉我们所发生的事件， 如下图所示：\n::: hljs-center\n\n![image.png](https://vue-vblog.oss-cn-shenzhen.aliyuncs.com/article/2022/09/30/bfd0b9ea9f8f4e72bdace86e7596c0ef.png)\n\n:::\n\n\n- NIO 的最重要的地方是当一个连接创建后，不需要对应一个线程，这个连接会被 注册到多路复用器上面，一个选择器线程可以同时处理成千上万个连接，系统不必创 建大量的线程，也不必维护这些线程，从而大大减小了系统的开销。\n::: hljs-center\n\n![image.png](https://vue-vblog.oss-cn-shenzhen.aliyuncs.com/article/2022/09/30/c1b3c7c99b8c4c70bacebc1db33a3b07.png)\n\n:::\n\n\n### 4 异步非阻塞 IO(AIO)\n- AIO 也就是 NIO 2，在 Java 7 中引入了 NIO 的改进版 NIO 2,它是异步非阻塞 的 IO 模型。异步 IO 是基于事件和回调机制实现的，也就是说 AIO 模式不需要selector 操作，而是是事件驱动形式，也就是当客户端发送数据之后，会主动通知服 务器，接着服务器再进行读写操作。\n- Java 的 AIO API 其实就是 Proactor 模式的应用，和 Reactor 模式类似。 Reactor 和 Proactor 模式的主要区别就是真正的读取和写入操作是有谁来完成的， Reactor 中需要应用程序自己读取或者写入数据，而 Proactor 模式中，应用程序不需 要进行实际的读写过程，它只需要从缓存区读取或者写入即可，操作系统会读取缓存 区或者写入缓存区到真正的 IO 设备。\n\n### 5 NIO 概述\nJava NIO 由以下几个核心部分组成：\n1. Channels\n2. Buffers\n3. Selectors\n\n虽然 Java NIO 中除此之外还有很多类和组件，但 Channel，Buffer 和 Selector 构成 了核心的 API。其它组件，如 Pipe 和 FileLock，只不过是与三个核心组件共同使用的 工具类。\n\n#### 5.1 Channel\n首先说一下 Channel，可以翻译成“通道”。Channel 和 IO 中的 Stream(流)是差不 多一个等级的。只不过 Stream 是单向的，譬如：InputStream, OutputStream.而 Channel 是双向的，既可以用来进行读操作，又可以用来进行写操作。\n\nNIO 中的 Channel 的主要实现有：FileChannel、DatagramChannel、 SocketChannel 和 ServerSocketChannel，这里看名字就可以猜出个所以然来：分别 可以对应文件 IO、UDP 和 TCP（Server 和 Client）。\n\n#### 5.2 Buffer\nNIO 中的关键 Buffer 实现有：ByteBuffer, CharBuffer, DoubleBuffer, FloatBuffer, IntBuffer, LongBuffer, ShortBuffer，分别对应基本数据类型: byte, char, double, float, int, long, short。\n\n#### 5.3 Selector\nSelector 运行单线程处理多个 Channel，如果你的应用打开了多个通道，但每个连接 的流量都很低，使用 Selector 就会很方便。例如在一个聊天服务器中。要使用 Selector, 得向 Selector 注册 Channel，然后调用它的 select()方法。这个方法会一直 阻塞到某个注册的通道有事件就绪。一旦这个方法返回，线程就可以处理这些事件， 事件的例子有如新的连接进来、数据接收等。\n\n#### 5.4 Channel Buffer Selector 三者关系\n\n- 一个 Channel 就像一个流，只是 Channel 是双向的，Channel 读数据到 Buffer， Buffer 写数据到 Channel。\n\n\n::: hljs-center\n\n![image.png](https://vue-vblog.oss-cn-shenzhen.aliyuncs.com/article/2022/09/30/917086f4944c4bb1b15cc4e756622905.png)\n\n:::\n\n\n- 一个 selector 允许一个线程处理多个 channel。\n\n\n::: hljs-center\n\n![image.png](https://vue-vblog.oss-cn-shenzhen.aliyuncs.com/article/2022/09/30/0209d1cac2b74cf5bd7345fd87888c9b.png)\n\n:::\n', '2022-09-30 14:45:15', '2022-09-30 15:13:52', '<h3><a id=\"1_IO_0\"></a>1 IO概述</h3>\n<p>IO 的操作方式通常分为几种：同步阻塞 BIO、同步非阻塞 NIO、异步非阻塞 AIO。</p>\n<ul>\n<li>在 JDK1.4 之前，我们建立网络连接的时候采用的是 BIO 模式。</li>\n<li>Java NIO（New IO 或 Non Blocking IO）是从 Java 1.4 版本开始引入的一个新的 IO API，可以替代标准的 Java IO API。NIO 支持面向缓冲区的、基于通道的 IO 操作。 NIO 将以更加高效的方式进行文件的读写操作。BIO 与 NIO 一个比较重要的不同是， 我们使用 BIO 的时候往往会引入多线程，每个连接对应一个单独的线程；而 NIO 则是 使用单线程或者只使用少量的多线程，让连接共用一个线程。</li>\n<li>AIO 也就是 NIO 2，在 Java 7 中引入了 NIO 的改进版 NIO 2,它是异步非阻塞的 IO 模型。</li>\n</ul>\n<p>下面我们来详细介绍这几种 IO 方式</p>\n<h3><a id=\"2__IO_BIO_10\"></a>2 阻塞 IO (BIO)</h3>\n<p>阻塞 IO（BIO）是最传统的一种 IO 模型，即在读写数据过程中会发生阻塞现象，直至 有可供读取的数据或者数据能够写入。</p>\n<ul>\n<li>在 BIO 模式中，服务器会为每个客户端请求建立一个线程，由该线程单独负责 处理一个客户请求，这种模式虽然简单方便，但由于服务器为每个客户端的连接都采 用一个线程去处理，使得资源占用非常大。因此，当连接数量达到上限时，如果再有 用户请求连接，直接会导致资源瓶颈，严重的可能会直接导致服务器崩溃。</li>\n<li>大多数情况下为了避免上述问题，都采用了线程池模型。也就是创建一个固定大 小的线程池，如果有客户端请求，就从线程池中取一个空闲线程来处理，当客户端处 理完操作之后，就会释放对线程的占用。因此这样就避免为每一个客户端都要创建线 程带来的资源浪费，使得线程可以重用。但线程池也有它的弊端，如果连接大多是长 连接，可能会导致在一段时间内，线程池中的线程都被占用，那么当再有客户端请求 连接时，由于没有空闲线程来处理，就会导致客户端连接失败。传统的 BIO 模式如下 图所示：</li>\n</ul>\n<div class=\"hljs-center\">\n<p><img src=\"https://vue-vblog.oss-cn-shenzhen.aliyuncs.com/article/2022/09/30/86e940e7fb5e478aa334c15a9d8d8e8e.png\" alt=\"image.png\" /></p>\n</div>\n<h3><a id=\"3__IONIO_22\"></a>3 非阻塞 IO(NIO)</h3>\n<p>基于 BIO 的各种弊端，在 JDK1.4 开始出现了高性能 IO 设计模式非阻塞 IO（NIO）。</p>\n<ul>\n<li>NIO 采用非阻塞模式，基于 Reactor 模式的工作方式，I/O 调用不会被阻塞，它 的实现过程是：会先对每个客户端注册感兴趣的事件，然后有一个线程专门去轮询每 个客户端是否有事件发生，当有事件发生时，便顺序处理每个事件，当所有事件处理 完之后，便再转去继续轮询。如下图所示：</li>\n</ul>\n<div class=\"hljs-center\">\n<p><img src=\"https://vue-vblog.oss-cn-shenzhen.aliyuncs.com/article/2022/09/30/33ee136a8a2d491887385a59a60c952a.png\" alt=\"image.png\" /></p>\n</div>\n<ul>\n<li>NIO 中实现非阻塞 I/O 的核心对象就是 Selector，Selector 就是注册各种 I/O 事件地方，而且当我们感兴趣的事件发生时，就是这个对象告诉我们所发生的事件， 如下图所示：</li>\n</ul>\n<div class=\"hljs-center\">\n<p><img src=\"https://vue-vblog.oss-cn-shenzhen.aliyuncs.com/article/2022/09/30/bfd0b9ea9f8f4e72bdace86e7596c0ef.png\" alt=\"image.png\" /></p>\n</div>\n<ul>\n<li>NIO 的最重要的地方是当一个连接创建后，不需要对应一个线程，这个连接会被 注册到多路复用器上面，一个选择器线程可以同时处理成千上万个连接，系统不必创 建大量的线程，也不必维护这些线程，从而大大减小了系统的开销。</li>\n</ul>\n<div class=\"hljs-center\">\n<p><img src=\"https://vue-vblog.oss-cn-shenzhen.aliyuncs.com/article/2022/09/30/c1b3c7c99b8c4c70bacebc1db33a3b07.png\" alt=\"image.png\" /></p>\n</div>\n<h3><a id=\"4__IOAIO_49\"></a>4 异步非阻塞 IO(AIO)</h3>\n<ul>\n<li>AIO 也就是 NIO 2，在 Java 7 中引入了 NIO 的改进版 NIO 2,它是异步非阻塞 的 IO 模型。异步 IO 是基于事件和回调机制实现的，也就是说 AIO 模式不需要selector 操作，而是是事件驱动形式，也就是当客户端发送数据之后，会主动通知服 务器，接着服务器再进行读写操作。</li>\n<li>Java 的 AIO API 其实就是 Proactor 模式的应用，和 Reactor 模式类似。 Reactor 和 Proactor 模式的主要区别就是真正的读取和写入操作是有谁来完成的， Reactor 中需要应用程序自己读取或者写入数据，而 Proactor 模式中，应用程序不需 要进行实际的读写过程，它只需要从缓存区读取或者写入即可，操作系统会读取缓存 区或者写入缓存区到真正的 IO 设备。</li>\n</ul>\n<h3><a id=\"5_NIO__53\"></a>5 NIO 概述</h3>\n<p>Java NIO 由以下几个核心部分组成：</p>\n<ol>\n<li>Channels</li>\n<li>Buffers</li>\n<li>Selectors</li>\n</ol>\n<p>虽然 Java NIO 中除此之外还有很多类和组件，但 Channel，Buffer 和 Selector 构成 了核心的 API。其它组件，如 Pipe 和 FileLock，只不过是与三个核心组件共同使用的 工具类。</p>\n<h4><a id=\"51_Channel_61\"></a>5.1 Channel</h4>\n<p>首先说一下 Channel，可以翻译成“通道”。Channel 和 IO 中的 Stream(流)是差不 多一个等级的。只不过 Stream 是单向的，譬如：InputStream, OutputStream.而 Channel 是双向的，既可以用来进行读操作，又可以用来进行写操作。</p>\n<p>NIO 中的 Channel 的主要实现有：FileChannel、DatagramChannel、 SocketChannel 和 ServerSocketChannel，这里看名字就可以猜出个所以然来：分别 可以对应文件 IO、UDP 和 TCP（Server 和 Client）。</p>\n<h4><a id=\"52_Buffer_66\"></a>5.2 Buffer</h4>\n<p>NIO 中的关键 Buffer 实现有：ByteBuffer, CharBuffer, DoubleBuffer, FloatBuffer, IntBuffer, LongBuffer, ShortBuffer，分别对应基本数据类型: byte, char, double, float, int, long, short。</p>\n<h4><a id=\"53_Selector_69\"></a>5.3 Selector</h4>\n<p>Selector 运行单线程处理多个 Channel，如果你的应用打开了多个通道，但每个连接 的流量都很低，使用 Selector 就会很方便。例如在一个聊天服务器中。要使用 Selector, 得向 Selector 注册 Channel，然后调用它的 select()方法。这个方法会一直 阻塞到某个注册的通道有事件就绪。一旦这个方法返回，线程就可以处理这些事件， 事件的例子有如新的连接进来、数据接收等。</p>\n<h4><a id=\"54_Channel_Buffer_Selector__72\"></a>5.4 Channel Buffer Selector 三者关系</h4>\n<ul>\n<li>一个 Channel 就像一个流，只是 Channel 是双向的，Channel 读数据到 Buffer， Buffer 写数据到 Channel。</li>\n</ul>\n<div class=\"hljs-center\">\n<p><img src=\"https://vue-vblog.oss-cn-shenzhen.aliyuncs.com/article/2022/09/30/917086f4944c4bb1b15cc4e756622905.png\" alt=\"image.png\" /></p>\n</div>\n<ul>\n<li>一个 selector 允许一个线程处理多个 channel。</li>\n</ul>\n<div class=\"hljs-center\">\n<p><img src=\"https://vue-vblog.oss-cn-shenzhen.aliyuncs.com/article/2022/09/30/0209d1cac2b74cf5bd7345fd87888c9b.png\" alt=\"image.png\" /></p>\n</div>\n');
INSERT INTO `article_content` VALUES ('6bb0a02f479905e24398dfe187c49641', '### 1 Path\n#### 1.1 Path 简介\nJava Path 接口是 Java NIO 更新的一部分，同 Java NIO 一起已经包括在 Java6 和 Java7 中。Java Path 接口是在 Java7 中添加到 Java NIO 的。Path 接口位于 java.nio.file 包中，所以 Path 接口的完全限定名称为 java.nio.file.Path。\n\nJava Path 实例表示文件系统中的路径。一个路径可以指向一个文件或一个目录。路径 可以是绝对路径，也可以是相对路径。绝对路径包含从文件系统的根目录到它指向的 文件或目录的完整路径。相对路径包含相对于其他路径的文件或目录的路径。\n\n在许多方面，java.nio.file.Path 接口类似于 java.io.File 类，但是有一些差别。不过， 在许多情况下，可以使用 Path 接口来替换 File 类的使用。\n\n#### 1.2 创建 Path 实例\n\n使用 java.nio.file.Path 实例必须创建一个 Path 实例。可以使用 Paths 类 (java.nio.file.Paths)中的静态方法 Paths.get()来创建路径实例。\n\n示例代码:\n\n```java\npublic static void main(String[] args) {\n        //创建Path实例\n        Path path = Paths.get(\"d:\\\\111.txt\");\n    }\n```\n上述代码，可以理解为，Paths.get()方法是 Path 实例的工厂方法。\n\n#### 1.3 创建绝对路径\n\n（1）创建绝对路径，通过调用 Paths.get()方法，给定绝对路径文件作为参数来完成。\n\n示例代码：\n```java\nPath path = Paths.get(\"d:\\\\atguigu\\\\001.txt\");\n```\n上述代码中，绝对路径是 d:\\atguigu\\001.txt。在 Java 字符串中， \\是一个转义字符， 需要编写\\\\，告诉 Java 编译器在字符串中写入一个\\字符。\n\n（2）如果在 Linux、MacOS 等操作字体上，上面的绝对路径可能如下:\n\n```java\nPath path = Paths.get(\"/home/jakobjenkov/myfile.txt\");\n```\n\n绝对路径现在为/home/jakobjenkov/myfile.txt.\n\n（3）如果在 Windows 机器上使用了从/开始的路径，那么路径将被解释为相对于当 前驱动器。\n\n#### 1.4 创建相对路径\nJava NIO Path 类也可以用于处理相对路径。您可以使用 Paths.get(basePath, relativePath)方法创建一个相对路径。\n\n示例代码:\n\n```java\n//代码 1 \nPath projects = Paths.get(\"d:\\\\atguigu\", \"projects\"); \n//代码 2 \nPath file = Paths.get(\"d:\\\\atguigu\", \"projects\\\\002.txt\");\n```\n代码 1 创建了一个 Java Path 的实例，指向路径(目录):d:\\atguigu\\projects \n代码 2 创建了一个 Path 的实例，指向路径(文件):d:\\atguigu\\projects\\002.txt\n\n#### 1.5 Path.normalize()\nPath 接口的 normalize()方法可以使路径标准化。标准化意味着它将移除所有在路径 字符串的中间的.和..代码，并解析路径字符串所引用的路径。\n\nPath.normalize()示例:\n```java\nString originalPath = \"d:\\\\atguigu\\\\projects\\\\..\\\\yygh-project\"; \nPath path1 = Paths.get(originalPath); \nSystem.out.println(\"path1 = \" + path1); \nPath path2 = path1.normalize(); \nSystem.out.println(\"path2 = \" + path2);\n```\n输出结果：标准化的路径不包含 projects\\..部分\n::: hljs-center\n\n![image.png](https://vue-vblog.oss-cn-shenzhen.aliyuncs.com/article/2022/10/09/99340617865d41659cbde12e476c8b64.png)\n\n:::\n\n### 2 Files\nJava NIO Files 类(java.nio.file.Files)提供了几种操作文件系统中的文件的方法。以下 内容介绍 Java NIO Files 最常用的一些方法。java.nio.file.Files 类与 java.nio.file.Path 实例一起工作，因此在学习 Files 类之前，需要先了解 Path 类。\n\n#### 2.1 Files.createDirectory()\nFiles.createDirectory()方法，用于根据 Path 实例创建一个新目录 \n示例：\n```java\n   	Path path = Paths.get(\"d:\\\\sgg\");  \n   	try {\n            Path newDir = Files.createDirectory(path);\n        } catch (FileAlreadyExistsException e) {\n            // 目录已经存在\n        } catch (IOException e) {\n            // 其他发生的异常\n            e.printStackTrace();\n        }\n```\n第一行创建表示要创建的目录的 Path 实例。在 try-catch 块中，用路径作为参数调用 Files.createDirectory()方法。如果创建目录成功，将返回一个 Path 实例，该实例指 向新创建的路径。\n\n如果该目录已经存在，则是抛出一个 java.nio.file.FileAlreadyExistsException。如果 出现其他错误，可能会抛出 IOException。例如，如果想要的新目录的父目录不存在， 则可能会抛出 IOException。\n\n#### 2.2 Files.copy()\n- Files.copy()方法从一个路径拷贝一个文件到另外一个目录\n示例：\n```java\n	Path sourcePath = Paths.get(\"d:\\\\atguigu\\\\01.txt\");\n        Path destinationPath = Paths.get(\"d:\\\\atguigu\\\\002.txt\");\n        try {\n            Files.copy(sourcePath, destinationPath);\n        } catch (FileAlreadyExistsException e) {\n            // 目录已经存在 \n        } catch (IOException e) { // 其他发生的异常 \n            e.printStackTrace();\n        }\n```\n\n首先，该示例创建两个 Path 实例。然后，这个例子调用 Files.copy()，将两个 Path 实例作为参数传递。这可以让源路径引用的文件被复制到目标路径引用的文件中。\n\n如果目标文件已经存在，则抛出一个 java.nio.file.FileAlreadyExistsException 异常。 如果有其他错误，则会抛出一个 IOException。例如，如果将该文件复制到不存在的 目录，则会抛出 IOException。\n- 覆盖已存在的文件\nFiles.copy()方法的第三个参数。如果目标文件已经存在，这个参数指示 copy()方法覆 盖现有的文件。\n```java\nFiles.copy(sourcePath, destinationPath, StandardCopyOption.REPLACE_EXISTING);\n```\n#### 2.3 Files.move()\nFiles.move()用于将文件从一个路径移动到另一个路径。移动文件与重命名相同，但是 移动文件既可以移动到不同的目录，也可以在相同的操作中更改它的名称。\n\n示例：\n```java\n	Path sourcePath = Paths.get(\"d:\\\\atguigu\\\\01.txt\");\n        Path destinationPath = Paths.get(\"d:\\\\atguigu\\\\001.txt\");\n        try {\n            Files.move(sourcePath, destinationPath, StandardCopyOption.REPLACE_EXISTING);\n        } catch (IOException e) {\n            //移动文件失败 \n            e.printStackTrace();\n        }\n```\nFiles.move()的第三个参数。这个参数告诉 Files.move()方法来覆盖目标路径上的任何 现有文件。\n\n#### 2.4 Files.delete()\nFiles.delete()方法可以删除一个文件或者目录。\n示例：\n```java\n	Path path = Paths.get(\"d:\\\\atguigu\\\\001.txt\");\n        try {\n            Files.delete(path);\n        } catch (IOException e) {\n            // 删除文件失败\n            e.printStackTrace();\n        }\n```\n创建指向要删除的文件的 Path。然后调用 Files.delete()方法。如果 Files.delete()不 能删除文件(例如，文件或目录不存在)，会抛出一个 IOException。\n\n#### 2.5 Files.walkFileTree()\n（1）Files.walkFileTree()方法包含递归遍历目录树功能，将 Path 实例和 FileVisitor 作为参数。Path 实例指向要遍历的目录，FileVisitor 在遍历期间被调用。\n\n（2）FileVisitor 是一个接口，必须自己实现 FileVisitor 接口，并将实现的实例传递给 walkFileTree()方法。在目录遍历过程中，您的 FileVisitor 实现的每个方法都将被调用。 如果不需要实现所有这些方法，那么可以扩展 SimpleFileVisitor 类，它包含 FileVisitor 接口中所有方法的默认实现。\n\n（3）FileVisitor 接口的方法中，每个都返回一个 FileVisitResult 枚举实例。 FileVisitResult 枚举包含以下四个选项\n1. CONTINUE 继续\n2. TERMINATE 终止\n3. SKIP_SIBLING 跳过同级\n4. SKIP_SUBTREE 跳过子级\n\n（4）查找一个名为 001.txt 的文件示例：\n```java\npublic static void main(String[] args) {\n        Path rootPath = Paths.get(\"d:\\\\\");\n        String fileToFind = File.separator + \"111.txt\";\n        try {\n            Files.walkFileTree(rootPath,new SimpleFileVisitor<Path>(){\n                @Override\n                public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {\n                    String fileString = file.toAbsolutePath().toString();\n                    //System.out.println(\"pathString = \" + fileString);\n                    if(fileString.endsWith(fileToFind)){\n                        System.out.println(\"file found at path: \" + file.toAbsolutePath());\n                        return FileVisitResult.TERMINATE;\n                    }\n                    return FileVisitResult.CONTINUE;\n                }\n            });\n        } catch (Exception e){\n            e.printStackTrace();\n        }\n    }\n```\n\n\n（5）java.nio.file.Files 类包含许多其他的函数，有关这些方法的更多信息，请查看 java.nio.file.Files 类的 JavaDoc。\n\n### 3 AsynchronousFileChannel\n在 Java 7 中，Java NIO 中添加了 AsynchronousFileChannel，也就是是异步地将数 据写入文件。\n\n#### 3.1 创建 AsynchronousFileChannel\n通过静态方法 open()创建\n示例：\n```java\npublic static void main(String[] args) {\n        Path path = Paths.get(\"d:\\\\atguigu\\\\01.txt\");\n        try {\n            AsynchronousFileChannel fileChannel = AsynchronousFileChannel.open(path, StandardOpenOption.READ);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n```\nopen()方法的第一个参数指向与 AsynchronousFileChannel 相关联文件的 Path 实例。\n\n第二个参数是一个或多个打开选项，它告诉 AsynchronousFileChannel 在文件上执 行什么操作。在本例中，我们使用了 StandardOpenOption.READ 选项，表示该文件 将被打开阅读。\n\n#### 3.2 通过 Future 读取数据\n可以通过两种方式从 AsynchronousFileChannel 读取数据。第一种方式是调用返回 Future 的 read()方法\n示例：\n```java\npublic static void main(String[] args) {\n        Path path = Paths.get(\"d:\\\\atguigu\\\\001.txt\");\n        AsynchronousFileChannel fileChannel = null;\n        try {\n            fileChannel = AsynchronousFileChannel.open(path, StandardOpenOption.READ);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        ByteBuffer buffer = ByteBuffer.allocate(1024);\n        long position = 0;\n        Future<Integer> operation = fileChannel.read(buffer, position);\n        while (!operation.isDone()) ;\n        buffer.flip();\n        byte[] data = new byte[buffer.limit()];\n        buffer.get(data);\n        System.out.println(new String(data));\n        buffer.clear();\n    }\n```\n上述代码：\n（1）创建了一个 AsynchronousFileChannel。\n（2）创建一个 ByteBuffer，它被传递给 read()方法作为参数，以及一个 0 的位置。\n（3）在调用 read()之后，循环，直到返回的 isDone()方法返回 true。\n（4）读取操作完成后，数据读取到 ByteBuffer 中，然后打印到 System.out 中。\n\n#### 3.3 通过 CompletionHandler 读取数据\n第二种方法是调用 read()方法，该方法将一个 CompletionHandler 作为参数\n示例：\n```java\n    @Test\n    public void test01() {\n        Path path = Paths.get(\"d:\\\\atguigu\\\\001.txt\");\n        AsynchronousFileChannel fileChannel = null;\n        try {\n            fileChannel = AsynchronousFileChannel.open(path, StandardOpenOption.READ);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        ByteBuffer buffer = ByteBuffer.allocate(1024);\n        long position = 0;\n        fileChannel.read(buffer, position, buffer, new CompletionHandler<Integer, ByteBuffer>() {\n            @Override\n            public void completed(Integer result, ByteBuffer attachment) {\n                System.out.println(\"result = \" + result);\n                attachment.flip();\n                byte[] data = new byte[attachment.limit()];\n                attachment.get(data);\n                System.out.println(new String(data));\n                attachment.clear();\n            }\n\n            @Override\n            public void failed(Throwable exc, ByteBuffer attachment) {\n            }\n        });\n    }\n```\n（1）读取操作完成，将调用 CompletionHandler 的 completed()方法。\n（2）对于 completed()方法的参数传递一个整数，它告诉我们读取了多少字节，以及 传递给 read()方法的“附件”。“附件”是 read()方法的第三个参数。在本代码中， 它是 ByteBuffer，数据也被读取。\n（3）如果读取操作失败，则将调用 CompletionHandler 的 failed()方法。\n\n#### 3.4 通过 Future 写数据\n和读取一样，可以通过两种方式将数据写入一个 AsynchronousFileChannel\n示例：\n```java\n    @Test\n    public void test01() {\n        Path path = Paths.get(\"d:\\\\atguigu\\\\001.txt\");\n        AsynchronousFileChannel fileChannel = null;\n        try {\n            fileChannel = AsynchronousFileChannel.open(path, StandardOpenOption.WRITE);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        ByteBuffer buffer = ByteBuffer.allocate(1024);\n        long position = 0;\n        buffer.put(\"atguigu data\".getBytes());\n        buffer.flip();\n        Future<Integer> operation = fileChannel.write(buffer, position);\n        buffer.clear();\n        while (!operation.isDone()) ;\n        System.out.println(\"Write over\");\n    }\n```\n首先，AsynchronousFileChannel 以写模式打开。然后创建一个 ByteBuffer，并将 一些数据写入其中。然后，ByteBuffer 中的数据被写入到文件中。最后，示例检查返 回的 Future，以查看写操作完成时的情况。\n\n注意，文件必须已经存在。如果该文件不存在，那么 write()方法将抛出一个 java.nio.file.NoSuchFileException。\n\n#### 3.5 通过 CompletionHandler 写数据\n示例：\n```java\n    @Test\n    public void test01() {\n        Path path = Paths.get(\"d:\\\\atguigu\\\\001.txt\");\n        if (!Files.exists(path)) {\n            try {\n                Files.createFile(path);\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n        AsynchronousFileChannel fileChannel = null;\n        try {\n            fileChannel = AsynchronousFileChannel.open(path, StandardOpenOption.WRITE);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        ByteBuffer buffer = ByteBuffer.allocate(1024);\n        long position = 0;\n        buffer.put(\"atguigu data\".getBytes());\n        buffer.flip();\n        fileChannel.write(buffer, position, buffer, new CompletionHandler<Integer, ByteBuffer>() {\n            @Override\n            public void completed(Integer result, ByteBuffer attachment) {\n                System.out.println(\"bytes written: \" + result);\n            }\n\n            @Override\n            public void failed(Throwable exc, ByteBuffer attachment) {\n                System.out.println(\"Write failed\");\n                exc.printStackTrace();\n            }\n        });\n    }\n```\n当写操作完成时，将会调用 CompletionHandler 的 completed()方法。如果写失败， 则会调用 failed()方法。\n\n### 4 字符集（Charset）\njava 中使用 Charset 来表示字符集编码对象\n\nCharset 常用静态方法\n```java\npublic static Charset forName(String charsetName)//通过编码类型获得 Charset 对 象\n```\n```java\npublic static SortedMap<String,Charset> availableCharsets()//获得系统支持的所有 编码方式\n```\n```java\npublic static Charset defaultCharset()//获得虚拟机默认的编码方式\n```\n```java\npublic static boolean isSupported(String charsetName)//判断是否支持该编码类型\n```\n\n\nCharset 常用普通方法\n```java\npublic final String name()//获得 Charset 对象的编码类型(String)\n```\n\n\n```java\npublic abstract CharsetEncoder newEncoder()//获得编码器对象\n```\n\n```java\npublic abstract CharsetDecoder newDecoder()//获得解码器对象\n```\n代码示例：\n\n```java\npublic static void main(String[] args) throws Exception {\n        // 获取CharSet对象\n        Charset charset = Charset.forName(\"UTF-8\");\n        //获取编码器对象\n        CharsetEncoder charsetEncoder = charset.newEncoder();\n        //创建缓冲区\n        CharBuffer charBuffer = CharBuffer.allocate(1024);\n        charBuffer.put(\"jzj漫漫长路\");\n        charBuffer.flip();\n        //编码\n        ByteBuffer byteBuffer = charsetEncoder.encode(charBuffer);\n        System.out.println(\"编码之后结果：\");\n        for (int i = 0; i < byteBuffer.limit(); i++) {\n            System.out.println(byteBuffer.get());\n        }\n        //获取解码器对象\n        byteBuffer.flip();\n        CharsetDecoder charsetDecoder = charset.newDecoder();\n        //解码\n        CharBuffer decode = charsetDecoder.decode(byteBuffer);\n        System.out.println(\"解码后：\");\n        System.out.println(decode.toString());\n        //使用GBK解码\n        Charset charset1 = Charset.forName(\"GBK\");\n        byteBuffer.flip();\n        CharBuffer charBuffer2 = charset1.decode(byteBuffer);\n        System.out.println(\"使用其他编码进行解码：\");\n        System.out.println(charBuffer2);\n\n        //获取CharSet所支持的字符编码\n        Map<String, Charset> map = Charset.availableCharsets();\n        Set<Map.Entry<String, Charset>> set = map.entrySet();\n        for (Map.Entry<String, Charset> entry : set) {\n            System.out.println(entry.getKey()+\"=\"+entry.getValue().toString());\n        }\n    }\n```\n', '2022-10-09 17:29:00', '2022-10-12 11:30:16', '<h3><a id=\"1_Path_0\"></a>1 Path</h3>\n<h4><a id=\"11_Path__1\"></a>1.1 Path 简介</h4>\n<p>Java Path 接口是 Java NIO 更新的一部分，同 Java NIO 一起已经包括在 Java6 和 Java7 中。Java Path 接口是在 Java7 中添加到 Java NIO 的。Path 接口位于 java.nio.file 包中，所以 Path 接口的完全限定名称为 java.nio.file.Path。</p>\n<p>Java Path 实例表示文件系统中的路径。一个路径可以指向一个文件或一个目录。路径 可以是绝对路径，也可以是相对路径。绝对路径包含从文件系统的根目录到它指向的 文件或目录的完整路径。相对路径包含相对于其他路径的文件或目录的路径。</p>\n<p>在许多方面，java.nio.file.Path 接口类似于 java.io.File 类，但是有一些差别。不过， 在许多情况下，可以使用 Path 接口来替换 File 类的使用。</p>\n<h4><a id=\"12__Path__8\"></a>1.2 创建 Path 实例</h4>\n<p>使用 java.nio.file.Path 实例必须创建一个 Path 实例。可以使用 Paths 类 (java.nio.file.Paths)中的静态方法 Paths.get()来创建路径实例。</p>\n<p>示例代码:</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n        <span class=\"hljs-comment\">//创建Path实例</span>\n        <span class=\"hljs-type\">Path</span> <span class=\"hljs-variable\">path</span> <span class=\"hljs-operator\">=</span> Paths.get(<span class=\"hljs-string\">&quot;d:\\\\111.txt&quot;</span>);\n    }\n</code></div></pre>\n<p>上述代码，可以理解为，Paths.get()方法是 Path 实例的工厂方法。</p>\n<h4><a id=\"13__22\"></a>1.3 创建绝对路径</h4>\n<p>（1）创建绝对路径，通过调用 Paths.get()方法，给定绝对路径文件作为参数来完成。</p>\n<p>示例代码：</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-type\">Path</span> <span class=\"hljs-variable\">path</span> <span class=\"hljs-operator\">=</span> Paths.get(<span class=\"hljs-string\">&quot;d:\\\\atguigu\\\\001.txt&quot;</span>);\n</code></div></pre>\n<p>上述代码中，绝对路径是 d:\\atguigu\\001.txt。在 Java 字符串中， \\是一个转义字符， 需要编写\\，告诉 Java 编译器在字符串中写入一个\\字符。</p>\n<p>（2）如果在 Linux、MacOS 等操作字体上，上面的绝对路径可能如下:</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-type\">Path</span> <span class=\"hljs-variable\">path</span> <span class=\"hljs-operator\">=</span> Paths.get(<span class=\"hljs-string\">&quot;/home/jakobjenkov/myfile.txt&quot;</span>);\n</code></div></pre>\n<p>绝对路径现在为/home/jakobjenkov/myfile.txt.</p>\n<p>（3）如果在 Windows 机器上使用了从/开始的路径，那么路径将被解释为相对于当 前驱动器。</p>\n<h4><a id=\"14__42\"></a>1.4 创建相对路径</h4>\n<p>Java NIO Path 类也可以用于处理相对路径。您可以使用 Paths.get(basePath, relativePath)方法创建一个相对路径。</p>\n<p>示例代码:</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-comment\">//代码 1 </span>\n<span class=\"hljs-type\">Path</span> <span class=\"hljs-variable\">projects</span> <span class=\"hljs-operator\">=</span> Paths.get(<span class=\"hljs-string\">&quot;d:\\\\atguigu&quot;</span>, <span class=\"hljs-string\">&quot;projects&quot;</span>); \n<span class=\"hljs-comment\">//代码 2 </span>\n<span class=\"hljs-type\">Path</span> <span class=\"hljs-variable\">file</span> <span class=\"hljs-operator\">=</span> Paths.get(<span class=\"hljs-string\">&quot;d:\\\\atguigu&quot;</span>, <span class=\"hljs-string\">&quot;projects\\\\002.txt&quot;</span>);\n</code></div></pre>\n<p>代码 1 创建了一个 Java Path 的实例，指向路径(目录):d:\\atguigu\\projects<br />\n代码 2 创建了一个 Path 的实例，指向路径(文件):d:\\atguigu\\projects\\002.txt</p>\n<h4><a id=\"15_Pathnormalize_56\"></a>1.5 Path.normalize()</h4>\n<p>Path 接口的 normalize()方法可以使路径标准化。标准化意味着它将移除所有在路径 字符串的中间的.和…代码，并解析路径字符串所引用的路径。</p>\n<p>Path.normalize()示例:</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">originalPath</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;d:\\\\atguigu\\\\projects\\\\..\\\\yygh-project&quot;</span>; \n<span class=\"hljs-type\">Path</span> <span class=\"hljs-variable\">path1</span> <span class=\"hljs-operator\">=</span> Paths.get(originalPath); \nSystem.out.println(<span class=\"hljs-string\">&quot;path1 = &quot;</span> + path1); \n<span class=\"hljs-type\">Path</span> <span class=\"hljs-variable\">path2</span> <span class=\"hljs-operator\">=</span> path1.normalize(); \nSystem.out.println(<span class=\"hljs-string\">&quot;path2 = &quot;</span> + path2);\n</code></div></pre>\n<p>输出结果：标准化的路径不包含 projects…部分</p>\n<div class=\"hljs-center\">\n<p><img src=\"https://vue-vblog.oss-cn-shenzhen.aliyuncs.com/article/2022/10/09/99340617865d41659cbde12e476c8b64.png\" alt=\"image.png\" /></p>\n</div>\n<h3><a id=\"2_Files_74\"></a>2 Files</h3>\n<p>Java NIO Files 类(java.nio.file.Files)提供了几种操作文件系统中的文件的方法。以下 内容介绍 Java NIO Files 最常用的一些方法。java.nio.file.Files 类与 java.nio.file.Path 实例一起工作，因此在学习 Files 类之前，需要先了解 Path 类。</p>\n<h4><a id=\"21_FilescreateDirectory_77\"></a>2.1 Files.createDirectory()</h4>\n<p>Files.createDirectory()方法，用于根据 Path 实例创建一个新目录<br />\n示例：</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\">   	<span class=\"hljs-type\">Path</span> <span class=\"hljs-variable\">path</span> <span class=\"hljs-operator\">=</span> Paths.get(<span class=\"hljs-string\">&quot;d:\\\\sgg&quot;</span>);  \n   	<span class=\"hljs-keyword\">try</span> {\n            <span class=\"hljs-type\">Path</span> <span class=\"hljs-variable\">newDir</span> <span class=\"hljs-operator\">=</span> Files.createDirectory(path);\n        } <span class=\"hljs-keyword\">catch</span> (FileAlreadyExistsException e) {\n            <span class=\"hljs-comment\">// 目录已经存在</span>\n        } <span class=\"hljs-keyword\">catch</span> (IOException e) {\n            <span class=\"hljs-comment\">// 其他发生的异常</span>\n            e.printStackTrace();\n        }\n</code></div></pre>\n<p>第一行创建表示要创建的目录的 Path 实例。在 try-catch 块中，用路径作为参数调用 Files.createDirectory()方法。如果创建目录成功，将返回一个 Path 实例，该实例指 向新创建的路径。</p>\n<p>如果该目录已经存在，则是抛出一个 java.nio.file.FileAlreadyExistsException。如果 出现其他错误，可能会抛出 IOException。例如，如果想要的新目录的父目录不存在， 则可能会抛出 IOException。</p>\n<h4><a id=\"22_Filescopy_95\"></a>2.2 Files.copy()</h4>\n<ul>\n<li>Files.copy()方法从一个路径拷贝一个文件到另外一个目录<br />\n示例：</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-java\">	<span class=\"hljs-type\">Path</span> <span class=\"hljs-variable\">sourcePath</span> <span class=\"hljs-operator\">=</span> Paths.get(<span class=\"hljs-string\">&quot;d:\\\\atguigu\\\\01.txt&quot;</span>);\n        <span class=\"hljs-type\">Path</span> <span class=\"hljs-variable\">destinationPath</span> <span class=\"hljs-operator\">=</span> Paths.get(<span class=\"hljs-string\">&quot;d:\\\\atguigu\\\\002.txt&quot;</span>);\n        <span class=\"hljs-keyword\">try</span> {\n            Files.copy(sourcePath, destinationPath);\n        } <span class=\"hljs-keyword\">catch</span> (FileAlreadyExistsException e) {\n            <span class=\"hljs-comment\">// 目录已经存在 </span>\n        } <span class=\"hljs-keyword\">catch</span> (IOException e) { <span class=\"hljs-comment\">// 其他发生的异常 </span>\n            e.printStackTrace();\n        }\n</code></div></pre>\n<p>首先，该示例创建两个 Path 实例。然后，这个例子调用 Files.copy()，将两个 Path 实例作为参数传递。这可以让源路径引用的文件被复制到目标路径引用的文件中。</p>\n<p>如果目标文件已经存在，则抛出一个 java.nio.file.FileAlreadyExistsException 异常。 如果有其他错误，则会抛出一个 IOException。例如，如果将该文件复制到不存在的 目录，则会抛出 IOException。</p>\n<ul>\n<li>覆盖已存在的文件<br />\nFiles.copy()方法的第三个参数。如果目标文件已经存在，这个参数指示 copy()方法覆 盖现有的文件。</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-java\">Files.copy(sourcePath, destinationPath, StandardCopyOption.REPLACE_EXISTING);\n</code></div></pre>\n<h4><a id=\"23_Filesmove_118\"></a>2.3 Files.move()</h4>\n<p>Files.move()用于将文件从一个路径移动到另一个路径。移动文件与重命名相同，但是 移动文件既可以移动到不同的目录，也可以在相同的操作中更改它的名称。</p>\n<p>示例：</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\">	<span class=\"hljs-type\">Path</span> <span class=\"hljs-variable\">sourcePath</span> <span class=\"hljs-operator\">=</span> Paths.get(<span class=\"hljs-string\">&quot;d:\\\\atguigu\\\\01.txt&quot;</span>);\n        <span class=\"hljs-type\">Path</span> <span class=\"hljs-variable\">destinationPath</span> <span class=\"hljs-operator\">=</span> Paths.get(<span class=\"hljs-string\">&quot;d:\\\\atguigu\\\\001.txt&quot;</span>);\n        <span class=\"hljs-keyword\">try</span> {\n            Files.move(sourcePath, destinationPath, StandardCopyOption.REPLACE_EXISTING);\n        } <span class=\"hljs-keyword\">catch</span> (IOException e) {\n            <span class=\"hljs-comment\">//移动文件失败 </span>\n            e.printStackTrace();\n        }\n</code></div></pre>\n<p>Files.move()的第三个参数。这个参数告诉 Files.move()方法来覆盖目标路径上的任何 现有文件。</p>\n<h4><a id=\"24_Filesdelete_134\"></a>2.4 Files.delete()</h4>\n<p>Files.delete()方法可以删除一个文件或者目录。<br />\n示例：</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\">	<span class=\"hljs-type\">Path</span> <span class=\"hljs-variable\">path</span> <span class=\"hljs-operator\">=</span> Paths.get(<span class=\"hljs-string\">&quot;d:\\\\atguigu\\\\001.txt&quot;</span>);\n        <span class=\"hljs-keyword\">try</span> {\n            Files.delete(path);\n        } <span class=\"hljs-keyword\">catch</span> (IOException e) {\n            <span class=\"hljs-comment\">// 删除文件失败</span>\n            e.printStackTrace();\n        }\n</code></div></pre>\n<p>创建指向要删除的文件的 Path。然后调用 Files.delete()方法。如果 Files.delete()不 能删除文件(例如，文件或目录不存在)，会抛出一个 IOException。</p>\n<h4><a id=\"25_FileswalkFileTree_148\"></a>2.5 Files.walkFileTree()</h4>\n<p>（1）Files.walkFileTree()方法包含递归遍历目录树功能，将 Path 实例和 FileVisitor 作为参数。Path 实例指向要遍历的目录，FileVisitor 在遍历期间被调用。</p>\n<p>（2）FileVisitor 是一个接口，必须自己实现 FileVisitor 接口，并将实现的实例传递给 walkFileTree()方法。在目录遍历过程中，您的 FileVisitor 实现的每个方法都将被调用。 如果不需要实现所有这些方法，那么可以扩展 SimpleFileVisitor 类，它包含 FileVisitor 接口中所有方法的默认实现。</p>\n<p>（3）FileVisitor 接口的方法中，每个都返回一个 FileVisitResult 枚举实例。 FileVisitResult 枚举包含以下四个选项</p>\n<ol>\n<li>CONTINUE 继续</li>\n<li>TERMINATE 终止</li>\n<li>SKIP_SIBLING 跳过同级</li>\n<li>SKIP_SUBTREE 跳过子级</li>\n</ol>\n<p>（4）查找一个名为 001.txt 的文件示例：</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n        <span class=\"hljs-type\">Path</span> <span class=\"hljs-variable\">rootPath</span> <span class=\"hljs-operator\">=</span> Paths.get(<span class=\"hljs-string\">&quot;d:\\\\&quot;</span>);\n        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">fileToFind</span> <span class=\"hljs-operator\">=</span> File.separator + <span class=\"hljs-string\">&quot;111.txt&quot;</span>;\n        <span class=\"hljs-keyword\">try</span> {\n            Files.walkFileTree(rootPath,<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SimpleFileVisitor</span>&lt;Path&gt;(){\n                <span class=\"hljs-meta\">@Override</span>\n                <span class=\"hljs-keyword\">public</span> FileVisitResult <span class=\"hljs-title function_\">visitFile</span><span class=\"hljs-params\">(Path file, BasicFileAttributes attrs)</span> <span class=\"hljs-keyword\">throws</span> IOException {\n                    <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">fileString</span> <span class=\"hljs-operator\">=</span> file.toAbsolutePath().toString();\n                    <span class=\"hljs-comment\">//System.out.println(&quot;pathString = &quot; + fileString);</span>\n                    <span class=\"hljs-keyword\">if</span>(fileString.endsWith(fileToFind)){\n                        System.out.println(<span class=\"hljs-string\">&quot;file found at path: &quot;</span> + file.toAbsolutePath());\n                        <span class=\"hljs-keyword\">return</span> FileVisitResult.TERMINATE;\n                    }\n                    <span class=\"hljs-keyword\">return</span> FileVisitResult.CONTINUE;\n                }\n            });\n        } <span class=\"hljs-keyword\">catch</span> (Exception e){\n            e.printStackTrace();\n        }\n    }\n</code></div></pre>\n<p>（5）java.nio.file.Files 类包含许多其他的函数，有关这些方法的更多信息，请查看 java.nio.file.Files 类的 JavaDoc。</p>\n<h3><a id=\"3_AsynchronousFileChannel_186\"></a>3 AsynchronousFileChannel</h3>\n<p>在 Java 7 中，Java NIO 中添加了 AsynchronousFileChannel，也就是是异步地将数 据写入文件。</p>\n<h4><a id=\"31__AsynchronousFileChannel_189\"></a>3.1 创建 AsynchronousFileChannel</h4>\n<p>通过静态方法 open()创建<br />\n示例：</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n        <span class=\"hljs-type\">Path</span> <span class=\"hljs-variable\">path</span> <span class=\"hljs-operator\">=</span> Paths.get(<span class=\"hljs-string\">&quot;d:\\\\atguigu\\\\01.txt&quot;</span>);\n        <span class=\"hljs-keyword\">try</span> {\n            <span class=\"hljs-type\">AsynchronousFileChannel</span> <span class=\"hljs-variable\">fileChannel</span> <span class=\"hljs-operator\">=</span> AsynchronousFileChannel.open(path, StandardOpenOption.READ);\n        } <span class=\"hljs-keyword\">catch</span> (IOException e) {\n            e.printStackTrace();\n        }\n    }\n</code></div></pre>\n<p>open()方法的第一个参数指向与 AsynchronousFileChannel 相关联文件的 Path 实例。</p>\n<p>第二个参数是一个或多个打开选项，它告诉 AsynchronousFileChannel 在文件上执 行什么操作。在本例中，我们使用了 StandardOpenOption.READ 选项，表示该文件 将被打开阅读。</p>\n<h4><a id=\"32__Future__206\"></a>3.2 通过 Future 读取数据</h4>\n<p>可以通过两种方式从 AsynchronousFileChannel 读取数据。第一种方式是调用返回 Future 的 read()方法<br />\n示例：</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n        <span class=\"hljs-type\">Path</span> <span class=\"hljs-variable\">path</span> <span class=\"hljs-operator\">=</span> Paths.get(<span class=\"hljs-string\">&quot;d:\\\\atguigu\\\\001.txt&quot;</span>);\n        <span class=\"hljs-type\">AsynchronousFileChannel</span> <span class=\"hljs-variable\">fileChannel</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;\n        <span class=\"hljs-keyword\">try</span> {\n            fileChannel = AsynchronousFileChannel.open(path, StandardOpenOption.READ);\n        } <span class=\"hljs-keyword\">catch</span> (IOException e) {\n            e.printStackTrace();\n        }\n        <span class=\"hljs-type\">ByteBuffer</span> <span class=\"hljs-variable\">buffer</span> <span class=\"hljs-operator\">=</span> ByteBuffer.allocate(<span class=\"hljs-number\">1024</span>);\n        <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">position</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\n        Future&lt;Integer&gt; operation = fileChannel.read(buffer, position);\n        <span class=\"hljs-keyword\">while</span> (!operation.isDone()) ;\n        buffer.flip();\n        <span class=\"hljs-type\">byte</span>[] data = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">byte</span>[buffer.limit()];\n        buffer.get(data);\n        System.out.println(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">String</span>(data));\n        buffer.clear();\n    }\n</code></div></pre>\n<p>上述代码：<br />\n（1）创建了一个 AsynchronousFileChannel。<br />\n（2）创建一个 ByteBuffer，它被传递给 read()方法作为参数，以及一个 0 的位置。<br />\n（3）在调用 read()之后，循环，直到返回的 isDone()方法返回 true。<br />\n（4）读取操作完成后，数据读取到 ByteBuffer 中，然后打印到 System.out 中。</p>\n<h4><a id=\"33__CompletionHandler__235\"></a>3.3 通过 CompletionHandler 读取数据</h4>\n<p>第二种方法是调用 read()方法，该方法将一个 CompletionHandler 作为参数<br />\n示例：</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\">    <span class=\"hljs-meta\">@Test</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">test01</span><span class=\"hljs-params\">()</span> {\n        <span class=\"hljs-type\">Path</span> <span class=\"hljs-variable\">path</span> <span class=\"hljs-operator\">=</span> Paths.get(<span class=\"hljs-string\">&quot;d:\\\\atguigu\\\\001.txt&quot;</span>);\n        <span class=\"hljs-type\">AsynchronousFileChannel</span> <span class=\"hljs-variable\">fileChannel</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;\n        <span class=\"hljs-keyword\">try</span> {\n            fileChannel = AsynchronousFileChannel.open(path, StandardOpenOption.READ);\n        } <span class=\"hljs-keyword\">catch</span> (IOException e) {\n            e.printStackTrace();\n        }\n        <span class=\"hljs-type\">ByteBuffer</span> <span class=\"hljs-variable\">buffer</span> <span class=\"hljs-operator\">=</span> ByteBuffer.allocate(<span class=\"hljs-number\">1024</span>);\n        <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">position</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\n        fileChannel.read(buffer, position, buffer, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">CompletionHandler</span>&lt;Integer, ByteBuffer&gt;() {\n            <span class=\"hljs-meta\">@Override</span>\n            <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">completed</span><span class=\"hljs-params\">(Integer result, ByteBuffer attachment)</span> {\n                System.out.println(<span class=\"hljs-string\">&quot;result = &quot;</span> + result);\n                attachment.flip();\n                <span class=\"hljs-type\">byte</span>[] data = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">byte</span>[attachment.limit()];\n                attachment.get(data);\n                System.out.println(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">String</span>(data));\n                attachment.clear();\n            }\n\n            <span class=\"hljs-meta\">@Override</span>\n            <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">failed</span><span class=\"hljs-params\">(Throwable exc, ByteBuffer attachment)</span> {\n            }\n        });\n    }\n</code></div></pre>\n<p>（1）读取操作完成，将调用 CompletionHandler 的 completed()方法。<br />\n（2）对于 completed()方法的参数传递一个整数，它告诉我们读取了多少字节，以及 传递给 read()方法的“附件”。“附件”是 read()方法的第三个参数。在本代码中， 它是 ByteBuffer，数据也被读取。<br />\n（3）如果读取操作失败，则将调用 CompletionHandler 的 failed()方法。</p>\n<h4><a id=\"34__Future__271\"></a>3.4 通过 Future 写数据</h4>\n<p>和读取一样，可以通过两种方式将数据写入一个 AsynchronousFileChannel<br />\n示例：</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\">    <span class=\"hljs-meta\">@Test</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">test01</span><span class=\"hljs-params\">()</span> {\n        <span class=\"hljs-type\">Path</span> <span class=\"hljs-variable\">path</span> <span class=\"hljs-operator\">=</span> Paths.get(<span class=\"hljs-string\">&quot;d:\\\\atguigu\\\\001.txt&quot;</span>);\n        <span class=\"hljs-type\">AsynchronousFileChannel</span> <span class=\"hljs-variable\">fileChannel</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;\n        <span class=\"hljs-keyword\">try</span> {\n            fileChannel = AsynchronousFileChannel.open(path, StandardOpenOption.WRITE);\n        } <span class=\"hljs-keyword\">catch</span> (IOException e) {\n            e.printStackTrace();\n        }\n        <span class=\"hljs-type\">ByteBuffer</span> <span class=\"hljs-variable\">buffer</span> <span class=\"hljs-operator\">=</span> ByteBuffer.allocate(<span class=\"hljs-number\">1024</span>);\n        <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">position</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\n        buffer.put(<span class=\"hljs-string\">&quot;atguigu data&quot;</span>.getBytes());\n        buffer.flip();\n        Future&lt;Integer&gt; operation = fileChannel.write(buffer, position);\n        buffer.clear();\n        <span class=\"hljs-keyword\">while</span> (!operation.isDone()) ;\n        System.out.println(<span class=\"hljs-string\">&quot;Write over&quot;</span>);\n    }\n</code></div></pre>\n<p>首先，AsynchronousFileChannel 以写模式打开。然后创建一个 ByteBuffer，并将 一些数据写入其中。然后，ByteBuffer 中的数据被写入到文件中。最后，示例检查返 回的 Future，以查看写操作完成时的情况。</p>\n<p>注意，文件必须已经存在。如果该文件不存在，那么 write()方法将抛出一个 java.nio.file.NoSuchFileException。</p>\n<h4><a id=\"35__CompletionHandler__298\"></a>3.5 通过 CompletionHandler 写数据</h4>\n<p>示例：</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\">    <span class=\"hljs-meta\">@Test</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">test01</span><span class=\"hljs-params\">()</span> {\n        <span class=\"hljs-type\">Path</span> <span class=\"hljs-variable\">path</span> <span class=\"hljs-operator\">=</span> Paths.get(<span class=\"hljs-string\">&quot;d:\\\\atguigu\\\\001.txt&quot;</span>);\n        <span class=\"hljs-keyword\">if</span> (!Files.exists(path)) {\n            <span class=\"hljs-keyword\">try</span> {\n                Files.createFile(path);\n            } <span class=\"hljs-keyword\">catch</span> (IOException e) {\n                e.printStackTrace();\n            }\n        }\n        <span class=\"hljs-type\">AsynchronousFileChannel</span> <span class=\"hljs-variable\">fileChannel</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;\n        <span class=\"hljs-keyword\">try</span> {\n            fileChannel = AsynchronousFileChannel.open(path, StandardOpenOption.WRITE);\n        } <span class=\"hljs-keyword\">catch</span> (IOException e) {\n            e.printStackTrace();\n        }\n        <span class=\"hljs-type\">ByteBuffer</span> <span class=\"hljs-variable\">buffer</span> <span class=\"hljs-operator\">=</span> ByteBuffer.allocate(<span class=\"hljs-number\">1024</span>);\n        <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">position</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\n        buffer.put(<span class=\"hljs-string\">&quot;atguigu data&quot;</span>.getBytes());\n        buffer.flip();\n        fileChannel.write(buffer, position, buffer, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">CompletionHandler</span>&lt;Integer, ByteBuffer&gt;() {\n            <span class=\"hljs-meta\">@Override</span>\n            <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">completed</span><span class=\"hljs-params\">(Integer result, ByteBuffer attachment)</span> {\n                System.out.println(<span class=\"hljs-string\">&quot;bytes written: &quot;</span> + result);\n            }\n\n            <span class=\"hljs-meta\">@Override</span>\n            <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">failed</span><span class=\"hljs-params\">(Throwable exc, ByteBuffer attachment)</span> {\n                System.out.println(<span class=\"hljs-string\">&quot;Write failed&quot;</span>);\n                exc.printStackTrace();\n            }\n        });\n    }\n</code></div></pre>\n<p>当写操作完成时，将会调用 CompletionHandler 的 completed()方法。如果写失败， 则会调用 failed()方法。</p>\n<h3><a id=\"4_Charset_337\"></a>4 字符集（Charset）</h3>\n<p>java 中使用 Charset 来表示字符集编码对象</p>\n<p>Charset 常用静态方法</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> Charset <span class=\"hljs-title function_\">forName</span><span class=\"hljs-params\">(String charsetName)</span><span class=\"hljs-comment\">//通过编码类型获得 Charset 对 象</span>\n</code></div></pre>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> SortedMap&lt;String,Charset&gt; <span class=\"hljs-title function_\">availableCharsets</span><span class=\"hljs-params\">()</span><span class=\"hljs-comment\">//获得系统支持的所有 编码方式</span>\n</code></div></pre>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> Charset <span class=\"hljs-title function_\">defaultCharset</span><span class=\"hljs-params\">()</span><span class=\"hljs-comment\">//获得虚拟机默认的编码方式</span>\n</code></div></pre>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">isSupported</span><span class=\"hljs-params\">(String charsetName)</span><span class=\"hljs-comment\">//判断是否支持该编码类型</span>\n</code></div></pre>\n<p>Charset 常用普通方法</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">final</span> String <span class=\"hljs-title function_\">name</span><span class=\"hljs-params\">()</span><span class=\"hljs-comment\">//获得 Charset 对象的编码类型(String)</span>\n</code></div></pre>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">abstract</span> CharsetEncoder <span class=\"hljs-title function_\">newEncoder</span><span class=\"hljs-params\">()</span><span class=\"hljs-comment\">//获得编码器对象</span>\n</code></div></pre>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">abstract</span> CharsetDecoder <span class=\"hljs-title function_\">newDecoder</span><span class=\"hljs-params\">()</span><span class=\"hljs-comment\">//获得解码器对象</span>\n</code></div></pre>\n<p>代码示例：</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> Exception {\n        <span class=\"hljs-comment\">// 获取CharSet对象</span>\n        <span class=\"hljs-type\">Charset</span> <span class=\"hljs-variable\">charset</span> <span class=\"hljs-operator\">=</span> Charset.forName(<span class=\"hljs-string\">&quot;UTF-8&quot;</span>);\n        <span class=\"hljs-comment\">//获取编码器对象</span>\n        <span class=\"hljs-type\">CharsetEncoder</span> <span class=\"hljs-variable\">charsetEncoder</span> <span class=\"hljs-operator\">=</span> charset.newEncoder();\n        <span class=\"hljs-comment\">//创建缓冲区</span>\n        <span class=\"hljs-type\">CharBuffer</span> <span class=\"hljs-variable\">charBuffer</span> <span class=\"hljs-operator\">=</span> CharBuffer.allocate(<span class=\"hljs-number\">1024</span>);\n        charBuffer.put(<span class=\"hljs-string\">&quot;jzj漫漫长路&quot;</span>);\n        charBuffer.flip();\n        <span class=\"hljs-comment\">//编码</span>\n        <span class=\"hljs-type\">ByteBuffer</span> <span class=\"hljs-variable\">byteBuffer</span> <span class=\"hljs-operator\">=</span> charsetEncoder.encode(charBuffer);\n        System.out.println(<span class=\"hljs-string\">&quot;编码之后结果：&quot;</span>);\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; byteBuffer.limit(); i++) {\n            System.out.println(byteBuffer.get());\n        }\n        <span class=\"hljs-comment\">//获取解码器对象</span>\n        byteBuffer.flip();\n        <span class=\"hljs-type\">CharsetDecoder</span> <span class=\"hljs-variable\">charsetDecoder</span> <span class=\"hljs-operator\">=</span> charset.newDecoder();\n        <span class=\"hljs-comment\">//解码</span>\n        <span class=\"hljs-type\">CharBuffer</span> <span class=\"hljs-variable\">decode</span> <span class=\"hljs-operator\">=</span> charsetDecoder.decode(byteBuffer);\n        System.out.println(<span class=\"hljs-string\">&quot;解码后：&quot;</span>);\n        System.out.println(decode.toString());\n        <span class=\"hljs-comment\">//使用GBK解码</span>\n        <span class=\"hljs-type\">Charset</span> <span class=\"hljs-variable\">charset1</span> <span class=\"hljs-operator\">=</span> Charset.forName(<span class=\"hljs-string\">&quot;GBK&quot;</span>);\n        byteBuffer.flip();\n        <span class=\"hljs-type\">CharBuffer</span> <span class=\"hljs-variable\">charBuffer2</span> <span class=\"hljs-operator\">=</span> charset1.decode(byteBuffer);\n        System.out.println(<span class=\"hljs-string\">&quot;使用其他编码进行解码：&quot;</span>);\n        System.out.println(charBuffer2);\n\n        <span class=\"hljs-comment\">//获取CharSet所支持的字符编码</span>\n        Map&lt;String, Charset&gt; map = Charset.availableCharsets();\n        Set&lt;Map.Entry&lt;String, Charset&gt;&gt; set = map.entrySet();\n        <span class=\"hljs-keyword\">for</span> (Map.Entry&lt;String, Charset&gt; entry : set) {\n            System.out.println(entry.getKey()+<span class=\"hljs-string\">&quot;=&quot;</span>+entry.getValue().toString());\n        }\n    }\n</code></div></pre>\n');
INSERT INTO `article_content` VALUES ('8556d1aadfebf82abaa7e2159d499d8b', '### 1 Buffer 简介\nJava NIO 中的 Buffer 用于和 NIO 通道进行交互。数据是从通道读入缓冲区，从缓冲 区写入到通道中的。\n::: hljs-center\n\n![image.png](https://vue-vblog.oss-cn-shenzhen.aliyuncs.com/article/2022/10/08/ff63cf22b4fb456fa17b1bd67c58204d.png)\n\n:::\n\n缓冲区 ==本质上是一块可以写入数据，然后可以从中读取数据的内存== 。这块内存被包装 成 NIO Buffer 对象，并提供了一组方法，用来方便的访问该块内存。缓冲区实际上是 一个容器对象，更直接的说，其实就是一个数组，==在 NIO 库中，所有数据都是用缓冲 区处理的== 。在读取数据时，它是直接读到缓冲区中的； 在写入数据时，它也是写入到 缓冲区中的；任何时候访问 NIO 中的数据，都是将它放到缓冲区中。而在面向流 I/O 系统中，所有数据都是直接写入或者直接将数据读取到 Stream 对象中。 在 NIO 中，所有的缓冲区类型都继承于抽象类 Buffer，最常用的就是 ByteBuffer， 对于 Java 中的基本类型，基本都有一个具体 Buffer 类型与之相对应，它们之间的继 承关系如下图所示：\n::: hljs-center\n\n![image.png](https://vue-vblog.oss-cn-shenzhen.aliyuncs.com/article/2022/10/08/e77b8d6b861b430c9dec09ed3d4b54e3.png)\n\n:::\n\n### 2 Buffer 的基本用法\n\n使用 Buffer 读写数据，一般遵循以下四个步骤：\n- 写入数据到 Buffer\n- 调用 flip()方法\n- 从 Buffer 中读取数据\n- 调用 clear()方法或者 compact()方法\n\n\n当向 buffer 写入数据时，buffer 会记录下写了多少数据。一旦要读取数据，需要通过 flip()方法将 Buffer 从写模式切换到读模式。在读模式下，可以读取之前写入到 buffer 的所有数据。一旦读完了所有的数据，就需要清空缓冲区，让它可以再次被写入。有 两种方式能清空缓冲区：调用 clear()或 compact()方法。clear()方法会清空整个缓冲 区。compact()方法只会清除已经读过的数据。任何未读的数据都被移到缓冲区的起 始处，新写入的数据将放到缓冲区未读数据的后面。\n\n使用 Buffer 的例子：\n```java\npublic class BufferDemo01 {\n    @Test\n    public void buffer01() throws Exception {\n        //FileChannel\n        RandomAccessFile aFile = new RandomAccessFile(\"d:\\\\111.txt\",\"rw\");\n        FileChannel channel = aFile.getChannel();\n        //创建buffer,大小\n        ByteBuffer buffer = ByteBuffer.allocate(1024);\n        //读\n        int bytesRead = channel.read(buffer);\n        while (bytesRead != -1){\n            //read模式\n            buffer.flip();\n            while (buffer.hasRemaining()){\n                System.out.println((char)buffer.get());\n            }\n            buffer.clear();\n            bytesRead = channel.read(buffer);\n        }\n        aFile.close();\n    }\n\n    @Test\n    public void buffer02() throws Exception{\n        //创建buffer\n        IntBuffer buffer = IntBuffer.allocate(8);\n        //buffer 放\n        for (int i = 0; i < buffer.capacity(); i++) {\n            int j =2*(i+1);\n            buffer.put(j);\n        }\n        //重置缓冲区\n        buffer.flip();\n        //获取\n        while (buffer.hasRemaining()){\n            int i = buffer.get();\n            System.out.println(i+\" \");\n        }\n    }\n}\n```\n### 3 Buffer 的 capacity、position 和 limit\n为了理解 Buffer 的工作原理，需要熟悉它的三个属性：\n- Capacity\n- Position\n- limit\n\nposition 和 limit 的含义取决于 Buffer 处在读模式还是写模式。不管 Buffer 处在什么 模式，capacity 的含义总是一样的。\n这里有一个关于 capacity，position 和 limit 在读写模式中的说明\n::: hljs-center\n\n![image.png](https://vue-vblog.oss-cn-shenzhen.aliyuncs.com/article/2022/10/08/1d35274b372541158b8b959ff27ddeb1.png)\n\n:::\n\n- capacity\n作为一个内存块，Buffer 有一个固定的大小值，也叫“capacity”.你只能往里写 capacity 个 byte、long，char 等类型。一旦 Buffer 满了，需要将其清空（通过读数 据或者清除数据）才能继续写数据往里写数据。\n- position\n1）写数据到 Buffer 中时，position 表示写入数据的当前位置，position 的初始值为 0。当一个 byte、long 等数据写到 Buffer 后， position 会向下移动到下一个可插入 数据的 Buffer 单元。position 最大可为 capacity – 1（因为 position 的初始值为 0）。\n2）读数据到 Buffer 中时，position 表示读入数据的当前位置，如 position=2 时表 示已开始读入了 3 个 byte，或从第 3 个 byte 开始读取。通过 ByteBuffer.flip()切换到 读模式时 position 会被重置为 0，当 Buffer 从 position 读入数据后，position 会下 移到下一个可读入的数据 Buffer 单元。\n\n- limit\n1）写数据时，limit 表示可对 Buffer 最多写入多少个数据。写模式下，limit 等于 Buffer 的 capacity。\n2）读数据时，limit 表示 Buffer 里有多少可读数据（not null 的数据），因此能读到 之前写入的所有数据（limit 被设置成已写数据的数量，这个值在写模式下就是 position）。\n\n### 4 Buffer 的类型\nJava NIO 有以下 Buffer 类型\n- ByteBuffer\n- MappedByteBuffer\n- CharBuffer\n- DoubleBuffer\n- FloatBuffer\n- IntBuffer\n- LongBuffer\n- ShortBuffer\n\n\n这些 Buffer 类型代表了不同的数据类型。换句话说，就是可以通过 char，short，int， long，float 或 double 类型来操作缓冲区中的字节。\n\n### 5 Buffer 分配和写数据\n#### 5.1 Buffer 分配\n要想获得一个 Buffer 对象首先要进行分配。 每一个 Buffer 类都有一个 allocate 方法。 下面是一个分配 48 字节 capacity 的 ByteBuffer 的例子。\n```java\nByteBuffer buf = ByteBuffer.allocate(48);\n```\n这是分配一个可存储 1024 个字符的 CharBuffer：\n```java\nCharBuffer buf = CharBuffer.allocate(1024);\n```\n#### 5.2 向 Buffer 中写数据\n写数据到 Buffer 有两种方式：\n（1）从 Channel 写到 Buffer。\n（2）通过 Buffer 的 put()方法写到 Buffer 里。\n从 Channel 写到 Buffer 的例子\n```java\nint bytesRead = inChannel.read(buf); //read into buffer\n```\n通过 put 方法写 Buffer 的例子：\n```java\nbuf.put(127);\n```\nput 方法有很多版本，允许你以不同的方式把数据写入到 Buffer 中。例如， 写到一个 指定的位置，或者把一个字节数组写入到 Buffer\n#### 5.3 flip()方法\nflip 方法将 Buffer 从写模式切换到读模式。调用 flip()方法会将 position 设回 0，并 将 limit 设置成之前 position 的值。换句话说，position 现在用于标记读的位置， limit 表示之前写进了多少个 byte、char 等 （现在能读取多少个 byte、char 等）。\n\n### 6 从 Buffer 中读取数据\n从 Buffer 中读取数据有两种方式：\n（1）从 Buffer 读取数据到 Channel。 \n（2）使用 get()方法从 Buffer 中读取数据。\n从 Buffer 读取数据到 Channel 的例子：\n```java\n//read from buffer into channel. \nint bytesWritten = inChannel.write(buf);\n```\n使用 get()方法从 Buffer 中读取数据的例子\n```java\nbyte aByte = buf.get();\n```\nget 方法有很多版本，允许你以不同的方式从 Buffer 中读取数据。例如，从指定 position 读取，或者从 Buffer 中读取数据到字节数组。\n\n### 7 Buffer 几个方法\n#### 7.1 rewind()方法\nBuffer.rewind()将 position 设回 0，所以你可以重读 Buffer 中的所有数据。limit 保 持不变，仍然表示能从 Buffer 中读取多少个元素（byte、char 等）。\n\n#### 7.2 clear()与 compact()方法\n一旦读完 Buffer 中的数据，需要让 Buffer 准备好再次被写入。可以通过 clear()或 compact()方法来完成。\n\n如果调用的是 clear()方法，position 将被设回 0，limit 被设置成 capacity 的值。换 句话说，Buffer 被清空了。Buffer 中的数据并未清除，只是这些标记告诉我们可以从 哪里开始往 Buffer 里写数据。\n\n如果 Buffer 中有一些未读的数据，调用 clear()方法，数据将“被遗忘”，意味着不再 有任何标记会告诉你哪些数据被读过，哪些还没有。\n\n如果 Buffer 中仍有未读的数据，且后续还需要这些数据，但是此时想要先先写些数据， 那么使用 compact()方法。\n\ncompact()方法将所有未读的数据拷贝到 Buffer 起始处。然后将 position 设到最后一 个未读元素正后面。limit 属性依然像 clear()方法一样，设置成 capacity。现在 Buffer 准备好写数据了，但是不会覆盖未读的数据。\n\n#### 7.3 mark()与 reset()方法\n通过调用 Buffer.mark()方法，可以标记 Buffer 中的一个特定 position。之后可以通 过调用 Buffer.reset()方法恢复到这个 position。例如：\n```java\nbuffer.mark(); \n//call buffer.get() a couple of times, e.g. during parsing. buffer.reset();\n//set position back to mark.\n```\n### 8 缓冲区操作\n#### 8.1 缓冲区分片\n在 NIO 中，除了可以分配或者包装一个缓冲区对象外，还可以根据现有的缓冲区对象 来创建一个子缓冲区，即在现有缓冲区上切出一片来作为一个新的缓冲区，但现有的 缓冲区与创建的子缓冲区在底层数组层面上是数据共享的，也就是说，子缓冲区相当 于是现有缓冲区的一个视图窗口。调用 slice()方法可以创建一个子缓冲区。\n\n```java\n//缓冲区分片\n    @Test\n    public void test01(){\n        ByteBuffer buffer = ByteBuffer.allocate(10);\n        for (int i = 0; i < buffer.capacity(); i++) {\n            buffer.put((byte)i);\n        }\n        //创建子缓冲区\n        buffer.position(3);\n        buffer.limit(7);\n        ByteBuffer slice = buffer.slice();\n\n        //改变子缓冲区内容\n        for (int i = 0; i < slice.capacity(); i++) {\n            byte b = slice.get(i);\n            b*=10;\n            slice.put(i,b);\n        }\n        buffer.position(0);\n        buffer.limit(buffer.capacity());\n        while (buffer.remaining()>0){\n            System.out.println(buffer.get());\n        }\n    }\n```\n\n#### 8.2 只读缓冲区\n\n只读缓冲区非常简单，可以读取它们，但是不能向它们写入数据。可以通过调用缓冲 区的 asReadOnlyBuffer()方法，将任何常规缓冲区转 换为只读缓冲区，这个方法返回 一个与原缓冲区完全相同的缓冲区，并与原缓冲区共享数据，只不过它是只读的。如 果原缓冲区的内容发生了变化，只读缓冲区的内容也随之发生变化：\n\n```java\n//只读缓冲区\n    @Test\n    public void test02(){\n        ByteBuffer buffer = ByteBuffer.allocate(10);\n        for (int i = 0; i < buffer.capacity(); i++) {\n            buffer.put((byte)i);\n        }\n        //创建只读缓冲区\n        ByteBuffer readOnlyBuffer = buffer.asReadOnlyBuffer();\n\n        for (int i = 0; i < buffer.capacity(); i++) {\n            byte b = buffer.get(i);\n            b*=10;\n            buffer.put(i,b);\n        }\n        readOnlyBuffer.position(0);\n        readOnlyBuffer.limit(buffer.capacity());\n        while (readOnlyBuffer.remaining()>0){\n            System.out.println(readOnlyBuffer.get());\n        }\n    }\n```\n如果尝试修改只读缓冲区的内容，则会报 ReadOnlyBufferException 异常。只读缓冲 区对于保护数据很有用。在将缓冲区传递给某个 对象的方法时，无法知道这个方法是 否会修改缓冲区中的数据。创建一个只读的缓冲区可以保证该缓冲区不会被修改。只 可以把常规缓冲区转换为只读缓冲区，而不能将只读的缓冲区转换为可写的缓冲区。\n\n#### 8.3 直接缓冲区\n直接缓冲区是为加快 I/O 速度，使用一种特殊方式为其分配内存的缓冲区，JDK 文档 中的描述为：给定一个直接字节缓冲区，Java 虚拟机将尽最大努力直接对它执行本机 I/O 操作。也就是说，它会在每一次调用底层操作系统的本机 I/O 操作之前(或之后)， 尝试避免将缓冲区的内容拷贝到一个中间缓冲区中 或者从一个中间缓冲区中拷贝数据。 要分配直接缓冲区，需要调用 allocateDirect()方法，而不是 allocate()方法，使用方 式与普通缓冲区并无区别。\n拷贝文件示例：\n```java\n//直接缓冲区\n    @Test\n    public void test03() throws Exception {\n        String infile = \"D:\\\\111.txt\";\n        FileInputStream fin = new FileInputStream(infile);\n        FileChannel finChannel = fin.getChannel();\n\n        String outfile = \"D:\\\\222.txt\";\n        FileOutputStream fout = new FileOutputStream(outfile);\n        FileChannel foutChannel = fout.getChannel();\n\n        //创建直接缓冲区\n        ByteBuffer buffer = ByteBuffer.allocateDirect(1024);\n        while (true){\n            buffer.clear();\n            int r = finChannel.read(buffer);\n            if(r==-1){\n                break;\n            }\n            buffer.flip();\n            foutChannel.write(buffer);\n        }\n    }\n```\n\n#### 8.4 内存映射文件 I/O\n内存映射文件 I/O 是一种读和写文件数据的方法，它可以比常规的基于流或者基于通 道的 I/O 快的多。内存映射文件 I/O 是通过使文件中的数据出现为 内存数组的内容来 完成的，这其初听起来似乎不过就是将整个文件读到内存中，但是事实上并不是这样。 一般来说，只有文件中实际读取或者写入的部分才会映射到内存中。 示例代码：\n\n```java\nstatic private final int start = 0; \nstatic private final int size = 1024;\n\n//内存映射文件\n    @Test\n    public void test04() throws Exception{\n        RandomAccessFile raf = new RandomAccessFile(\"d:\\\\111.txt\", \"rw\");\n        FileChannel fc = raf.getChannel();\n        MappedByteBuffer mbb = fc.map(FileChannel.MapMode.READ_WRITE, start, size);\n        mbb.put(0, (byte) 97);\n        mbb.put(1023, (byte) 122);\n        raf.close();\n    }\n```\n', '2022-10-08 16:37:01', '2022-10-09 10:48:29', '<h3><a id=\"1_Buffer__0\"></a>1 Buffer 简介</h3>\n<p>Java NIO 中的 Buffer 用于和 NIO 通道进行交互。数据是从通道读入缓冲区，从缓冲 区写入到通道中的。</p>\n<div class=\"hljs-center\">\n<p><img src=\"https://vue-vblog.oss-cn-shenzhen.aliyuncs.com/article/2022/10/08/ff63cf22b4fb456fa17b1bd67c58204d.png\" alt=\"image.png\" /></p>\n</div>\n<p>缓冲区 <mark>本质上是一块可以写入数据，然后可以从中读取数据的内存</mark> 。这块内存被包装 成 NIO Buffer 对象，并提供了一组方法，用来方便的访问该块内存。缓冲区实际上是 一个容器对象，更直接的说，其实就是一个数组，<mark>在 NIO 库中，所有数据都是用缓冲 区处理的</mark> 。在读取数据时，它是直接读到缓冲区中的； 在写入数据时，它也是写入到 缓冲区中的；任何时候访问 NIO 中的数据，都是将它放到缓冲区中。而在面向流 I/O 系统中，所有数据都是直接写入或者直接将数据读取到 Stream 对象中。 在 NIO 中，所有的缓冲区类型都继承于抽象类 Buffer，最常用的就是 ByteBuffer， 对于 Java 中的基本类型，基本都有一个具体 Buffer 类型与之相对应，它们之间的继 承关系如下图所示：</p>\n<div class=\"hljs-center\">\n<p><img src=\"https://vue-vblog.oss-cn-shenzhen.aliyuncs.com/article/2022/10/08/e77b8d6b861b430c9dec09ed3d4b54e3.png\" alt=\"image.png\" /></p>\n</div>\n<h3><a id=\"2_Buffer__15\"></a>2 Buffer 的基本用法</h3>\n<p>使用 Buffer 读写数据，一般遵循以下四个步骤：</p>\n<ul>\n<li>写入数据到 Buffer</li>\n<li>调用 flip()方法</li>\n<li>从 Buffer 中读取数据</li>\n<li>调用 clear()方法或者 compact()方法</li>\n</ul>\n<p>当向 buffer 写入数据时，buffer 会记录下写了多少数据。一旦要读取数据，需要通过 flip()方法将 Buffer 从写模式切换到读模式。在读模式下，可以读取之前写入到 buffer 的所有数据。一旦读完了所有的数据，就需要清空缓冲区，让它可以再次被写入。有 两种方式能清空缓冲区：调用 clear()或 compact()方法。clear()方法会清空整个缓冲 区。compact()方法只会清除已经读过的数据。任何未读的数据都被移到缓冲区的起 始处，新写入的数据将放到缓冲区未读数据的后面。</p>\n<p>使用 Buffer 的例子：</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">BufferDemo01</span> {\n    <span class=\"hljs-meta\">@Test</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">buffer01</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> Exception {\n        <span class=\"hljs-comment\">//FileChannel</span>\n        <span class=\"hljs-type\">RandomAccessFile</span> <span class=\"hljs-variable\">aFile</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RandomAccessFile</span>(<span class=\"hljs-string\">&quot;d:\\\\111.txt&quot;</span>,<span class=\"hljs-string\">&quot;rw&quot;</span>);\n        <span class=\"hljs-type\">FileChannel</span> <span class=\"hljs-variable\">channel</span> <span class=\"hljs-operator\">=</span> aFile.getChannel();\n        <span class=\"hljs-comment\">//创建buffer,大小</span>\n        <span class=\"hljs-type\">ByteBuffer</span> <span class=\"hljs-variable\">buffer</span> <span class=\"hljs-operator\">=</span> ByteBuffer.allocate(<span class=\"hljs-number\">1024</span>);\n        <span class=\"hljs-comment\">//读</span>\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">bytesRead</span> <span class=\"hljs-operator\">=</span> channel.read(buffer);\n        <span class=\"hljs-keyword\">while</span> (bytesRead != -<span class=\"hljs-number\">1</span>){\n            <span class=\"hljs-comment\">//read模式</span>\n            buffer.flip();\n            <span class=\"hljs-keyword\">while</span> (buffer.hasRemaining()){\n                System.out.println((<span class=\"hljs-type\">char</span>)buffer.get());\n            }\n            buffer.clear();\n            bytesRead = channel.read(buffer);\n        }\n        aFile.close();\n    }\n\n    <span class=\"hljs-meta\">@Test</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">buffer02</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> Exception{\n        <span class=\"hljs-comment\">//创建buffer</span>\n        <span class=\"hljs-type\">IntBuffer</span> <span class=\"hljs-variable\">buffer</span> <span class=\"hljs-operator\">=</span> IntBuffer.allocate(<span class=\"hljs-number\">8</span>);\n        <span class=\"hljs-comment\">//buffer 放</span>\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; buffer.capacity(); i++) {\n            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span><span class=\"hljs-number\">2</span>*(i+<span class=\"hljs-number\">1</span>);\n            buffer.put(j);\n        }\n        <span class=\"hljs-comment\">//重置缓冲区</span>\n        buffer.flip();\n        <span class=\"hljs-comment\">//获取</span>\n        <span class=\"hljs-keyword\">while</span> (buffer.hasRemaining()){\n            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> buffer.get();\n            System.out.println(i+<span class=\"hljs-string\">&quot; &quot;</span>);\n        }\n    }\n}\n</code></div></pre>\n<h3><a id=\"3_Buffer__capacityposition__limit_69\"></a>3 Buffer 的 capacity、position 和 limit</h3>\n<p>为了理解 Buffer 的工作原理，需要熟悉它的三个属性：</p>\n<ul>\n<li>Capacity</li>\n<li>Position</li>\n<li>limit</li>\n</ul>\n<p>position 和 limit 的含义取决于 Buffer 处在读模式还是写模式。不管 Buffer 处在什么 模式，capacity 的含义总是一样的。<br />\n这里有一个关于 capacity，position 和 limit 在读写模式中的说明</p>\n<div class=\"hljs-center\">\n<p><img src=\"https://vue-vblog.oss-cn-shenzhen.aliyuncs.com/article/2022/10/08/1d35274b372541158b8b959ff27ddeb1.png\" alt=\"image.png\" /></p>\n</div>\n<ul>\n<li>\n<p>capacity<br />\n作为一个内存块，Buffer 有一个固定的大小值，也叫“capacity”.你只能往里写 capacity 个 byte、long，char 等类型。一旦 Buffer 满了，需要将其清空（通过读数 据或者清除数据）才能继续写数据往里写数据。</p>\n</li>\n<li>\n<p>position<br />\n1）写数据到 Buffer 中时，position 表示写入数据的当前位置，position 的初始值为 0。当一个 byte、long 等数据写到 Buffer 后， position 会向下移动到下一个可插入 数据的 Buffer 单元。position 最大可为 capacity – 1（因为 position 的初始值为 0）。<br />\n2）读数据到 Buffer 中时，position 表示读入数据的当前位置，如 position=2 时表 示已开始读入了 3 个 byte，或从第 3 个 byte 开始读取。通过 ByteBuffer.flip()切换到 读模式时 position 会被重置为 0，当 Buffer 从 position 读入数据后，position 会下 移到下一个可读入的数据 Buffer 单元。</p>\n</li>\n<li>\n<p>limit<br />\n1）写数据时，limit 表示可对 Buffer 最多写入多少个数据。写模式下，limit 等于 Buffer 的 capacity。<br />\n2）读数据时，limit 表示 Buffer 里有多少可读数据（not null 的数据），因此能读到 之前写入的所有数据（limit 被设置成已写数据的数量，这个值在写模式下就是 position）。</p>\n</li>\n</ul>\n<h3><a id=\"4_Buffer__93\"></a>4 Buffer 的类型</h3>\n<p>Java NIO 有以下 Buffer 类型</p>\n<ul>\n<li>ByteBuffer</li>\n<li>MappedByteBuffer</li>\n<li>CharBuffer</li>\n<li>DoubleBuffer</li>\n<li>FloatBuffer</li>\n<li>IntBuffer</li>\n<li>LongBuffer</li>\n<li>ShortBuffer</li>\n</ul>\n<p>这些 Buffer 类型代表了不同的数据类型。换句话说，就是可以通过 char，short，int， long，float 或 double 类型来操作缓冲区中的字节。</p>\n<h3><a id=\"5_Buffer__107\"></a>5 Buffer 分配和写数据</h3>\n<h4><a id=\"51_Buffer__108\"></a>5.1 Buffer 分配</h4>\n<p>要想获得一个 Buffer 对象首先要进行分配。 每一个 Buffer 类都有一个 allocate 方法。 下面是一个分配 48 字节 capacity 的 ByteBuffer 的例子。</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-type\">ByteBuffer</span> <span class=\"hljs-variable\">buf</span> <span class=\"hljs-operator\">=</span> ByteBuffer.allocate(<span class=\"hljs-number\">48</span>);\n</code></div></pre>\n<p>这是分配一个可存储 1024 个字符的 CharBuffer：</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-type\">CharBuffer</span> <span class=\"hljs-variable\">buf</span> <span class=\"hljs-operator\">=</span> CharBuffer.allocate(<span class=\"hljs-number\">1024</span>);\n</code></div></pre>\n<h4><a id=\"52__Buffer__117\"></a>5.2 向 Buffer 中写数据</h4>\n<p>写数据到 Buffer 有两种方式：<br />\n（1）从 Channel 写到 Buffer。<br />\n（2）通过 Buffer 的 put()方法写到 Buffer 里。<br />\n从 Channel 写到 Buffer 的例子</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">bytesRead</span> <span class=\"hljs-operator\">=</span> inChannel.read(buf); <span class=\"hljs-comment\">//read into buffer</span>\n</code></div></pre>\n<p>通过 put 方法写 Buffer 的例子：</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\">buf.put(<span class=\"hljs-number\">127</span>);\n</code></div></pre>\n<p>put 方法有很多版本，允许你以不同的方式把数据写入到 Buffer 中。例如， 写到一个 指定的位置，或者把一个字节数组写入到 Buffer</p>\n<h4><a id=\"53_flip_130\"></a>5.3 flip()方法</h4>\n<p>flip 方法将 Buffer 从写模式切换到读模式。调用 flip()方法会将 position 设回 0，并 将 limit 设置成之前 position 的值。换句话说，position 现在用于标记读的位置， limit 表示之前写进了多少个 byte、char 等 （现在能读取多少个 byte、char 等）。</p>\n<h3><a id=\"6__Buffer__133\"></a>6 从 Buffer 中读取数据</h3>\n<p>从 Buffer 中读取数据有两种方式：<br />\n（1）从 Buffer 读取数据到 Channel。<br />\n（2）使用 get()方法从 Buffer 中读取数据。<br />\n从 Buffer 读取数据到 Channel 的例子：</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-comment\">//read from buffer into channel. </span>\n<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">bytesWritten</span> <span class=\"hljs-operator\">=</span> inChannel.write(buf);\n</code></div></pre>\n<p>使用 get()方法从 Buffer 中读取数据的例子</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-type\">byte</span> <span class=\"hljs-variable\">aByte</span> <span class=\"hljs-operator\">=</span> buf.get();\n</code></div></pre>\n<p>get 方法有很多版本，允许你以不同的方式从 Buffer 中读取数据。例如，从指定 position 读取，或者从 Buffer 中读取数据到字节数组。</p>\n<h3><a id=\"7_Buffer__148\"></a>7 Buffer 几个方法</h3>\n<h4><a id=\"71_rewind_149\"></a>7.1 rewind()方法</h4>\n<p>Buffer.rewind()将 position 设回 0，所以你可以重读 Buffer 中的所有数据。limit 保 持不变，仍然表示能从 Buffer 中读取多少个元素（byte、char 等）。</p>\n<h4><a id=\"72_clear_compact_152\"></a>7.2 clear()与 compact()方法</h4>\n<p>一旦读完 Buffer 中的数据，需要让 Buffer 准备好再次被写入。可以通过 clear()或 compact()方法来完成。</p>\n<p>如果调用的是 clear()方法，position 将被设回 0，limit 被设置成 capacity 的值。换 句话说，Buffer 被清空了。Buffer 中的数据并未清除，只是这些标记告诉我们可以从 哪里开始往 Buffer 里写数据。</p>\n<p>如果 Buffer 中有一些未读的数据，调用 clear()方法，数据将“被遗忘”，意味着不再 有任何标记会告诉你哪些数据被读过，哪些还没有。</p>\n<p>如果 Buffer 中仍有未读的数据，且后续还需要这些数据，但是此时想要先先写些数据， 那么使用 compact()方法。</p>\n<p>compact()方法将所有未读的数据拷贝到 Buffer 起始处。然后将 position 设到最后一 个未读元素正后面。limit 属性依然像 clear()方法一样，设置成 capacity。现在 Buffer 准备好写数据了，但是不会覆盖未读的数据。</p>\n<h4><a id=\"73_mark_reset_163\"></a>7.3 mark()与 reset()方法</h4>\n<p>通过调用 Buffer.mark()方法，可以标记 Buffer 中的一个特定 position。之后可以通 过调用 Buffer.reset()方法恢复到这个 position。例如：</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\">buffer.mark(); \n<span class=\"hljs-comment\">//call buffer.get() a couple of times, e.g. during parsing. buffer.reset();</span>\n<span class=\"hljs-comment\">//set position back to mark.</span>\n</code></div></pre>\n<h3><a id=\"8__170\"></a>8 缓冲区操作</h3>\n<h4><a id=\"81__171\"></a>8.1 缓冲区分片</h4>\n<p>在 NIO 中，除了可以分配或者包装一个缓冲区对象外，还可以根据现有的缓冲区对象 来创建一个子缓冲区，即在现有缓冲区上切出一片来作为一个新的缓冲区，但现有的 缓冲区与创建的子缓冲区在底层数组层面上是数据共享的，也就是说，子缓冲区相当 于是现有缓冲区的一个视图窗口。调用 slice()方法可以创建一个子缓冲区。</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-comment\">//缓冲区分片</span>\n    <span class=\"hljs-meta\">@Test</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">test01</span><span class=\"hljs-params\">()</span>{\n        <span class=\"hljs-type\">ByteBuffer</span> <span class=\"hljs-variable\">buffer</span> <span class=\"hljs-operator\">=</span> ByteBuffer.allocate(<span class=\"hljs-number\">10</span>);\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; buffer.capacity(); i++) {\n            buffer.put((<span class=\"hljs-type\">byte</span>)i);\n        }\n        <span class=\"hljs-comment\">//创建子缓冲区</span>\n        buffer.position(<span class=\"hljs-number\">3</span>);\n        buffer.limit(<span class=\"hljs-number\">7</span>);\n        <span class=\"hljs-type\">ByteBuffer</span> <span class=\"hljs-variable\">slice</span> <span class=\"hljs-operator\">=</span> buffer.slice();\n\n        <span class=\"hljs-comment\">//改变子缓冲区内容</span>\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; slice.capacity(); i++) {\n            <span class=\"hljs-type\">byte</span> <span class=\"hljs-variable\">b</span> <span class=\"hljs-operator\">=</span> slice.get(i);\n            b*=<span class=\"hljs-number\">10</span>;\n            slice.put(i,b);\n        }\n        buffer.position(<span class=\"hljs-number\">0</span>);\n        buffer.limit(buffer.capacity());\n        <span class=\"hljs-keyword\">while</span> (buffer.remaining()&gt;<span class=\"hljs-number\">0</span>){\n            System.out.println(buffer.get());\n        }\n    }\n</code></div></pre>\n<h4><a id=\"82__201\"></a>8.2 只读缓冲区</h4>\n<p>只读缓冲区非常简单，可以读取它们，但是不能向它们写入数据。可以通过调用缓冲 区的 asReadOnlyBuffer()方法，将任何常规缓冲区转 换为只读缓冲区，这个方法返回 一个与原缓冲区完全相同的缓冲区，并与原缓冲区共享数据，只不过它是只读的。如 果原缓冲区的内容发生了变化，只读缓冲区的内容也随之发生变化：</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-comment\">//只读缓冲区</span>\n    <span class=\"hljs-meta\">@Test</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">test02</span><span class=\"hljs-params\">()</span>{\n        <span class=\"hljs-type\">ByteBuffer</span> <span class=\"hljs-variable\">buffer</span> <span class=\"hljs-operator\">=</span> ByteBuffer.allocate(<span class=\"hljs-number\">10</span>);\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; buffer.capacity(); i++) {\n            buffer.put((<span class=\"hljs-type\">byte</span>)i);\n        }\n        <span class=\"hljs-comment\">//创建只读缓冲区</span>\n        <span class=\"hljs-type\">ByteBuffer</span> <span class=\"hljs-variable\">readOnlyBuffer</span> <span class=\"hljs-operator\">=</span> buffer.asReadOnlyBuffer();\n\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; buffer.capacity(); i++) {\n            <span class=\"hljs-type\">byte</span> <span class=\"hljs-variable\">b</span> <span class=\"hljs-operator\">=</span> buffer.get(i);\n            b*=<span class=\"hljs-number\">10</span>;\n            buffer.put(i,b);\n        }\n        readOnlyBuffer.position(<span class=\"hljs-number\">0</span>);\n        readOnlyBuffer.limit(buffer.capacity());\n        <span class=\"hljs-keyword\">while</span> (readOnlyBuffer.remaining()&gt;<span class=\"hljs-number\">0</span>){\n            System.out.println(readOnlyBuffer.get());\n        }\n    }\n</code></div></pre>\n<p>如果尝试修改只读缓冲区的内容，则会报 ReadOnlyBufferException 异常。只读缓冲 区对于保护数据很有用。在将缓冲区传递给某个 对象的方法时，无法知道这个方法是 否会修改缓冲区中的数据。创建一个只读的缓冲区可以保证该缓冲区不会被修改。只 可以把常规缓冲区转换为只读缓冲区，而不能将只读的缓冲区转换为可写的缓冲区。</p>\n<h4><a id=\"83__230\"></a>8.3 直接缓冲区</h4>\n<p>直接缓冲区是为加快 I/O 速度，使用一种特殊方式为其分配内存的缓冲区，JDK 文档 中的描述为：给定一个直接字节缓冲区，Java 虚拟机将尽最大努力直接对它执行本机 I/O 操作。也就是说，它会在每一次调用底层操作系统的本机 I/O 操作之前(或之后)， 尝试避免将缓冲区的内容拷贝到一个中间缓冲区中 或者从一个中间缓冲区中拷贝数据。 要分配直接缓冲区，需要调用 allocateDirect()方法，而不是 allocate()方法，使用方 式与普通缓冲区并无区别。<br />\n拷贝文件示例：</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-comment\">//直接缓冲区</span>\n    <span class=\"hljs-meta\">@Test</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">test03</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> Exception {\n        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">infile</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;D:\\\\111.txt&quot;</span>;\n        <span class=\"hljs-type\">FileInputStream</span> <span class=\"hljs-variable\">fin</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FileInputStream</span>(infile);\n        <span class=\"hljs-type\">FileChannel</span> <span class=\"hljs-variable\">finChannel</span> <span class=\"hljs-operator\">=</span> fin.getChannel();\n\n        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">outfile</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;D:\\\\222.txt&quot;</span>;\n        <span class=\"hljs-type\">FileOutputStream</span> <span class=\"hljs-variable\">fout</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FileOutputStream</span>(outfile);\n        <span class=\"hljs-type\">FileChannel</span> <span class=\"hljs-variable\">foutChannel</span> <span class=\"hljs-operator\">=</span> fout.getChannel();\n\n        <span class=\"hljs-comment\">//创建直接缓冲区</span>\n        <span class=\"hljs-type\">ByteBuffer</span> <span class=\"hljs-variable\">buffer</span> <span class=\"hljs-operator\">=</span> ByteBuffer.allocateDirect(<span class=\"hljs-number\">1024</span>);\n        <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>){\n            buffer.clear();\n            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">r</span> <span class=\"hljs-operator\">=</span> finChannel.read(buffer);\n            <span class=\"hljs-keyword\">if</span>(r==-<span class=\"hljs-number\">1</span>){\n                <span class=\"hljs-keyword\">break</span>;\n            }\n            buffer.flip();\n            foutChannel.write(buffer);\n        }\n    }\n</code></div></pre>\n<h4><a id=\"84__IO_259\"></a>8.4 内存映射文件 I/O</h4>\n<p>内存映射文件 I/O 是一种读和写文件数据的方法，它可以比常规的基于流或者基于通 道的 I/O 快的多。内存映射文件 I/O 是通过使文件中的数据出现为 内存数组的内容来 完成的，这其初听起来似乎不过就是将整个文件读到内存中，但是事实上并不是这样。 一般来说，只有文件中实际读取或者写入的部分才会映射到内存中。 示例代码：</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">start</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; \n<span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">size</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1024</span>;\n\n<span class=\"hljs-comment\">//内存映射文件</span>\n    <span class=\"hljs-meta\">@Test</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">test04</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> Exception{\n        <span class=\"hljs-type\">RandomAccessFile</span> <span class=\"hljs-variable\">raf</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RandomAccessFile</span>(<span class=\"hljs-string\">&quot;d:\\\\111.txt&quot;</span>, <span class=\"hljs-string\">&quot;rw&quot;</span>);\n        <span class=\"hljs-type\">FileChannel</span> <span class=\"hljs-variable\">fc</span> <span class=\"hljs-operator\">=</span> raf.getChannel();\n        <span class=\"hljs-type\">MappedByteBuffer</span> <span class=\"hljs-variable\">mbb</span> <span class=\"hljs-operator\">=</span> fc.map(FileChannel.MapMode.READ_WRITE, start, size);\n        mbb.put(<span class=\"hljs-number\">0</span>, (<span class=\"hljs-type\">byte</span>) <span class=\"hljs-number\">97</span>);\n        mbb.put(<span class=\"hljs-number\">1023</span>, (<span class=\"hljs-type\">byte</span>) <span class=\"hljs-number\">122</span>);\n        raf.close();\n    }\n</code></div></pre>\n');
INSERT INTO `article_content` VALUES ('ace86a2c5d5c94e559bbfe3158d342fc', '### 1 Channel 概述\nJava NIO 的通道类似流，但又有些不同：\n1. 既可以从通道中读取数据，又可以写数据到通道。但流的读写通常是单向的。\n2. 通道可以异步地读写。\n3. 通道中的数据总是要先读到一个 Buffer，或者总是要从一个 Buffer 中写入。\n\n正如上面所说，从通道读取数据到缓冲区，从缓冲区写入数据到通道。如下图所示：\n::: hljs-center\n\n![image.png](https://vue-vblog.oss-cn-shenzhen.aliyuncs.com/article/2022/09/30/1e486540ca1647729ae0d8ec82573a98.png)\n\n:::\n\n### 2 Channel 实现\n下面是 Java NIO 中最重要的 Channel 的实现：\n1. FileChannel（从文件中读写数据）\n2. DatagramChannel（能通过 UDP 读写网络中的数据）\n3. SocketChannel（能通过 TCP 读写网络中的数据）\n4. ServerSocketChannel（可以监听新进来的 TCP 连接，像 Web 服务器那样。对 每一个新进来的连接都会创建一个 SocketChannel）\n\n正如你所看到的，这些通道涵盖了 UDP 和 TCP 网络 IO，以及文件 IO\n\n### 3 FileChannel 介绍和示例\nFileChannel 类可以实现常用的 read，write 以及 scatter/gather 操作，同时它也提 供了很多专用于文件的新方法。这些方法中的许多都是我们所熟悉的文件操作。\n::: hljs-center\n\n![image.png](https://vue-vblog.oss-cn-shenzhen.aliyuncs.com/article/2022/09/30/04651f0d2f5a4406a16a901e27f75f95.png)\n\n:::\n\n下面是一个使用 FileChannel 读取数据到 Buffer 中的示例：\n```java\npublic class FileChannelDemo01 {\n    //FileChannel读取数据到buffer中\n    public static void main(String[] args) throws Exception {\n        //创建FileChannel\n        RandomAccessFile accessFile = new RandomAccessFile(\"d:\\\\333.txt\", \"rw\");\n        FileChannel channel = accessFile.getChannel();\n        //创建Buffer\n        ByteBuffer  buf = ByteBuffer.allocate(1024);\n        //读取数据到buffer中\n        int bytesRead = channel.read(buf);\n        while (bytesRead !=-1){\n            System.out.println(\"读取了：\"+bytesRead);\n            buf.flip();\n            while (buf.hasRemaining()){\n                System.out.println((char) buf.get());\n            }\n            buf.clear();\n            bytesRead = channel.read(buf);\n        }\n        accessFile.close();\n        System.out.println(\"结束了\");\n    }\n}\n```\n\nBuffer 通常的操作\n1. 将数据写入缓冲区\n2. 调用 buffer.flip() 反转读写模式\n3. 从缓冲区读取数据\n4. 调用 buffer.clear() 或 buffer.compact() 清除缓冲区内容\n\n### 4 FileChannel 操作详解\n\n#### 4.1 打开 FileChannel\n在使用 FileChannel 之前，必须先打开它。但是，我们无法直接打开一个 FileChannel，需要通过使用一个 InputStream、OutputStream 或 RandomAccessFile 来获取一个 FileChannel 实例。下面是通过 RandomAccessFile 打开 FileChannel 的示例：\n```java\nRandomAccessFile accessFile = new RandomAccessFile(\"d:\\\\333.txt\", \"rw\");\nFileChannel channel = accessFile.getChannel();\n```\n#### 4.2 从 FileChannel 读取数据\n调用多个 read()方法之一从 FileChannel 中读取数据。如：\n```java\nByteBuffer  buf = ByteBuffer.allocate(1024);\n//读取数据到buffer中\nint bytesRead = channel.read(buf);\n```\n首先，分配一个 Buffer。从 FileChannel 中读取的数据将被读到 Buffer 中。然后，调 用 FileChannel.read()方法。该方法将数据从 FileChannel 读取到 Buffer 中。read() 方法返回的 int 值表示了有多少字节被读到了 Buffer 中。如果返回-1，表示到了文件 末尾。\n\n####4.3 向 FileChannel 写数据\n使用 FileChannel.write()方法向 FileChannel 写数据，该方法的参数是一个 Buffer。 如：\n```java\npublic class FileChannelDemo02 {\n    public static void main(String[] args) throws Exception {\n        RandomAccessFile accessFile = new RandomAccessFile(\"d:\\\\111.txt\", \"rw\");\n        FileChannel channel = accessFile.getChannel();\n        //创建Buffer对象\n        ByteBuffer buffer = ByteBuffer.allocate(1024);\n        String newData = \"hello word\";\n        buffer.clear();\n        //写入内容\n        buffer.put(newData.getBytes(StandardCharsets.UTF_8));\n        buffer.flip();\n        //FileChannel完成最终实现\n        while (buffer.hasRemaining()){\n            channel.write(buffer);\n        }\n        channel.close();\n    }\n}\n```\n#### 4.4 关闭 FileChannel\n用完 FileChannel 后必须将其关闭。如：\n```java\nchannel.close();\n```\n\n#### 4.5 FileChannel 的 position 方法\n有时可能需要在 FileChannel 的某个特定位置进行数据的读/写操作。可以通过调用 position()方法获取 FileChannel 的当前位置。也可以通过调用 position(long pos)方 法设置 FileChannel 的当前位置。\n\n这里有两个例子:\n```java\nlong pos = channel.position(); \nchannel.position(pos +123);\n```\n如果将位置设置在文件结束符之后，然后试图从文件通道中读取数据，读方法将返回- 1 （文件结束标志）。\n如果将位置设置在文件结束符之后，然后向通道中写数据，文件将撑大到当前位置并 写入数据。这可能导致“文件空洞”，磁盘上物理文件中写入的数据间有空隙。\n\n#### 4.6 FileChannel 的 size 方法\nFileChannel 实例的 size()方法将返回该实例所关联文件的大小。如:\n\n```java\nlong fileSize = channel.size();\n```\n#### 4.7 FileChannel 的 truncate 方法\n可以使用 FileChannel.truncate()方法截取一个文件。截取文件时，文件将中指定长度 后面的部分将被删除。如：\n\n```java\nchannel.truncate(1024);\n```\n这个例子截取文件的前 1024 个字节。\n\n#### 4.8 FileChannel 的 force 方法\n\nFileChannel.force()方法将通道里尚未写入磁盘的数据强制写到磁盘上。出于性能方 面的考虑，操作系统会将数据缓存在内存中，所以无法保证写入到 FileChannel 里的 数据一定会即时写到磁盘上。要保证这一点，需要调用 force()方法。\n\nforce()方法有一个 boolean 类型的参数，指明是否同时将文件元数据（权限信息等） 写到磁盘上。\n\n#### 4.9 FileChannel 的 transferTo 和 transferFrom 方法\n通道之间的数据传输：\n如果两个通道中有一个是 FileChannel，那你可以直接将数据从一个 channel 传输到 另外一个 channel\n- transferFrom()方法\nFileChannel 的 transferFrom()方法可以将数据从源通道传输到 FileChannel 中（译 者注：这个方法在 JDK 文档中的解释为将字节从给定的可读取字节通道传输到此通道 的文件中）。下面是一个 FileChannel 完成文件间的复制的例子：\n```java\npublic class FileChannelDemo03 {\n    public static void main(String[] args)  throws Exception{\n        //创建两个通道\n        RandomAccessFile aFile = new RandomAccessFile(\"d:\\\\111.txt\", \"rw\");\n        FileChannel fromChannel = aFile.getChannel();\n\n        RandomAccessFile bFile = new RandomAccessFile(\"d:\\\\02.txt\", \"rw\");\n        FileChannel toChannel = bFile.getChannel();\n        //fromChannel 传输到 toChannel\n        long position = 0;\n        long size = fromChannel.size();\n        toChannel.transferFrom(fromChannel,position,size);\n\n        aFile.close();\n        bFile.close();\n        System.out.println(\"over!\");\n    }\n}\n```\n\n方法的输入参数 position 表示从 position 处开始向目标文件写入数据，count 表示最 多传输的字节数。如果源通道的剩余空间小于 count 个字节，则所传输的字节数要小 于请求的字节数。此外要注意，在 SoketChannel 的实现中，SocketChannel 只会传 输此刻准备好的数据（可能不足 count 字节）。因此，SocketChannel 可能不会将请 求的所有数据(count 个字节)全部传输到 FileChannel 中。\n\n- transferTo()方法\n\ntransferTo()方法将数据从 FileChannel 传输到其他的 channel 中。\n下面是一个 transferTo()方法的例子：\n```java\npublic class FileChannelDemo04 {\n    public static void main(String[] args) throws Exception {\n        //创建两个通道\n        RandomAccessFile aFile = new RandomAccessFile(\"d:\\\\111.txt\", \"rw\");\n        FileChannel fromChannel = aFile.getChannel();\n        RandomAccessFile bFile = new RandomAccessFile(\"d:\\\\03.txt\", \"rw\");\n        FileChannel toChannel = bFile.getChannel();\n        long position = 0;\n        long count = fromChannel.size();\n        fromChannel.transferTo(position, count, toChannel);\n        aFile.close();\n        bFile.close();\n        System.out.println(\"over!\");\n    }\n}\n```\n### 5 Scatter/Gather\nJava NIO 开始支持 scatter/gather，scatter/gather 用于描述从 Channel 中读取或 者写入到 Channel 的操作。\n\n==分散==（scatter）从 Channel 中读取是指在读操作时将读取的数据写入多个 buffer 中。 因此，Channel 将从 Channel 中读取的数据“分散（scatter）”到多个 Buffer 中。\n\n==聚集==（gather）写入 Channel 是指在写操作时将多个 buffer 的数据写入同一个 Channel，因此，Channel 将多个 Buffer 中的数据“聚集（gather）”后发送到 Channel。\n\nscatter / gather 经常用于需要将传输的数据分开处理的场合，例如传输一个由消息头 和消息体组成的消息，你可能会将消息体和消息头分散到不同的 buffer 中，这样你可 以方便的处理消息头和消息体。\n\n#### 5.1 Scattering Reads\nScattering Reads 是指数据从一个 channel 读取到多个 buffer 中。如下图描述：\n::: hljs-center\n\n![image.png](https://vue-vblog.oss-cn-shenzhen.aliyuncs.com/article/2022/09/30/3020d19255734776aea5f650ebd4946b.png)\n\n:::\n\n```java\nByteBuffer header = ByteBuffer.allocate(128); \nByteBuffer body = ByteBuffer.allocate(1024);\nByteBuffer[] bufferArray = { header, body }; \nchannel.read(bufferArray);\n```\n注意 buffer 首先被插入到数组，然后再将数组作为 channel.read() 的输入参数。 read()方法按照 buffer 在数组中的顺序将从 channel 中读取的数据写入到 buffer，当 一个 buffer 被写满后，channel 紧接着向另一个 buffer 中写。\n\nScattering Reads 在移动下一个 buffer 前，必须填满当前的 buffer，这也意味着它 不适用于动态消息(译者注：消息大小不固定)。换句话说，如果存在消息头和消息体， 消息头必须完成填充（例如 128byte），Scattering Reads 才能正常工作。\n\n#### 5.2 Gathering Writes\nGathering Writes 是指数据从多个 buffer 写入到同一个 channel。如下图描述：\n::: hljs-center\n\n![image.png](https://vue-vblog.oss-cn-shenzhen.aliyuncs.com/article/2022/09/30/175b692f36164285b91181519562fc1f.png)\n\n:::\n\n```java\nByteBuffer header = ByteBuffer.allocate(128); \nByteBuffer body = ByteBuffer.allocate(1024); \n//write data into buffers \nByteBuffer[] bufferArray = { header, body }; \nchannel.write(bufferArray);\n```\n\nbuffers 数组是 write()方法的入参，write()方法会按照 buffer 在数组中的顺序，将数 据写入到 channel，注意只有 position 和 limit 之间的数据才会被写入。因此，如果 一个 buffer 的容量为 128byte，但是仅仅包含 58byte 的数据，那么这 58byte 的数 据将被写入到 channel 中。因此与 Scattering Reads 相反，Gathering Writes 能较 好的处理动态消息。', '2022-09-30 15:13:36', '2022-10-08 16:25:20', '<h3><a id=\"1_Channel__0\"></a>1 Channel 概述</h3>\n<p>Java NIO 的通道类似流，但又有些不同：</p>\n<ol>\n<li>既可以从通道中读取数据，又可以写数据到通道。但流的读写通常是单向的。</li>\n<li>通道可以异步地读写。</li>\n<li>通道中的数据总是要先读到一个 Buffer，或者总是要从一个 Buffer 中写入。</li>\n</ol>\n<p>正如上面所说，从通道读取数据到缓冲区，从缓冲区写入数据到通道。如下图所示：</p>\n<div class=\"hljs-center\">\n<p><img src=\"https://vue-vblog.oss-cn-shenzhen.aliyuncs.com/article/2022/09/30/1e486540ca1647729ae0d8ec82573a98.png\" alt=\"image.png\" /></p>\n</div>\n<h3><a id=\"2_Channel__13\"></a>2 Channel 实现</h3>\n<p>下面是 Java NIO 中最重要的 Channel 的实现：</p>\n<ol>\n<li>FileChannel（从文件中读写数据）</li>\n<li>DatagramChannel（能通过 UDP 读写网络中的数据）</li>\n<li>SocketChannel（能通过 TCP 读写网络中的数据）</li>\n<li>ServerSocketChannel（可以监听新进来的 TCP 连接，像 Web 服务器那样。对 每一个新进来的连接都会创建一个 SocketChannel）</li>\n</ol>\n<p>正如你所看到的，这些通道涵盖了 UDP 和 TCP 网络 IO，以及文件 IO</p>\n<h3><a id=\"3_FileChannel__22\"></a>3 FileChannel 介绍和示例</h3>\n<p>FileChannel 类可以实现常用的 read，write 以及 scatter/gather 操作，同时它也提 供了很多专用于文件的新方法。这些方法中的许多都是我们所熟悉的文件操作。</p>\n<div class=\"hljs-center\">\n<p><img src=\"https://vue-vblog.oss-cn-shenzhen.aliyuncs.com/article/2022/09/30/04651f0d2f5a4406a16a901e27f75f95.png\" alt=\"image.png\" /></p>\n</div>\n<p>下面是一个使用 FileChannel 读取数据到 Buffer 中的示例：</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">FileChannelDemo01</span> {\n    <span class=\"hljs-comment\">//FileChannel读取数据到buffer中</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> Exception {\n        <span class=\"hljs-comment\">//创建FileChannel</span>\n        <span class=\"hljs-type\">RandomAccessFile</span> <span class=\"hljs-variable\">accessFile</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RandomAccessFile</span>(<span class=\"hljs-string\">&quot;d:\\\\333.txt&quot;</span>, <span class=\"hljs-string\">&quot;rw&quot;</span>);\n        <span class=\"hljs-type\">FileChannel</span> <span class=\"hljs-variable\">channel</span> <span class=\"hljs-operator\">=</span> accessFile.getChannel();\n        <span class=\"hljs-comment\">//创建Buffer</span>\n        <span class=\"hljs-type\">ByteBuffer</span>  <span class=\"hljs-variable\">buf</span> <span class=\"hljs-operator\">=</span> ByteBuffer.allocate(<span class=\"hljs-number\">1024</span>);\n        <span class=\"hljs-comment\">//读取数据到buffer中</span>\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">bytesRead</span> <span class=\"hljs-operator\">=</span> channel.read(buf);\n        <span class=\"hljs-keyword\">while</span> (bytesRead !=-<span class=\"hljs-number\">1</span>){\n            System.out.println(<span class=\"hljs-string\">&quot;读取了：&quot;</span>+bytesRead);\n            buf.flip();\n            <span class=\"hljs-keyword\">while</span> (buf.hasRemaining()){\n                System.out.println((<span class=\"hljs-type\">char</span>) buf.get());\n            }\n            buf.clear();\n            bytesRead = channel.read(buf);\n        }\n        accessFile.close();\n        System.out.println(<span class=\"hljs-string\">&quot;结束了&quot;</span>);\n    }\n}\n</code></div></pre>\n<p>Buffer 通常的操作</p>\n<ol>\n<li>将数据写入缓冲区</li>\n<li>调用 buffer.flip() 反转读写模式</li>\n<li>从缓冲区读取数据</li>\n<li>调用 buffer.clear() 或 buffer.compact() 清除缓冲区内容</li>\n</ol>\n<h3><a id=\"4_FileChannel__63\"></a>4 FileChannel 操作详解</h3>\n<h4><a id=\"41__FileChannel_65\"></a>4.1 打开 FileChannel</h4>\n<p>在使用 FileChannel 之前，必须先打开它。但是，我们无法直接打开一个 FileChannel，需要通过使用一个 InputStream、OutputStream 或 RandomAccessFile 来获取一个 FileChannel 实例。下面是通过 RandomAccessFile 打开 FileChannel 的示例：</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-type\">RandomAccessFile</span> <span class=\"hljs-variable\">accessFile</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RandomAccessFile</span>(<span class=\"hljs-string\">&quot;d:\\\\333.txt&quot;</span>, <span class=\"hljs-string\">&quot;rw&quot;</span>);\n<span class=\"hljs-type\">FileChannel</span> <span class=\"hljs-variable\">channel</span> <span class=\"hljs-operator\">=</span> accessFile.getChannel();\n</code></div></pre>\n<h4><a id=\"42__FileChannel__71\"></a>4.2 从 FileChannel 读取数据</h4>\n<p>调用多个 read()方法之一从 FileChannel 中读取数据。如：</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-type\">ByteBuffer</span>  <span class=\"hljs-variable\">buf</span> <span class=\"hljs-operator\">=</span> ByteBuffer.allocate(<span class=\"hljs-number\">1024</span>);\n<span class=\"hljs-comment\">//读取数据到buffer中</span>\n<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">bytesRead</span> <span class=\"hljs-operator\">=</span> channel.read(buf);\n</code></div></pre>\n<p>首先，分配一个 Buffer。从 FileChannel 中读取的数据将被读到 Buffer 中。然后，调 用 FileChannel.read()方法。该方法将数据从 FileChannel 读取到 Buffer 中。read() 方法返回的 int 值表示了有多少字节被读到了 Buffer 中。如果返回-1，表示到了文件 末尾。</p>\n<p>####4.3 向 FileChannel 写数据<br />\n使用 FileChannel.write()方法向 FileChannel 写数据，该方法的参数是一个 Buffer。 如：</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">FileChannelDemo02</span> {\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> Exception {\n        <span class=\"hljs-type\">RandomAccessFile</span> <span class=\"hljs-variable\">accessFile</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RandomAccessFile</span>(<span class=\"hljs-string\">&quot;d:\\\\111.txt&quot;</span>, <span class=\"hljs-string\">&quot;rw&quot;</span>);\n        <span class=\"hljs-type\">FileChannel</span> <span class=\"hljs-variable\">channel</span> <span class=\"hljs-operator\">=</span> accessFile.getChannel();\n        <span class=\"hljs-comment\">//创建Buffer对象</span>\n        <span class=\"hljs-type\">ByteBuffer</span> <span class=\"hljs-variable\">buffer</span> <span class=\"hljs-operator\">=</span> ByteBuffer.allocate(<span class=\"hljs-number\">1024</span>);\n        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">newData</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;hello word&quot;</span>;\n        buffer.clear();\n        <span class=\"hljs-comment\">//写入内容</span>\n        buffer.put(newData.getBytes(StandardCharsets.UTF_8));\n        buffer.flip();\n        <span class=\"hljs-comment\">//FileChannel完成最终实现</span>\n        <span class=\"hljs-keyword\">while</span> (buffer.hasRemaining()){\n            channel.write(buffer);\n        }\n        channel.close();\n    }\n}\n</code></div></pre>\n<h4><a id=\"44__FileChannel_102\"></a>4.4 关闭 FileChannel</h4>\n<p>用完 FileChannel 后必须将其关闭。如：</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\">channel.close();\n</code></div></pre>\n<h4><a id=\"45_FileChannel__position__108\"></a>4.5 FileChannel 的 position 方法</h4>\n<p>有时可能需要在 FileChannel 的某个特定位置进行数据的读/写操作。可以通过调用 position()方法获取 FileChannel 的当前位置。也可以通过调用 position(long pos)方 法设置 FileChannel 的当前位置。</p>\n<p>这里有两个例子:</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">pos</span> <span class=\"hljs-operator\">=</span> channel.position(); \nchannel.position(pos +<span class=\"hljs-number\">123</span>);\n</code></div></pre>\n<p>如果将位置设置在文件结束符之后，然后试图从文件通道中读取数据，读方法将返回- 1 （文件结束标志）。<br />\n如果将位置设置在文件结束符之后，然后向通道中写数据，文件将撑大到当前位置并 写入数据。这可能导致“文件空洞”，磁盘上物理文件中写入的数据间有空隙。</p>\n<h4><a id=\"46_FileChannel__size__119\"></a>4.6 FileChannel 的 size 方法</h4>\n<p>FileChannel 实例的 size()方法将返回该实例所关联文件的大小。如:</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">fileSize</span> <span class=\"hljs-operator\">=</span> channel.size();\n</code></div></pre>\n<h4><a id=\"47_FileChannel__truncate__125\"></a>4.7 FileChannel 的 truncate 方法</h4>\n<p>可以使用 FileChannel.truncate()方法截取一个文件。截取文件时，文件将中指定长度 后面的部分将被删除。如：</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\">channel.truncate(<span class=\"hljs-number\">1024</span>);\n</code></div></pre>\n<p>这个例子截取文件的前 1024 个字节。</p>\n<h4><a id=\"48_FileChannel__force__133\"></a>4.8 FileChannel 的 force 方法</h4>\n<p>FileChannel.force()方法将通道里尚未写入磁盘的数据强制写到磁盘上。出于性能方 面的考虑，操作系统会将数据缓存在内存中，所以无法保证写入到 FileChannel 里的 数据一定会即时写到磁盘上。要保证这一点，需要调用 force()方法。</p>\n<p>force()方法有一个 boolean 类型的参数，指明是否同时将文件元数据（权限信息等） 写到磁盘上。</p>\n<h4><a id=\"49_FileChannel__transferTo__transferFrom__139\"></a>4.9 FileChannel 的 transferTo 和 transferFrom 方法</h4>\n<p>通道之间的数据传输：<br />\n如果两个通道中有一个是 FileChannel，那你可以直接将数据从一个 channel 传输到 另外一个 channel</p>\n<ul>\n<li>transferFrom()方法<br />\nFileChannel 的 transferFrom()方法可以将数据从源通道传输到 FileChannel 中（译 者注：这个方法在 JDK 文档中的解释为将字节从给定的可读取字节通道传输到此通道 的文件中）。下面是一个 FileChannel 完成文件间的复制的例子：</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">FileChannelDemo03</span> {\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span>  <span class=\"hljs-keyword\">throws</span> Exception{\n        <span class=\"hljs-comment\">//创建两个通道</span>\n        <span class=\"hljs-type\">RandomAccessFile</span> <span class=\"hljs-variable\">aFile</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RandomAccessFile</span>(<span class=\"hljs-string\">&quot;d:\\\\111.txt&quot;</span>, <span class=\"hljs-string\">&quot;rw&quot;</span>);\n        <span class=\"hljs-type\">FileChannel</span> <span class=\"hljs-variable\">fromChannel</span> <span class=\"hljs-operator\">=</span> aFile.getChannel();\n\n        <span class=\"hljs-type\">RandomAccessFile</span> <span class=\"hljs-variable\">bFile</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RandomAccessFile</span>(<span class=\"hljs-string\">&quot;d:\\\\02.txt&quot;</span>, <span class=\"hljs-string\">&quot;rw&quot;</span>);\n        <span class=\"hljs-type\">FileChannel</span> <span class=\"hljs-variable\">toChannel</span> <span class=\"hljs-operator\">=</span> bFile.getChannel();\n        <span class=\"hljs-comment\">//fromChannel 传输到 toChannel</span>\n        <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">position</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\n        <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">size</span> <span class=\"hljs-operator\">=</span> fromChannel.size();\n        toChannel.transferFrom(fromChannel,position,size);\n\n        aFile.close();\n        bFile.close();\n        System.out.println(<span class=\"hljs-string\">&quot;over!&quot;</span>);\n    }\n}\n</code></div></pre>\n<p>方法的输入参数 position 表示从 position 处开始向目标文件写入数据，count 表示最 多传输的字节数。如果源通道的剩余空间小于 count 个字节，则所传输的字节数要小 于请求的字节数。此外要注意，在 SoketChannel 的实现中，SocketChannel 只会传 输此刻准备好的数据（可能不足 count 字节）。因此，SocketChannel 可能不会将请 求的所有数据(count 个字节)全部传输到 FileChannel 中。</p>\n<ul>\n<li>transferTo()方法</li>\n</ul>\n<p>transferTo()方法将数据从 FileChannel 传输到其他的 channel 中。<br />\n下面是一个 transferTo()方法的例子：</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">FileChannelDemo04</span> {\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> Exception {\n        <span class=\"hljs-comment\">//创建两个通道</span>\n        <span class=\"hljs-type\">RandomAccessFile</span> <span class=\"hljs-variable\">aFile</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RandomAccessFile</span>(<span class=\"hljs-string\">&quot;d:\\\\111.txt&quot;</span>, <span class=\"hljs-string\">&quot;rw&quot;</span>);\n        <span class=\"hljs-type\">FileChannel</span> <span class=\"hljs-variable\">fromChannel</span> <span class=\"hljs-operator\">=</span> aFile.getChannel();\n        <span class=\"hljs-type\">RandomAccessFile</span> <span class=\"hljs-variable\">bFile</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RandomAccessFile</span>(<span class=\"hljs-string\">&quot;d:\\\\03.txt&quot;</span>, <span class=\"hljs-string\">&quot;rw&quot;</span>);\n        <span class=\"hljs-type\">FileChannel</span> <span class=\"hljs-variable\">toChannel</span> <span class=\"hljs-operator\">=</span> bFile.getChannel();\n        <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">position</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\n        <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">count</span> <span class=\"hljs-operator\">=</span> fromChannel.size();\n        fromChannel.transferTo(position, count, toChannel);\n        aFile.close();\n        bFile.close();\n        System.out.println(<span class=\"hljs-string\">&quot;over!&quot;</span>);\n    }\n}\n</code></div></pre>\n<h3><a id=\"5_ScatterGather_188\"></a>5 Scatter/Gather</h3>\n<p>Java NIO 开始支持 scatter/gather，scatter/gather 用于描述从 Channel 中读取或 者写入到 Channel 的操作。</p>\n<p><mark>分散</mark>（scatter）从 Channel 中读取是指在读操作时将读取的数据写入多个 buffer 中。 因此，Channel 将从 Channel 中读取的数据“分散（scatter）”到多个 Buffer 中。</p>\n<p><mark>聚集</mark>（gather）写入 Channel 是指在写操作时将多个 buffer 的数据写入同一个 Channel，因此，Channel 将多个 Buffer 中的数据“聚集（gather）”后发送到 Channel。</p>\n<p>scatter / gather 经常用于需要将传输的数据分开处理的场合，例如传输一个由消息头 和消息体组成的消息，你可能会将消息体和消息头分散到不同的 buffer 中，这样你可 以方便的处理消息头和消息体。</p>\n<h4><a id=\"51_Scattering_Reads_197\"></a>5.1 Scattering Reads</h4>\n<p>Scattering Reads 是指数据从一个 channel 读取到多个 buffer 中。如下图描述：</p>\n<div class=\"hljs-center\">\n<p><img src=\"https://vue-vblog.oss-cn-shenzhen.aliyuncs.com/article/2022/09/30/3020d19255734776aea5f650ebd4946b.png\" alt=\"image.png\" /></p>\n</div>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-type\">ByteBuffer</span> <span class=\"hljs-variable\">header</span> <span class=\"hljs-operator\">=</span> ByteBuffer.allocate(<span class=\"hljs-number\">128</span>); \n<span class=\"hljs-type\">ByteBuffer</span> <span class=\"hljs-variable\">body</span> <span class=\"hljs-operator\">=</span> ByteBuffer.allocate(<span class=\"hljs-number\">1024</span>);\nByteBuffer[] bufferArray = { header, body }; \nchannel.read(bufferArray);\n</code></div></pre>\n<p>注意 buffer 首先被插入到数组，然后再将数组作为 channel.read() 的输入参数。 read()方法按照 buffer 在数组中的顺序将从 channel 中读取的数据写入到 buffer，当 一个 buffer 被写满后，channel 紧接着向另一个 buffer 中写。</p>\n<p>Scattering Reads 在移动下一个 buffer 前，必须填满当前的 buffer，这也意味着它 不适用于动态消息(译者注：消息大小不固定)。换句话说，如果存在消息头和消息体， 消息头必须完成填充（例如 128byte），Scattering Reads 才能正常工作。</p>\n<h4><a id=\"52_Gathering_Writes_215\"></a>5.2 Gathering Writes</h4>\n<p>Gathering Writes 是指数据从多个 buffer 写入到同一个 channel。如下图描述：</p>\n<div class=\"hljs-center\">\n<p><img src=\"https://vue-vblog.oss-cn-shenzhen.aliyuncs.com/article/2022/09/30/175b692f36164285b91181519562fc1f.png\" alt=\"image.png\" /></p>\n</div>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-type\">ByteBuffer</span> <span class=\"hljs-variable\">header</span> <span class=\"hljs-operator\">=</span> ByteBuffer.allocate(<span class=\"hljs-number\">128</span>); \n<span class=\"hljs-type\">ByteBuffer</span> <span class=\"hljs-variable\">body</span> <span class=\"hljs-operator\">=</span> ByteBuffer.allocate(<span class=\"hljs-number\">1024</span>); \n<span class=\"hljs-comment\">//write data into buffers </span>\nByteBuffer[] bufferArray = { header, body }; \nchannel.write(bufferArray);\n</code></div></pre>\n<p>buffers 数组是 write()方法的入参，write()方法会按照 buffer 在数组中的顺序，将数 据写入到 channel，注意只有 position 和 limit 之间的数据才会被写入。因此，如果 一个 buffer 的容量为 128byte，但是仅仅包含 58byte 的数据，那么这 58byte 的数 据将被写入到 channel 中。因此与 Scattering Reads 相反，Gathering Writes 能较 好的处理动态消息。</p>\n');
INSERT INTO `article_content` VALUES ('edb409243c0e1b8a819fe729b6566ab2', '### 1 Pipe\n\nJava NIO 管道是 2 个线程之间的单向数据连接。Pipe 有一个 source 通道和一个 sink 通道。数据会被写到 sink 通道，从 source 通道读取。\n\n::: hljs-center\n\n![image.png](https://vue-vblog.oss-cn-shenzhen.aliyuncs.com/article/2022/10/09/2f9b2e23b0414df2a415fbd52fca6338.png)\n\n:::\n\n#### 1.1 创建管道\n通过 Pipe.open()方法打开管道。\n```java\nPipe pipe = Pipe.open();\n```\n\n#### 1.2 写入管道\n要向管道写数据，需要访问 sink 通道。：\n```java\nPipe.SinkChannel sinkChannel = pipe.sink();\n```\n\n通过调用 SinkChannel 的 write()方法，将数据写入 SinkChannel：\n```java\nString newData = \"New String to write to file...\" + System.currentTimeMillis(); \nByteBuffer buf = ByteBuffer.allocate(48); \nbuf.clear(); buf.put(newData.getBytes()); \nbuf.flip(); \nwhile(buf.hasRemaining()) { \nsinkChannel.write(buf); \n}\n```\n\n#### 1.3 从管道读取数据\n从读取管道的数据，需要访问 source 通道，像这样：\n```java\nPipe.SourceChannel sourceChannel = pipe.source();\n```\n\n调用 source 通道的 read()方法来读取数据：\n```java\nByteBuffer buf = ByteBuffer.allocate(48); \nint bytesRead = sourceChannel.read(buf);\n```\nread()方法返回的 int 值会告诉我们多少字节被读进了缓冲区。\n\n#### 1.4 示例\n```java\npublic static void main(String[] args) throws Exception {\n        //获取管道\n        Pipe pipe = Pipe.open();\n        //获取sink通道\n        Pipe.SinkChannel sinkChannel = pipe.sink();\n        //创建缓冲区\n        ByteBuffer byteBuffer = ByteBuffer.allocate(1024);\n        byteBuffer.put(\"Jzjzzzz\".getBytes(StandardCharsets.UTF_8));\n        byteBuffer.flip();\n        //写入数据\n        sinkChannel.write(byteBuffer);\n        //获取source通道\n        Pipe.SourceChannel sourceChannel = pipe.source();\n        //创建缓冲区,读取数据\n        //ByteBuffer byteBuffer2 = ByteBuffer.allocate(1024);\n        byteBuffer.flip();\n        int length = sourceChannel.read(byteBuffer);\n        System.out.println(new String(byteBuffer.array(),0,length));\n        //关闭通道\n        sourceChannel.close();\n        sinkChannel.close();\n    }\n```\n\n### 2 FileLock\n\n#### 2.1 FileLock 简介\n文件锁在 OS 中很常见，如果多个程序同时访问、修改同一个文件，很容易因为文件 数据不同步而出现问题。给文件加一个锁，同一时间，只能有一个程序修改此文件， 或者程序都只能读此文件，这就解决了同步问题。\n\n文件锁是进程级别的，不是线程级别的。文件锁可以解决多个进程并发访问、修改同 一个文件的问题，但不能解决多线程并发访问、修改同一文件的问题。使用文件锁时， 同一进程内的多个线程，可以同时访问、修改此文件。\n\n文件锁是当前程序所属的 JVM 实例持有的，一旦获取到文件锁（对文件加锁），要调用 release()，或者关闭对应的 FileChannel 对象，或者当前 JVM 退出，才会释放这个锁。\n\n一旦某个进程（比如说 JVM 实例）对某个文件加锁，则在释放这个锁之前，此进程不 能再对此文件加锁，就是说 JVM 实例在同一文件上的文件锁是不重叠的（进程级别不 能重复在同一文件上获取锁）。\n\n#### 2.2 文件锁分类\n==排它锁==：又叫独占锁。对文件加排它锁后，该进程可以对此文件进行读写，该进程独 占此文件，其他进程不能读写此文件，直到该进程释放文件锁。\n\n==共享锁==：某个进程对文件加共享锁，其他进程也可以访问此文件，但这些进程都只能 读此文件，不能写。线程是安全的。只要还有一个进程持有共享锁，此文件就只能读， 不能写。\n\n#### 2.3 使用示例\n```java\n//创建 FileChannel 对象，文件锁只能通过 FileChannel 对象来使用 \nFileChannel fileChannel=new FileOutputStream(\"./1.txt\").getChannel(); \n//对文件加锁 \nFileLock lock=fileChannel.lock(); \n//对此文件进行一些读写操作。 \n//....... \n//释放锁 \nlock.release();\n```\n文件锁要通过 FileChannel 对象使用。\n\n#### 2.4 获取文件锁方法\n有 4 种获取文件锁的方法：\n- lock() //对整个文件加锁，默认为排它锁。\n- lock(long position, long size, booean shared) //自定义加锁方式。前 2 个参数 指定要加锁的部分（可以只对此文件的部分内容加锁），第三个参数值指定是否是共享锁。\n- tryLock() //对整个文件加锁，默认为排它锁。\n- tryLock(long position, long size, booean shared) //自定义加锁方式。\n\n如果指定为共享锁，则其它进程可读此文件，所有进程均不能写此文件，如果某进程 试图对此文件进行写操作，会抛出异常。\n\n#### 2.5 lock 与 tryLock 的区别\n\nlock 是阻塞式的，如果未获取到文件锁，会一直阻塞当前线程，直到获取文件锁。\n\ntryLock 和 lock 的作用相同，只不过 tryLock 是非阻塞式的，tryLock 是尝试获取文 件锁，获取成功就返回锁对象，否则返回 null，不会阻塞当前线程。\n\n#### 2.6 FileLock 两个方法\n```java\nboolean isShared() //此文件锁是否是共享锁 \nboolean isValid() //此文件锁是否还有效\n```\n在某些 OS 上，对某个文件加锁后，不能对此文件使用通道映射。\n\n#### 2.7 完整例子\n```java\npublic class FileLockDemo01 {\n    public static void main(String[] args) throws Exception {\n        String input = \"Jzj\";\n        System.out.println(\"input:\"+input);\n        ByteBuffer buffer = ByteBuffer.wrap(input.getBytes(StandardCharsets.UTF_8));\n\n        String filePath = \"d:\\\\111.txt\";\n        Path path = Paths.get(filePath);\n        FileChannel channel = FileChannel.open(\n                path,\n                StandardOpenOption.WRITE,\n                StandardOpenOption.APPEND);\n        channel.position(channel.size()-1);\n\n        //加锁\n        FileLock lock = channel.lock(0L,Long.MAX_VALUE,true);\n        System.out.println(\"是否共享锁:\"+lock.isShared());\n\n        channel.write(buffer);\n        channel.close();\n        //读文件\n        readFile(filePath);\n    }\n\n    private static void readFile(String filePath) throws Exception {\n        FileReader fileReader = new FileReader(filePath);\n        BufferedReader bufferedReader = new BufferedReader(fileReader);\n        String tr = bufferedReader.readLine();\n        System.out.println(\"读取出内容:\");\n        while (tr != null){\n            System.out.println(\" \" +tr);\n            tr = bufferedReader.readLine();\n        }\n        fileReader.close();\n        bufferedReader.close();\n    }\n}\n```\n', '2022-10-09 16:52:29', '2022-10-09 17:23:51', '<h3><a id=\"1_Pipe_0\"></a>1 Pipe</h3>\n<p>Java NIO 管道是 2 个线程之间的单向数据连接。Pipe 有一个 source 通道和一个 sink 通道。数据会被写到 sink 通道，从 source 通道读取。</p>\n<div class=\"hljs-center\">\n<p><img src=\"https://vue-vblog.oss-cn-shenzhen.aliyuncs.com/article/2022/10/09/2f9b2e23b0414df2a415fbd52fca6338.png\" alt=\"image.png\" /></p>\n</div>\n<h4><a id=\"11__10\"></a>1.1 创建管道</h4>\n<p>通过 Pipe.open()方法打开管道。</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-type\">Pipe</span> <span class=\"hljs-variable\">pipe</span> <span class=\"hljs-operator\">=</span> Pipe.open();\n</code></div></pre>\n<h4><a id=\"12__16\"></a>1.2 写入管道</h4>\n<p>要向管道写数据，需要访问 sink 通道。：</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\">Pipe.<span class=\"hljs-type\">SinkChannel</span> <span class=\"hljs-variable\">sinkChannel</span> <span class=\"hljs-operator\">=</span> pipe.sink();\n</code></div></pre>\n<p>通过调用 SinkChannel 的 write()方法，将数据写入 SinkChannel：</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">newData</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;New String to write to file...&quot;</span> + System.currentTimeMillis(); \n<span class=\"hljs-type\">ByteBuffer</span> <span class=\"hljs-variable\">buf</span> <span class=\"hljs-operator\">=</span> ByteBuffer.allocate(<span class=\"hljs-number\">48</span>); \nbuf.clear(); buf.put(newData.getBytes()); \nbuf.flip(); \n<span class=\"hljs-keyword\">while</span>(buf.hasRemaining()) { \nsinkChannel.write(buf); \n}\n</code></div></pre>\n<h4><a id=\"13__33\"></a>1.3 从管道读取数据</h4>\n<p>从读取管道的数据，需要访问 source 通道，像这样：</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\">Pipe.<span class=\"hljs-type\">SourceChannel</span> <span class=\"hljs-variable\">sourceChannel</span> <span class=\"hljs-operator\">=</span> pipe.source();\n</code></div></pre>\n<p>调用 source 通道的 read()方法来读取数据：</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-type\">ByteBuffer</span> <span class=\"hljs-variable\">buf</span> <span class=\"hljs-operator\">=</span> ByteBuffer.allocate(<span class=\"hljs-number\">48</span>); \n<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">bytesRead</span> <span class=\"hljs-operator\">=</span> sourceChannel.read(buf);\n</code></div></pre>\n<p>read()方法返回的 int 值会告诉我们多少字节被读进了缓冲区。</p>\n<h4><a id=\"14__46\"></a>1.4 示例</h4>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> Exception {\n        <span class=\"hljs-comment\">//获取管道</span>\n        <span class=\"hljs-type\">Pipe</span> <span class=\"hljs-variable\">pipe</span> <span class=\"hljs-operator\">=</span> Pipe.open();\n        <span class=\"hljs-comment\">//获取sink通道</span>\n        Pipe.<span class=\"hljs-type\">SinkChannel</span> <span class=\"hljs-variable\">sinkChannel</span> <span class=\"hljs-operator\">=</span> pipe.sink();\n        <span class=\"hljs-comment\">//创建缓冲区</span>\n        <span class=\"hljs-type\">ByteBuffer</span> <span class=\"hljs-variable\">byteBuffer</span> <span class=\"hljs-operator\">=</span> ByteBuffer.allocate(<span class=\"hljs-number\">1024</span>);\n        byteBuffer.put(<span class=\"hljs-string\">&quot;Jzjzzzz&quot;</span>.getBytes(StandardCharsets.UTF_8));\n        byteBuffer.flip();\n        <span class=\"hljs-comment\">//写入数据</span>\n        sinkChannel.write(byteBuffer);\n        <span class=\"hljs-comment\">//获取source通道</span>\n        Pipe.<span class=\"hljs-type\">SourceChannel</span> <span class=\"hljs-variable\">sourceChannel</span> <span class=\"hljs-operator\">=</span> pipe.source();\n        <span class=\"hljs-comment\">//创建缓冲区,读取数据</span>\n        <span class=\"hljs-comment\">//ByteBuffer byteBuffer2 = ByteBuffer.allocate(1024);</span>\n        byteBuffer.flip();\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">length</span> <span class=\"hljs-operator\">=</span> sourceChannel.read(byteBuffer);\n        System.out.println(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">String</span>(byteBuffer.array(),<span class=\"hljs-number\">0</span>,length));\n        <span class=\"hljs-comment\">//关闭通道</span>\n        sourceChannel.close();\n        sinkChannel.close();\n    }\n</code></div></pre>\n<h3><a id=\"2_FileLock_72\"></a>2 FileLock</h3>\n<h4><a id=\"21_FileLock__74\"></a>2.1 FileLock 简介</h4>\n<p>文件锁在 OS 中很常见，如果多个程序同时访问、修改同一个文件，很容易因为文件 数据不同步而出现问题。给文件加一个锁，同一时间，只能有一个程序修改此文件， 或者程序都只能读此文件，这就解决了同步问题。</p>\n<p>文件锁是进程级别的，不是线程级别的。文件锁可以解决多个进程并发访问、修改同 一个文件的问题，但不能解决多线程并发访问、修改同一文件的问题。使用文件锁时， 同一进程内的多个线程，可以同时访问、修改此文件。</p>\n<p>文件锁是当前程序所属的 JVM 实例持有的，一旦获取到文件锁（对文件加锁），要调用 release()，或者关闭对应的 FileChannel 对象，或者当前 JVM 退出，才会释放这个锁。</p>\n<p>一旦某个进程（比如说 JVM 实例）对某个文件加锁，则在释放这个锁之前，此进程不 能再对此文件加锁，就是说 JVM 实例在同一文件上的文件锁是不重叠的（进程级别不 能重复在同一文件上获取锁）。</p>\n<h4><a id=\"22__83\"></a>2.2 文件锁分类</h4>\n<p><mark>排它锁</mark>：又叫独占锁。对文件加排它锁后，该进程可以对此文件进行读写，该进程独 占此文件，其他进程不能读写此文件，直到该进程释放文件锁。</p>\n<p><mark>共享锁</mark>：某个进程对文件加共享锁，其他进程也可以访问此文件，但这些进程都只能 读此文件，不能写。线程是安全的。只要还有一个进程持有共享锁，此文件就只能读， 不能写。</p>\n<h4><a id=\"23__88\"></a>2.3 使用示例</h4>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-comment\">//创建 FileChannel 对象，文件锁只能通过 FileChannel 对象来使用 </span>\nFileChannel fileChannel=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FileOutputStream</span>(<span class=\"hljs-string\">&quot;./1.txt&quot;</span>).getChannel(); \n<span class=\"hljs-comment\">//对文件加锁 </span>\nFileLock lock=fileChannel.lock(); \n<span class=\"hljs-comment\">//对此文件进行一些读写操作。 </span>\n<span class=\"hljs-comment\">//....... </span>\n<span class=\"hljs-comment\">//释放锁 </span>\nlock.release();\n</code></div></pre>\n<p>文件锁要通过 FileChannel 对象使用。</p>\n<h4><a id=\"24__101\"></a>2.4 获取文件锁方法</h4>\n<p>有 4 种获取文件锁的方法：</p>\n<ul>\n<li>lock() //对整个文件加锁，默认为排它锁。</li>\n<li>lock(long position, long size, booean shared) //自定义加锁方式。前 2 个参数 指定要加锁的部分（可以只对此文件的部分内容加锁），第三个参数值指定是否是共享锁。</li>\n<li>tryLock() //对整个文件加锁，默认为排它锁。</li>\n<li>tryLock(long position, long size, booean shared) //自定义加锁方式。</li>\n</ul>\n<p>如果指定为共享锁，则其它进程可读此文件，所有进程均不能写此文件，如果某进程 试图对此文件进行写操作，会抛出异常。</p>\n<h4><a id=\"25_lock__tryLock__110\"></a>2.5 lock 与 tryLock 的区别</h4>\n<p>lock 是阻塞式的，如果未获取到文件锁，会一直阻塞当前线程，直到获取文件锁。</p>\n<p>tryLock 和 lock 的作用相同，只不过 tryLock 是非阻塞式的，tryLock 是尝试获取文 件锁，获取成功就返回锁对象，否则返回 null，不会阻塞当前线程。</p>\n<h4><a id=\"26_FileLock__116\"></a>2.6 FileLock 两个方法</h4>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">isShared</span><span class=\"hljs-params\">()</span> <span class=\"hljs-comment\">//此文件锁是否是共享锁 </span>\n<span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">isValid</span><span class=\"hljs-params\">()</span> <span class=\"hljs-comment\">//此文件锁是否还有效</span>\n</code></div></pre>\n<p>在某些 OS 上，对某个文件加锁后，不能对此文件使用通道映射。</p>\n<h4><a id=\"27__123\"></a>2.7 完整例子</h4>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">FileLockDemo01</span> {\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> Exception {\n        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">input</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;Jzj&quot;</span>;\n        System.out.println(<span class=\"hljs-string\">&quot;input:&quot;</span>+input);\n        <span class=\"hljs-type\">ByteBuffer</span> <span class=\"hljs-variable\">buffer</span> <span class=\"hljs-operator\">=</span> ByteBuffer.wrap(input.getBytes(StandardCharsets.UTF_8));\n\n        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">filePath</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;d:\\\\111.txt&quot;</span>;\n        <span class=\"hljs-type\">Path</span> <span class=\"hljs-variable\">path</span> <span class=\"hljs-operator\">=</span> Paths.get(filePath);\n        <span class=\"hljs-type\">FileChannel</span> <span class=\"hljs-variable\">channel</span> <span class=\"hljs-operator\">=</span> FileChannel.open(\n                path,\n                StandardOpenOption.WRITE,\n                StandardOpenOption.APPEND);\n        channel.position(channel.size()-<span class=\"hljs-number\">1</span>);\n\n        <span class=\"hljs-comment\">//加锁</span>\n        <span class=\"hljs-type\">FileLock</span> <span class=\"hljs-variable\">lock</span> <span class=\"hljs-operator\">=</span> channel.lock(<span class=\"hljs-number\">0L</span>,Long.MAX_VALUE,<span class=\"hljs-literal\">true</span>);\n        System.out.println(<span class=\"hljs-string\">&quot;是否共享锁:&quot;</span>+lock.isShared());\n\n        channel.write(buffer);\n        channel.close();\n        <span class=\"hljs-comment\">//读文件</span>\n        readFile(filePath);\n    }\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">readFile</span><span class=\"hljs-params\">(String filePath)</span> <span class=\"hljs-keyword\">throws</span> Exception {\n        <span class=\"hljs-type\">FileReader</span> <span class=\"hljs-variable\">fileReader</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FileReader</span>(filePath);\n        <span class=\"hljs-type\">BufferedReader</span> <span class=\"hljs-variable\">bufferedReader</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BufferedReader</span>(fileReader);\n        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">tr</span> <span class=\"hljs-operator\">=</span> bufferedReader.readLine();\n        System.out.println(<span class=\"hljs-string\">&quot;读取出内容:&quot;</span>);\n        <span class=\"hljs-keyword\">while</span> (tr != <span class=\"hljs-literal\">null</span>){\n            System.out.println(<span class=\"hljs-string\">&quot; &quot;</span> +tr);\n            tr = bufferedReader.readLine();\n        }\n        fileReader.close();\n        bufferedReader.close();\n    }\n}\n</code></div></pre>\n');

-- ----------------------------
-- Table structure for article_inform
-- ----------------------------
DROP TABLE IF EXISTS `article_inform`;
CREATE TABLE `article_inform`  (
  `id` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '文章id',
  `create_time` datetime NULL DEFAULT NULL COMMENT '创建时间',
  `update_time` datetime NULL DEFAULT NULL COMMENT '更新时间',
  `create_by` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '创建者',
  `status` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '状态（0-下架，1-发布）',
  `article_title` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '文章标题',
  `introduce` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '简介',
  `log_img` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '标题图',
  `article_type` char(5) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '文章分类',
  `article_tag` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '文章标签',
  `top_status` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '是否置顶（0-不置顶，1-置顶）',
  `origin_status` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '是否原创（0-原创，1-转载）',
  `comment_status` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '是否开启评论（0-不开启，1-开启）',
  `click_rate` bigint(20) NULL DEFAULT NULL COMMENT '文章点击量',
  `number_like` bigint(20) NULL DEFAULT NULL COMMENT '点赞数',
  `aggregate_id` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '归档id',
  `sort` int(11) NULL DEFAULT NULL COMMENT '排序',
  `comment_number` int(11) NULL DEFAULT NULL COMMENT '评论数',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = '文章基础信息' ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of article_inform
-- ----------------------------
INSERT INTO `article_inform` VALUES ('33eaafbcb8d03c1eb2de9de8d49a6fe7', '2022-10-12 11:33:21', '2022-10-13 16:33:15', '漫漫前路', '1', 'Java网络编程-NIO（多人聊天室）', 'Java网络编程-NIO（多人聊天室）', 'https://vue-vblog.oss-cn-shenzhen.aliyuncs.com/articleLog/2022/10/12/f76ad4dd2b594cb18cf9707153efd0d0.jpg', '0', '0,10', '0', '1', '0', 6, 1, '6af32c16a767b5a74dc711d8d688236f', 0, 0);
INSERT INTO `article_inform` VALUES ('542c782529c33704c5f67d6e03ee939e', '2022-10-14 15:23:35', '2022-10-14 15:46:50', '漫漫前路', '1', 'Netty（入门）', '黑马Netty入门笔记', 'https://vue-vblog.oss-cn-shenzhen.aliyuncs.com/articleLog/2022/10/14/fb21f45fe2c04401a1b186f2f17ec80b.jpg', '0', '0,11', '0', '1', '0', 16, 0, 'ac578e0aba0f32dffd9d1a10a159b04c', 0, 0);
INSERT INTO `article_inform` VALUES ('57f718d5122663a93110cf52264e929b', '2022-10-31 15:17:57', '2022-10-31 15:18:45', '漫漫前路', '1', 'EasyExcel百万数据导出', '使用EasyExcel导出百万数据', 'https://vue-vblog.oss-cn-shenzhen.aliyuncs.com/articleLog/2022/10/31/7e66508406ec40d98d514d08587ae007.jpg', '0', '0,4', '0', '0', '0', 2, 0, '', 0, 0);
INSERT INTO `article_inform` VALUES ('5dc9ccb15fe3224878945a842f7f6427', '2022-09-30 16:30:45', '2022-10-13 14:34:41', '漫漫前路', '1', 'Java网络编程-NIO（SocketChannel）', 'Java网络编程-NIO（SocketChannel）', 'https://vue-vblog.oss-cn-shenzhen.aliyuncs.com/articleLog/2022/09/30/535d7be3e8614d5b92d3b4567f005bef.jpg', '0', '0,10', '0', '1', '0', 16, 1, '6af32c16a767b5a74dc711d8d688236f', 0, 0);
INSERT INTO `article_inform` VALUES ('68c89984823c939509f7601517b358ad', '2022-10-09 10:56:26', '2022-10-13 15:49:15', '漫漫前路', '1', 'Java网络编程-NIO（Selector）', 'Java网络编程-NIO（Selector）', 'https://vue-vblog.oss-cn-shenzhen.aliyuncs.com/articleLog/2022/10/09/dd6766ece27b4fcf90dcd0a5167297d0.jpg', '0', '0,10', '0', '1', '0', 6, 0, '6af32c16a767b5a74dc711d8d688236f', 0, 0);
INSERT INTO `article_inform` VALUES ('6ad6bbb7161e5ad89760b8ca830870ef', '2022-09-30 14:45:15', '2022-10-14 10:52:09', '漫漫前路', '1', 'Java网络编程-NIO（概述）', 'Java 网络编程系列之 NIO', 'https://vue-vblog.oss-cn-shenzhen.aliyuncs.com/articleLog/2022/09/30/dfae8c0b0a2b4577aa268401bf0c60e4.jpg', '0', '0,10', '0', '1', '0', 25, 0, '6af32c16a767b5a74dc711d8d688236f', 0, 0);
INSERT INTO `article_inform` VALUES ('6bb0a02f479905e24398dfe187c49641', '2022-10-09 17:29:00', '2022-10-13 16:32:00', '漫漫前路', '1', 'Java网络编程-NIO（其他）', 'Java网络编程-NIO（其他）', 'https://vue-vblog.oss-cn-shenzhen.aliyuncs.com/articleLog/2022/10/09/1671f73bdd3140f3a2cc646e948d98f0.jpg', '0', '0,10', '0', '1', '0', 8, 0, '6af32c16a767b5a74dc711d8d688236f', 0, 0);
INSERT INTO `article_inform` VALUES ('8556d1aadfebf82abaa7e2159d499d8b', '2022-10-08 16:37:01', '2022-10-13 15:45:44', '漫漫前路', '1', 'Java网络编程-NIO（Buffer）', 'Java网络编程-NIO（Buffer）', 'https://vue-vblog.oss-cn-shenzhen.aliyuncs.com/articleLog/2022/10/08/ad90335701f84465b105d9548cc6f992.jpg', '0', '0,10', '0', '1', '0', 15, 0, '6af32c16a767b5a74dc711d8d688236f', 0, 0);
INSERT INTO `article_inform` VALUES ('ace86a2c5d5c94e559bbfe3158d342fc', '2022-09-30 15:13:36', '2022-10-13 11:06:10', '漫漫前路', '1', 'Java网络编程-NIO（Channel）', 'Java网络编程-NIO（Channel）', 'https://vue-vblog.oss-cn-shenzhen.aliyuncs.com/articleLog/2022/09/30/9022fbc5907d4e4ebe016e4d8976ce9d.jpg', '0', '0,10', '0', '1', '0', 24, 0, '6af32c16a767b5a74dc711d8d688236f', 0, 0);
INSERT INTO `article_inform` VALUES ('edb409243c0e1b8a819fe729b6566ab2', '2022-10-09 16:52:29', '2022-10-13 16:31:39', '漫漫前路', '1', 'Java网络编程-NIO（Pipe 和 FileLock）', 'Java网络编程-NIO（Pipe 和 FileLock）', 'https://vue-vblog.oss-cn-shenzhen.aliyuncs.com/articleLog/2022/10/09/e0f6fb09458242b08216b9cbeec18f1b.jpg', '0', '0,10', '0', '1', '0', 2, 0, '6af32c16a767b5a74dc711d8d688236f', 0, 0);

-- ----------------------------
-- Table structure for article_summary
-- ----------------------------
DROP TABLE IF EXISTS `article_summary`;
CREATE TABLE `article_summary`  (
  `id` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '归档表id',
  `name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '归档名称',
  `banner` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '归档图',
  `create_time` datetime NULL DEFAULT NULL COMMENT '创建时间',
  `update_time` datetime NULL DEFAULT NULL COMMENT '修改时间',
  `status` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '状态',
  `top_status` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '是否显示在首页',
  `author` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '作者',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = '文章归档' ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of article_summary
-- ----------------------------
INSERT INTO `article_summary` VALUES ('09d7c62e8f9d0348782c6381e2c0b6c0', '阿里云OSS', 'https://vue-vblog.oss-cn-shenzhen.aliyuncs.com/articleSummary/2022/09/26/03b075772ba346ecbe91110f6fd9b4f4.jpg', '2022-09-26 10:02:59', '2022-09-26 10:02:59', '1', NULL, '漫漫长路');
INSERT INTO `article_summary` VALUES ('6af32c16a767b5a74dc711d8d688236f', '尚硅谷NIO笔记', 'https://vue-vblog.oss-cn-shenzhen.aliyuncs.com/articleSummary/2022/09/30/2662e8eef71d439e81c62ba7cb850bd0.jpg', '2022-09-30 15:07:37', '2022-09-30 15:07:37', '1', NULL, '漫漫前路');
INSERT INTO `article_summary` VALUES ('ac578e0aba0f32dffd9d1a10a159b04c', '尚硅谷Netty笔记', 'https://vue-vblog.oss-cn-shenzhen.aliyuncs.com/articleSummary/2022/09/30/e380b7f1034443fea069c6e3db3e2aab.jpg', '2022-09-30 15:08:49', '2022-09-30 15:08:49', '1', NULL, '漫漫前路');
INSERT INTO `article_summary` VALUES ('f796f398a0dd7e44a3e407837250f3c1', '尚硅谷MySQL笔记', 'https://vue-vblog.oss-cn-shenzhen.aliyuncs.com/articleSummary/2022/09/30/4b416e9fee76496498e692c76eb59542.jpg', '2022-09-30 15:08:21', '2022-09-30 15:08:21', '1', NULL, '漫漫前路');

-- ----------------------------
-- Table structure for friend_link
-- ----------------------------
DROP TABLE IF EXISTS `friend_link`;
CREATE TABLE `friend_link`  (
  `id` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT 'id',
  `name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '链接名称',
  `link` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '链接',
  `create_time` datetime NULL DEFAULT NULL COMMENT '创建时间',
  `update_time` datetime NULL DEFAULT NULL COMMENT '修改时间',
  `status` varchar(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '状态',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = '友情链接' ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of friend_link
-- ----------------------------
INSERT INTO `friend_link` VALUES ('d855c662eddc70853cee7304bb1c1b05', 'Jzjzzzz', 'https://www.jzjzzzz.icu/', '2022-09-10 00:50:33', '2022-09-10 00:50:33', '1');

-- ----------------------------
-- Table structure for gallery
-- ----------------------------
DROP TABLE IF EXISTS `gallery`;
CREATE TABLE `gallery`  (
  `id` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT 'id',
  `img_address` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '图片地址',
  `create_time` datetime NOT NULL COMMENT '创建时间',
  `update_time` datetime NOT NULL COMMENT '修改时间',
  `status` varchar(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '状态',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = '图集' ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of gallery
-- ----------------------------
INSERT INTO `gallery` VALUES ('03a99c7b12edf4afdc22555223dd6578', 'https://vue-vblog.oss-cn-shenzhen.aliyuncs.com/gallery/2022/09/24/7e9fc5305e3e40ac95f56d1424d7d9ef.jpg', '2022-09-24 20:24:07', '2022-09-24 20:24:07', '1');
INSERT INTO `gallery` VALUES ('1d6ac129b136aa5f3cfb8499da523010', 'https://vue-vblog.oss-cn-shenzhen.aliyuncs.com/gallery/2022/09/30/96e53ccf50044613b931282b1a8c6765.jpg', '2022-09-30 14:45:40', '2022-09-30 14:45:40', '1');
INSERT INTO `gallery` VALUES ('56c84ccbfc3c047eb1519db2347c4c4b', 'https://vue-vblog.oss-cn-shenzhen.aliyuncs.com/gallery/2022/09/24/7aa46f57b11341ffac4512901d331ca2.jpg', '2022-09-24 20:53:35', '2022-09-24 20:53:35', '1');
INSERT INTO `gallery` VALUES ('74a56a311f6909b8584ed82be5cbf421', 'https://vue-vblog.oss-cn-shenzhen.aliyuncs.com/gallery/2022/09/24/c2662067ad0946908572136e5ccd83a0.jpg', '2022-09-24 20:26:44', '2022-09-24 20:26:44', '1');
INSERT INTO `gallery` VALUES ('768b183cdbb975413bfbe9cc5d7d4ba4', 'https://vue-vblog.oss-cn-shenzhen.aliyuncs.com/gallery/2022/09/30/45b13c6c457a41bcacf5b2ec962ec190.jpg', '2022-09-30 14:45:33', '2022-09-30 14:45:33', '1');
INSERT INTO `gallery` VALUES ('a79d7c800d159273df96311ece81dd59', 'https://vue-vblog.oss-cn-shenzhen.aliyuncs.com/gallery/2022/09/30/456dc869a1cf4898b12f3cf5db848d01.jpg', '2022-09-30 14:45:48', '2022-09-30 14:45:48', '1');
INSERT INTO `gallery` VALUES ('b079b8bd7ea66bf73023aa653f4d7f89', 'https://vue-vblog.oss-cn-shenzhen.aliyuncs.com/gallery/2022/09/24/e770e59ba7c5499cbbfd00e1b500437a.jpg', '2022-09-24 21:00:37', '2022-09-24 21:00:37', '1');
INSERT INTO `gallery` VALUES ('b9d7fcea75c0cc18c5e7c04ef5968dd1', 'https://vue-vblog.oss-cn-shenzhen.aliyuncs.com/gallery/2022/09/30/6d8895578d8d43d9ad6771b1f5630a70.jpg', '2022-09-30 14:45:28', '2022-09-30 14:45:28', '1');
INSERT INTO `gallery` VALUES ('d798f3e5f208c754a7511f1f2d4a1fd0', 'https://vue-vblog.oss-cn-shenzhen.aliyuncs.com/gallery/2022/09/24/9dd1d99171cc47c59ae05e989520afba.jpg', '2022-09-24 20:26:48', '2022-09-24 20:26:48', '1');
INSERT INTO `gallery` VALUES ('ecec1412dcc54c4d92110e1bccccea60', 'https://vue-vblog.oss-cn-shenzhen.aliyuncs.com/gallery/2022/09/24/cfb8c7582ccd48f28e6bfb0c92dc5507.jpg', '2022-09-24 20:25:28', '2022-09-24 20:25:28', '1');

-- ----------------------------
-- Table structure for gen_table
-- ----------------------------
DROP TABLE IF EXISTS `gen_table`;
CREATE TABLE `gen_table`  (
  `table_id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '编号',
  `table_name` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '表名称',
  `table_comment` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '表描述',
  `sub_table_name` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '关联子表的表名',
  `sub_table_fk_name` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '子表关联的外键名',
  `class_name` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '实体类名称',
  `tpl_category` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT 'crud' COMMENT '使用的模板（crud单表操作 tree树表操作）',
  `package_name` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '生成包路径',
  `module_name` varchar(30) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '生成模块名',
  `business_name` varchar(30) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '生成业务名',
  `function_name` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '生成功能名',
  `function_author` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '生成功能作者',
  `gen_type` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '0' COMMENT '生成代码方式（0zip压缩包 1自定义路径）',
  `gen_path` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '/' COMMENT '生成路径（不填默认项目路径）',
  `options` varchar(1000) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '其它生成选项',
  `create_by` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '创建者',
  `create_time` datetime NULL DEFAULT NULL COMMENT '创建时间',
  `update_by` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '更新者',
  `update_time` datetime NULL DEFAULT NULL COMMENT '更新时间',
  `remark` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '备注',
  PRIMARY KEY (`table_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = '代码生成业务表' ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of gen_table
-- ----------------------------

-- ----------------------------
-- Table structure for gen_table_column
-- ----------------------------
DROP TABLE IF EXISTS `gen_table_column`;
CREATE TABLE `gen_table_column`  (
  `column_id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '编号',
  `table_id` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '归属表编号',
  `column_name` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '列名称',
  `column_comment` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '列描述',
  `column_type` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '列类型',
  `java_type` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT 'JAVA类型',
  `java_field` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT 'JAVA字段名',
  `is_pk` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '是否主键（1是）',
  `is_increment` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '是否自增（1是）',
  `is_required` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '是否必填（1是）',
  `is_insert` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '是否为插入字段（1是）',
  `is_edit` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '是否编辑字段（1是）',
  `is_list` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '是否列表字段（1是）',
  `is_query` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '是否查询字段（1是）',
  `query_type` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT 'EQ' COMMENT '查询方式（等于、不等于、大于、小于、范围）',
  `html_type` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '显示类型（文本框、文本域、下拉框、复选框、单选框、日期控件）',
  `dict_type` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '字典类型',
  `sort` int(11) NULL DEFAULT NULL COMMENT '排序',
  `create_by` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '创建者',
  `create_time` datetime NULL DEFAULT NULL COMMENT '创建时间',
  `update_by` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '更新者',
  `update_time` datetime NULL DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`column_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = '代码生成业务表字段' ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of gen_table_column
-- ----------------------------

-- ----------------------------
-- Table structure for qrtz_blob_triggers
-- ----------------------------
DROP TABLE IF EXISTS `qrtz_blob_triggers`;
CREATE TABLE `qrtz_blob_triggers`  (
  `SCHED_NAME` varchar(120) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `TRIGGER_NAME` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `TRIGGER_GROUP` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `BLOB_DATA` blob NULL,
  PRIMARY KEY (`SCHED_NAME`, `TRIGGER_NAME`, `TRIGGER_GROUP`) USING BTREE,
  CONSTRAINT `QRTZ_BLOB_TRIGGERS_ibfk_1` FOREIGN KEY (`SCHED_NAME`, `TRIGGER_NAME`, `TRIGGER_GROUP`) REFERENCES `qrtz_triggers` (`SCHED_NAME`, `TRIGGER_NAME`, `TRIGGER_GROUP`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of qrtz_blob_triggers
-- ----------------------------

-- ----------------------------
-- Table structure for qrtz_calendars
-- ----------------------------
DROP TABLE IF EXISTS `qrtz_calendars`;
CREATE TABLE `qrtz_calendars`  (
  `SCHED_NAME` varchar(120) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `CALENDAR_NAME` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `CALENDAR` blob NOT NULL,
  PRIMARY KEY (`SCHED_NAME`, `CALENDAR_NAME`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of qrtz_calendars
-- ----------------------------

-- ----------------------------
-- Table structure for qrtz_cron_triggers
-- ----------------------------
DROP TABLE IF EXISTS `qrtz_cron_triggers`;
CREATE TABLE `qrtz_cron_triggers`  (
  `SCHED_NAME` varchar(120) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `TRIGGER_NAME` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `TRIGGER_GROUP` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `CRON_EXPRESSION` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `TIME_ZONE_ID` varchar(80) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,
  PRIMARY KEY (`SCHED_NAME`, `TRIGGER_NAME`, `TRIGGER_GROUP`) USING BTREE,
  CONSTRAINT `QRTZ_CRON_TRIGGERS_ibfk_1` FOREIGN KEY (`SCHED_NAME`, `TRIGGER_NAME`, `TRIGGER_GROUP`) REFERENCES `qrtz_triggers` (`SCHED_NAME`, `TRIGGER_NAME`, `TRIGGER_GROUP`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of qrtz_cron_triggers
-- ----------------------------
INSERT INTO `qrtz_cron_triggers` VALUES ('VblogScheduler', 'com.jzj.vblog.job.ArticleCountJob', 'Article', '0 0/2 * * * ?', 'Asia/Shanghai');
INSERT INTO `qrtz_cron_triggers` VALUES ('VblogScheduler', 'com.jzj.vblog.job.HelloJob', 'Hello', '0/2 * * * * ?', 'Asia/Shanghai');

-- ----------------------------
-- Table structure for qrtz_fired_triggers
-- ----------------------------
DROP TABLE IF EXISTS `qrtz_fired_triggers`;
CREATE TABLE `qrtz_fired_triggers`  (
  `SCHED_NAME` varchar(120) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `ENTRY_ID` varchar(95) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `TRIGGER_NAME` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `TRIGGER_GROUP` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `INSTANCE_NAME` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `FIRED_TIME` bigint(13) NOT NULL,
  `SCHED_TIME` bigint(13) NOT NULL,
  `PRIORITY` int(11) NOT NULL,
  `STATE` varchar(16) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `JOB_NAME` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,
  `JOB_GROUP` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,
  `IS_NONCONCURRENT` varchar(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,
  `REQUESTS_RECOVERY` varchar(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,
  PRIMARY KEY (`SCHED_NAME`, `ENTRY_ID`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of qrtz_fired_triggers
-- ----------------------------

-- ----------------------------
-- Table structure for qrtz_job_details
-- ----------------------------
DROP TABLE IF EXISTS `qrtz_job_details`;
CREATE TABLE `qrtz_job_details`  (
  `SCHED_NAME` varchar(120) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `JOB_NAME` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `JOB_GROUP` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `DESCRIPTION` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,
  `JOB_CLASS_NAME` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `IS_DURABLE` varchar(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `IS_NONCONCURRENT` varchar(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `IS_UPDATE_DATA` varchar(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `REQUESTS_RECOVERY` varchar(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `JOB_DATA` blob NULL,
  PRIMARY KEY (`SCHED_NAME`, `JOB_NAME`, `JOB_GROUP`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of qrtz_job_details
-- ----------------------------
INSERT INTO `qrtz_job_details` VALUES ('VblogScheduler', 'com.jzj.vblog.job.ArticleCountJob', 'Article', NULL, 'com.jzj.vblog.job.ArticleCountJob', '0', '0', '0', '0', 0x
INSERT INTO `qrtz_job_details` VALUES ('VblogScheduler', 'com.jzj.vblog.job.HelloJob', 'Hello', NULL, 'com.jzj.vblog.job.HelloJob', '0', '0', '0', '0', 0x

-- ----------------------------
-- Table structure for qrtz_locks
-- ----------------------------
DROP TABLE IF EXISTS `qrtz_locks`;
CREATE TABLE `qrtz_locks`  (
  `SCHED_NAME` varchar(120) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `LOCK_NAME` varchar(40) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  PRIMARY KEY (`SCHED_NAME`, `LOCK_NAME`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of qrtz_locks
-- ----------------------------
INSERT INTO `qrtz_locks` VALUES ('VblogScheduler', 'TRIGGER_ACCESS');

-- ----------------------------
-- Table structure for qrtz_paused_trigger_grps
-- ----------------------------
DROP TABLE IF EXISTS `qrtz_paused_trigger_grps`;
CREATE TABLE `qrtz_paused_trigger_grps`  (
  `SCHED_NAME` varchar(120) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `TRIGGER_GROUP` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  PRIMARY KEY (`SCHED_NAME`, `TRIGGER_GROUP`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of qrtz_paused_trigger_grps
-- ----------------------------

-- ----------------------------
-- Table structure for qrtz_scheduler_state
-- ----------------------------
DROP TABLE IF EXISTS `qrtz_scheduler_state`;
CREATE TABLE `qrtz_scheduler_state`  (
  `SCHED_NAME` varchar(120) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `INSTANCE_NAME` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `LAST_CHECKIN_TIME` bigint(13) NOT NULL,
  `CHECKIN_INTERVAL` bigint(13) NOT NULL,
  PRIMARY KEY (`SCHED_NAME`, `INSTANCE_NAME`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of qrtz_scheduler_state
-- ----------------------------

-- ----------------------------
-- Table structure for qrtz_simple_triggers
-- ----------------------------
DROP TABLE IF EXISTS `qrtz_simple_triggers`;
CREATE TABLE `qrtz_simple_triggers`  (
  `SCHED_NAME` varchar(120) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `TRIGGER_NAME` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `TRIGGER_GROUP` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `REPEAT_COUNT` bigint(7) NOT NULL,
  `REPEAT_INTERVAL` bigint(12) NOT NULL,
  `TIMES_TRIGGERED` bigint(10) NOT NULL,
  PRIMARY KEY (`SCHED_NAME`, `TRIGGER_NAME`, `TRIGGER_GROUP`) USING BTREE,
  CONSTRAINT `QRTZ_SIMPLE_TRIGGERS_ibfk_1` FOREIGN KEY (`SCHED_NAME`, `TRIGGER_NAME`, `TRIGGER_GROUP`) REFERENCES `qrtz_triggers` (`SCHED_NAME`, `TRIGGER_NAME`, `TRIGGER_GROUP`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of qrtz_simple_triggers
-- ----------------------------

-- ----------------------------
-- Table structure for qrtz_simprop_triggers
-- ----------------------------
DROP TABLE IF EXISTS `qrtz_simprop_triggers`;
CREATE TABLE `qrtz_simprop_triggers`  (
  `SCHED_NAME` varchar(120) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `TRIGGER_NAME` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `TRIGGER_GROUP` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `STR_PROP_1` varchar(512) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,
  `STR_PROP_2` varchar(512) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,
  `STR_PROP_3` varchar(512) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,
  `INT_PROP_1` int(11) NULL DEFAULT NULL,
  `INT_PROP_2` int(11) NULL DEFAULT NULL,
  `LONG_PROP_1` bigint(20) NULL DEFAULT NULL,
  `LONG_PROP_2` bigint(20) NULL DEFAULT NULL,
  `DEC_PROP_1` decimal(13, 4) NULL DEFAULT NULL,
  `DEC_PROP_2` decimal(13, 4) NULL DEFAULT NULL,
  `BOOL_PROP_1` varchar(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,
  `BOOL_PROP_2` varchar(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,
  PRIMARY KEY (`SCHED_NAME`, `TRIGGER_NAME`, `TRIGGER_GROUP`) USING BTREE,
  CONSTRAINT `QRTZ_SIMPROP_TRIGGERS_ibfk_1` FOREIGN KEY (`SCHED_NAME`, `TRIGGER_NAME`, `TRIGGER_GROUP`) REFERENCES `qrtz_triggers` (`SCHED_NAME`, `TRIGGER_NAME`, `TRIGGER_GROUP`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of qrtz_simprop_triggers
-- ----------------------------

-- ----------------------------
-- Table structure for qrtz_triggers
-- ----------------------------
DROP TABLE IF EXISTS `qrtz_triggers`;
CREATE TABLE `qrtz_triggers`  (
  `SCHED_NAME` varchar(120) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `TRIGGER_NAME` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `TRIGGER_GROUP` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `JOB_NAME` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `JOB_GROUP` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `DESCRIPTION` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,
  `NEXT_FIRE_TIME` bigint(13) NULL DEFAULT NULL,
  `PREV_FIRE_TIME` bigint(13) NULL DEFAULT NULL,
  `PRIORITY` int(11) NULL DEFAULT NULL,
  `TRIGGER_STATE` varchar(16) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `TRIGGER_TYPE` varchar(8) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `START_TIME` bigint(13) NOT NULL,
  `END_TIME` bigint(13) NULL DEFAULT NULL,
  `CALENDAR_NAME` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,
  `MISFIRE_INSTR` smallint(2) NULL DEFAULT NULL,
  `JOB_DATA` blob NULL,
  PRIMARY KEY (`SCHED_NAME`, `TRIGGER_NAME`, `TRIGGER_GROUP`) USING BTREE,
  INDEX `SCHED_NAME`(`SCHED_NAME`, `JOB_NAME`, `JOB_GROUP`) USING BTREE,
  CONSTRAINT `QRTZ_TRIGGERS_ibfk_1` FOREIGN KEY (`SCHED_NAME`, `JOB_NAME`, `JOB_GROUP`) REFERENCES `qrtz_job_details` (`SCHED_NAME`, `JOB_NAME`, `JOB_GROUP`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of qrtz_triggers
-- ----------------------------
INSERT INTO `qrtz_triggers` VALUES ('VblogScheduler', 'com.jzj.vblog.job.ArticleCountJob', 'Article', 'com.jzj.vblog.job.ArticleCountJob', 'Article', NULL, 1667200920000, 1667200800000, 5, 'WAITING', 'CRON', 1661255313000, 0, NULL, 0, '');
INSERT INTO `qrtz_triggers` VALUES ('VblogScheduler', 'com.jzj.vblog.job.HelloJob', 'Hello', 'com.jzj.vblog.job.HelloJob', 'Hello', NULL, 1661249656000, 1661249654000, 5, 'PAUSED', 'CRON', 1661170536000, 0, NULL, 0, '');

-- ----------------------------
-- Table structure for sys_config
-- ----------------------------
DROP TABLE IF EXISTS `sys_config`;
CREATE TABLE `sys_config`  (
  `id` int(5) NOT NULL AUTO_INCREMENT COMMENT '参数主键',
  `config_name` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '参数名称',
  `config_key` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '参数键名',
  `config_value` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '参数键值',
  `config_type` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT 'N' COMMENT '系统内置（Y是 N否）',
  `create_by` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '创建者',
  `create_time` datetime NULL DEFAULT NULL COMMENT '创建时间',
  `update_by` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '更新者',
  `update_time` datetime NULL DEFAULT NULL COMMENT '更新时间',
  `remark` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '备注',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 8 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = '参数配置表' ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of sys_config
-- ----------------------------
INSERT INTO `sys_config` VALUES (1, '主框架页-默认皮肤样式名称', 'sys.index.skinName', 'skin-blue', 'Y', 'admin', '2022-04-27 02:10:24', 'admin', '2022-07-22 02:28:46', '蓝色 skin-blue、绿色 skin-green、紫色 skin-purple、红色 skin-red、黄色 skin-yellow');
INSERT INTO `sys_config` VALUES (3, '主框架页-侧边栏主题', 'sys.index.sideTheme', 'theme-dark', 'Y', 'admin', '2022-04-27 02:10:24', '', NULL, '深色主题theme-dark，浅色主题theme-light');
INSERT INTO `sys_config` VALUES (6, 'oss云存储-是否开启云存储', 'sys.oss.enable', 'true', 'Y', 'admin', '2022-07-27 14:52:18', 'admin', '2022-07-29 15:02:59', '开启云存储需要配置application.yml里的oss相关参数（true开启，false关闭）');
INSERT INTO `sys_config` VALUES (7, '是否开启邮箱通知', 'sys_email_enable', 'true', 'Y', 'admin', '2022-09-20 14:45:07', 'admin', '2022-09-23 22:16:59', '后台回复留言，邮箱通知留言者,开启需要配置email相关参数 （true开启，false关闭）');

-- ----------------------------
-- Table structure for sys_count
-- ----------------------------
DROP TABLE IF EXISTS `sys_count`;
CREATE TABLE `sys_count`  (
  `id` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT 'id',
  `article_count` bigint(20) NULL DEFAULT NULL COMMENT '文章数',
  `summary_count` bigint(20) NULL DEFAULT NULL COMMENT '归档数',
  `user_count` bigint(20) NULL DEFAULT NULL COMMENT '用户数',
  `click_count` bigint(20) NULL DEFAULT NULL COMMENT '点击数',
  `like_count` bigint(20) NULL DEFAULT NULL COMMENT '点赞数',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = '统计归档' ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of sys_count
-- ----------------------------
INSERT INTO `sys_count` VALUES ('1', 10, 4, 0, 120, 2);

-- ----------------------------
-- Table structure for sys_dict_data
-- ----------------------------
DROP TABLE IF EXISTS `sys_dict_data`;
CREATE TABLE `sys_dict_data`  (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '字典编码',
  `dict_sort` int(4) NULL DEFAULT 0 COMMENT '字典排序',
  `dict_label` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '字典标签',
  `dict_value` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '字典键值',
  `dict_type` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '字典类型',
  `css_class` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '样式属性（其他样式扩展）',
  `list_class` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '表格回显样式',
  `is_default` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT 'N' COMMENT '是否默认（Y是 N否）',
  `status` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '0' COMMENT '状态（0正常 1停用）',
  `create_by` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '创建者',
  `create_time` datetime NULL DEFAULT NULL COMMENT '创建时间',
  `update_by` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '更新者',
  `update_time` datetime NULL DEFAULT NULL COMMENT '更新时间',
  `remark` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '备注',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 141 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = '字典数据表' ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of sys_dict_data
-- ----------------------------
INSERT INTO `sys_dict_data` VALUES (1, 1, '男', '0', 'sys_user_sex', '', '', 'Y', '0', 'admin', '2022-04-27 02:10:24', 'admin', '2022-07-22 06:16:44', '性别男');
INSERT INTO `sys_dict_data` VALUES (2, 2, '女', '1', 'sys_user_sex', '', '', 'N', '0', 'admin', '2022-04-27 02:10:24', '', NULL, '性别女');
INSERT INTO `sys_dict_data` VALUES (3, 3, '未知', '2', 'sys_user_sex', '', '', 'N', '0', 'admin', '2022-04-27 02:10:24', '', NULL, '性别未知');
INSERT INTO `sys_dict_data` VALUES (4, 1, '显示', '0', 'sys_show_hide', '', 'primary', 'Y', '0', 'admin', '2022-04-27 02:10:24', '', NULL, '显示菜单');
INSERT INTO `sys_dict_data` VALUES (5, 2, '隐藏', '1', 'sys_show_hide', '', 'danger', 'N', '0', 'admin', '2022-04-27 02:10:24', '', NULL, '隐藏菜单');
INSERT INTO `sys_dict_data` VALUES (6, 1, '正常', '0', 'sys_normal_disable', '', 'primary', 'Y', '0', 'admin', '2022-04-27 02:10:24', 'admin', '2022-07-21 11:52:18', '正常状态');
INSERT INTO `sys_dict_data` VALUES (7, 2, '停用', '1', 'sys_normal_disable', '', 'danger', 'N', '0', 'admin', '2022-04-27 02:10:24', '', NULL, '停用状态');
INSERT INTO `sys_dict_data` VALUES (8, 1, '正常', '0', 'sys_job_status', '', 'primary', 'Y', '0', 'admin', '2022-04-27 02:10:24', '', NULL, '正常状态');
INSERT INTO `sys_dict_data` VALUES (9, 2, '暂停', '1', 'sys_job_status', '', 'danger', 'N', '0', 'admin', '2022-04-27 02:10:24', '', NULL, '停用状态');
INSERT INTO `sys_dict_data` VALUES (10, 1, '默认', 'DEFAULT', 'sys_job_group', '', '', 'Y', '0', 'admin', '2022-04-27 02:10:24', '', NULL, '默认分组');
INSERT INTO `sys_dict_data` VALUES (11, 2, '系统', 'SYSTEM', 'sys_job_group', '', '', 'N', '0', 'admin', '2022-04-27 02:10:24', '', NULL, '系统分组');
INSERT INTO `sys_dict_data` VALUES (12, 1, '是', 'Y', 'sys_yes_no', '', 'primary', 'Y', '0', 'admin', '2022-04-27 02:10:24', '', NULL, '系统默认是');
INSERT INTO `sys_dict_data` VALUES (13, 2, '否', 'N', 'sys_yes_no', '', 'danger', 'N', '0', 'admin', '2022-04-27 02:10:24', '', NULL, '系统默认否');
INSERT INTO `sys_dict_data` VALUES (14, 1, '通知', '1', 'sys_notice_type', '', 'warning', 'Y', '0', 'admin', '2022-04-27 02:10:24', '', NULL, '通知');
INSERT INTO `sys_dict_data` VALUES (15, 2, '公告', '2', 'sys_notice_type', '', 'success', 'N', '0', 'admin', '2022-04-27 02:10:24', '', NULL, '公告');
INSERT INTO `sys_dict_data` VALUES (16, 1, '正常', '0', 'sys_notice_status', '', 'primary', 'Y', '0', 'admin', '2022-04-27 02:10:24', '', NULL, '正常状态');
INSERT INTO `sys_dict_data` VALUES (17, 2, '关闭', '1', 'sys_notice_status', '', 'danger', 'N', '0', 'admin', '2022-04-27 02:10:24', '', NULL, '关闭状态');
INSERT INTO `sys_dict_data` VALUES (18, 1, '新增', '1', 'sys_oper_type', '', 'info', 'N', '0', 'admin', '2022-04-27 02:10:24', '', NULL, '新增操作');
INSERT INTO `sys_dict_data` VALUES (19, 2, '修改', '2', 'sys_oper_type', '', 'info', 'N', '0', 'admin', '2022-04-27 02:10:24', '', NULL, '修改操作');
INSERT INTO `sys_dict_data` VALUES (20, 3, '删除', '3', 'sys_oper_type', '', 'danger', 'N', '0', 'admin', '2022-04-27 02:10:24', '', NULL, '删除操作');
INSERT INTO `sys_dict_data` VALUES (21, 4, '授权', '4', 'sys_oper_type', '', 'primary', 'N', '0', 'admin', '2022-04-27 02:10:24', '', NULL, '授权操作');
INSERT INTO `sys_dict_data` VALUES (22, 5, '导出', '5', 'sys_oper_type', '', 'warning', 'N', '0', 'admin', '2022-04-27 02:10:24', '', NULL, '导出操作');
INSERT INTO `sys_dict_data` VALUES (23, 6, '导入', '6', 'sys_oper_type', '', 'warning', 'N', '0', 'admin', '2022-04-27 02:10:24', '', NULL, '导入操作');
INSERT INTO `sys_dict_data` VALUES (24, 7, '强退', '7', 'sys_oper_type', '', 'danger', 'N', '0', 'admin', '2022-04-27 02:10:24', '', NULL, '强退操作');
INSERT INTO `sys_dict_data` VALUES (25, 8, '生成代码', '8', 'sys_oper_type', '', 'warning', 'N', '0', 'admin', '2022-04-27 02:10:24', '', NULL, '生成操作');
INSERT INTO `sys_dict_data` VALUES (26, 9, '清空数据', '9', 'sys_oper_type', '', 'danger', 'N', '0', 'admin', '2022-04-27 02:10:24', '', NULL, '清空操作');
INSERT INTO `sys_dict_data` VALUES (27, 1, '成功', '0', 'sys_common_status', '', 'primary', 'N', '0', 'admin', '2022-04-27 02:10:24', '', NULL, '正常状态');
INSERT INTO `sys_dict_data` VALUES (28, 2, '失败', '1', 'sys_common_status', '', 'danger', 'N', '0', 'admin', '2022-04-27 02:10:24', '', NULL, '停用状态');
INSERT INTO `sys_dict_data` VALUES (101, 0, '编程', '0', 'sys_article_type', NULL, 'primary', 'N', '0', 'admin', '2022-07-22 01:20:03', '', NULL, '编程');
INSERT INTO `sys_dict_data` VALUES (102, 1, '日常', '1', 'sys_article_type', NULL, 'primary', 'N', '0', 'admin', '2022-07-22 01:20:43', '', NULL, '日常');
INSERT INTO `sys_dict_data` VALUES (103, 0, 'Java', '0', 'sys_article_tag', NULL, 'primary', 'N', '0', 'admin', '2022-07-22 01:21:22', '', NULL, 'Java');
INSERT INTO `sys_dict_data` VALUES (104, 0, 'SQL', '1', 'sys_article_tag', NULL, 'primary', 'N', '0', 'admin', '2022-07-22 01:21:38', 'admin', '2022-08-08 09:27:52', 'SQL');
INSERT INTO `sys_dict_data` VALUES (105, 1, '下架', '0', 'sys_article_status', NULL, 'danger', 'N', '0', 'admin', '2022-07-22 19:22:30', 'admin', '2022-08-19 15:48:22', '文章下架');
INSERT INTO `sys_dict_data` VALUES (106, 0, '发布', '1', 'sys_article_status', NULL, 'primary', 'N', '0', 'admin', '2022-07-22 19:22:53', 'admin', '2022-08-19 15:48:16', '文章发布');
INSERT INTO `sys_dict_data` VALUES (107, 0, '默认', '0', 'sys_article_top', NULL, 'primary', 'N', '0', 'admin', '2022-07-22 19:24:59', 'admin', '2022-07-22 19:27:42', '不置顶');
INSERT INTO `sys_dict_data` VALUES (108, 0, '置顶', '1', 'sys_article_top', NULL, 'success', 'N', '0', 'admin', '2022-07-22 19:25:07', 'admin', '2022-08-05 15:51:39', '置顶');
INSERT INTO `sys_dict_data` VALUES (109, 0, '原创', '0', 'sys_article_origin', NULL, 'success', 'N', '0', 'admin', '2022-07-22 19:27:31', 'admin', '2022-08-05 15:51:53', '文章原创');
INSERT INTO `sys_dict_data` VALUES (110, 0, '转载', '1', 'sys_article_origin', NULL, 'primary', 'N', '0', 'admin', '2022-07-22 19:28:10', '', NULL, '转载');
INSERT INTO `sys_dict_data` VALUES (111, 0, '开启', '0', 'sys_article_comment', NULL, 'primary', 'N', '0', 'admin', '2022-07-22 19:28:36', 'admin', '2022-07-22 19:28:40', '开启评论');
INSERT INTO `sys_dict_data` VALUES (112, 0, '关闭', '1', 'sys_article_comment', NULL, 'danger', 'N', '0', 'admin', '2022-07-22 19:28:54', 'admin', '2022-08-05 15:52:04', '关闭评论');
INSERT INTO `sys_dict_data` VALUES (113, 0, '工具', '0', 'sys_website_type', NULL, 'primary', 'N', '0', 'admin', '2022-07-26 15:28:50', '', NULL, '工具');
INSERT INTO `sys_dict_data` VALUES (114, 0, 'Java', '1', 'sys_website_type', NULL, 'primary', 'N', '0', 'admin', '2022-07-26 15:29:03', '', NULL, 'Java');
INSERT INTO `sys_dict_data` VALUES (115, 0, '前端', '2', 'sys_website_type', NULL, 'primary', 'N', '0', 'admin', '2022-07-26 15:29:13', 'admin', '2022-07-26 15:29:18', '前端');
INSERT INTO `sys_dict_data` VALUES (116, 0, '发布', '0', 'sys_website_status', NULL, 'success', 'N', '0', 'admin', '2022-07-26 15:32:28', 'admin', '2022-09-09 16:40:26', '发布');
INSERT INTO `sys_dict_data` VALUES (117, 0, '下架', '1', 'sys_website_status', NULL, 'info', 'N', '0', 'admin', '2022-07-26 15:32:42', 'admin', '2022-07-27 16:36:26', '下架');
INSERT INTO `sys_dict_data` VALUES (118, 0, 'Spring', '2', 'sys_article_tag', NULL, 'primary', 'N', '0', 'admin', '2022-08-08 09:27:25', 'admin', '2022-08-08 09:27:39', 'spring');
INSERT INTO `sys_dict_data` VALUES (119, 0, 'Spring MVC', '3', 'sys_article_tag', NULL, 'primary', 'N', '0', 'admin', '2022-08-08 09:28:23', '', NULL, 'Spring MVC');
INSERT INTO `sys_dict_data` VALUES (120, 0, 'MyBatis', '4', 'sys_article_tag', NULL, 'primary', 'N', '0', 'admin', '2022-08-08 09:28:42', 'admin', '2022-08-08 09:28:54', 'Mybatis');
INSERT INTO `sys_dict_data` VALUES (121, 0, '上架', '1', 'sys_summary_status', NULL, 'primary', 'N', '0', 'admin', '2022-08-11 11:31:07', 'admin', '2022-08-11 11:31:40', '上架');
INSERT INTO `sys_dict_data` VALUES (122, 0, '下架', '0', 'sys_summary_status', NULL, 'danger', 'N', '0', 'admin', '2022-08-11 11:31:26', 'admin', '2022-08-11 11:31:35', '下架');
INSERT INTO `sys_dict_data` VALUES (123, 0, '默认', '0', 'sys_summary_top', NULL, 'success', 'N', '0', 'admin', '2022-08-12 19:17:40', 'admin', '2022-08-12 19:43:52', '不显示在首页');
INSERT INTO `sys_dict_data` VALUES (124, 0, '展示', '1', 'sys_summary_top', NULL, 'primary', 'N', '0', 'admin', '2022-08-12 19:17:54', 'admin', '2022-08-12 19:43:48', '显示在首页');
INSERT INTO `sys_dict_data` VALUES (125, 0, 'BUG', '2', 'sys_article_type', NULL, 'primary', 'N', '0', 'admin', '2022-08-19 15:45:26', 'admin', '2022-08-19 15:45:32', 'BUG');
INSERT INTO `sys_dict_data` VALUES (126, 0, '算法', '5', 'sys_article_tag', NULL, 'primary', 'N', '0', 'admin', '2022-08-19 15:46:31', '', NULL, '算法');
INSERT INTO `sys_dict_data` VALUES (127, 0, 'JUC', '6', 'sys_article_tag', NULL, 'primary', 'N', '0', 'admin', '2022-08-29 09:25:52', '', NULL, 'JUC');
INSERT INTO `sys_dict_data` VALUES (128, 0, '发布', '1', 'sys_friend_link', NULL, 'primary', 'N', '0', 'admin', '2022-09-09 16:40:51', '', NULL, '发布');
INSERT INTO `sys_dict_data` VALUES (129, 0, '下架', '0', 'sys_friend_link', NULL, 'danger', 'N', '0', 'admin', '2022-09-09 16:41:10', '', NULL, '下架');
INSERT INTO `sys_dict_data` VALUES (130, 0, '留言板', '0', 'article_comment_type', NULL, 'primary', 'N', '0', 'admin', '2022-09-11 15:32:58', '', NULL, '留言板');
INSERT INTO `sys_dict_data` VALUES (131, 0, '文章', '1', 'article_comment_type', NULL, 'success', 'N', '0', 'admin', '2022-09-11 15:33:16', '', NULL, '文章评论');
INSERT INTO `sys_dict_data` VALUES (132, 0, '未回复', '0', 'article_comment_status', NULL, 'danger', 'N', '0', 'admin', '2022-09-11 15:35:37', 'admin', '2022-09-11 15:35:46', '未回复');
INSERT INTO `sys_dict_data` VALUES (133, 0, '已回复', '1', 'article_comment_status', NULL, 'success', 'N', '0', 'admin', '2022-09-11 15:35:58', 'admin', '2022-09-11 15:36:10', '已回复');
INSERT INTO `sys_dict_data` VALUES (134, 0, '未审核', '0', 'article_comment_audit_status', NULL, 'info', 'N', '0', 'admin', '2022-09-23 21:08:23', '', NULL, '未审核');
INSERT INTO `sys_dict_data` VALUES (135, 0, '通过', '1', 'article_comment_audit_status', NULL, 'success', 'N', '0', 'admin', '2022-09-23 21:08:41', '', NULL, '通过');
INSERT INTO `sys_dict_data` VALUES (136, 0, '未通过', '2', 'article_comment_audit_status', NULL, 'danger', 'N', '0', 'admin', '2022-09-23 21:09:02', '', NULL, '未通过');
INSERT INTO `sys_dict_data` VALUES (137, 0, 'OSS', '7', 'sys_article_tag', NULL, 'primary', 'N', '0', 'admin', '2022-09-26 10:06:37', '', NULL, 'OSS');
INSERT INTO `sys_dict_data` VALUES (138, 0, '短信', '9', 'sys_article_tag', NULL, 'primary', 'N', '0', 'admin', '2022-09-26 14:51:32', '', NULL, '短信');
INSERT INTO `sys_dict_data` VALUES (139, 0, 'NIO', '10', 'sys_article_tag', NULL, 'primary', 'N', '0', 'admin', '2022-09-30 15:07:08', '', NULL, 'NIO');
INSERT INTO `sys_dict_data` VALUES (140, 0, 'Netty', '11', 'sys_article_tag', NULL, 'primary', 'N', '0', 'admin', '2022-10-14 14:57:51', 'admin', '2022-10-14 14:58:09', NULL);

-- ----------------------------
-- Table structure for sys_dict_type
-- ----------------------------
DROP TABLE IF EXISTS `sys_dict_type`;
CREATE TABLE `sys_dict_type`  (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '字典主键',
  `dict_name` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '字典名称',
  `dict_type` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '字典类型',
  `status` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '0' COMMENT '状态（0正常 1停用）',
  `create_by` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '创建者',
  `create_time` datetime NULL DEFAULT NULL COMMENT '创建时间',
  `update_by` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '更新者',
  `update_time` datetime NULL DEFAULT NULL COMMENT '更新时间',
  `remark` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '备注',
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `dict_type`(`dict_type`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 118 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = '字典类型表' ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of sys_dict_type
-- ----------------------------
INSERT INTO `sys_dict_type` VALUES (1, '用户性别', 'sys_user_sex', '0', 'admin', '2022-04-27 02:10:24', 'admin', '2022-07-22 06:57:38', '用户性别列表');
INSERT INTO `sys_dict_type` VALUES (2, '菜单状态', 'sys_show_hide', '0', 'admin', '2022-04-27 02:10:24', '', NULL, '菜单状态列表');
INSERT INTO `sys_dict_type` VALUES (3, '系统开关', 'sys_normal_disable', '0', 'admin', '2022-04-27 02:10:24', '', NULL, '系统开关列表');
INSERT INTO `sys_dict_type` VALUES (4, '任务状态', 'sys_job_status', '0', 'admin', '2022-04-27 02:10:24', '', NULL, '任务状态列表');
INSERT INTO `sys_dict_type` VALUES (5, '任务分组', 'sys_job_group', '0', 'admin', '2022-04-27 02:10:24', '', NULL, '任务分组列表');
INSERT INTO `sys_dict_type` VALUES (6, '系统是否', 'sys_yes_no', '0', 'admin', '2022-04-27 02:10:24', '', NULL, '系统是否列表');
INSERT INTO `sys_dict_type` VALUES (7, '通知类型', 'sys_notice_type', '0', 'admin', '2022-04-27 02:10:24', '', NULL, '通知类型列表');
INSERT INTO `sys_dict_type` VALUES (8, '通知状态', 'sys_notice_status', '0', 'admin', '2022-04-27 02:10:24', '', NULL, '通知状态列表');
INSERT INTO `sys_dict_type` VALUES (9, '操作类型', 'sys_oper_type', '0', 'admin', '2022-04-27 02:10:24', '', NULL, '操作类型列表');
INSERT INTO `sys_dict_type` VALUES (10, '系统状态', 'sys_common_status', '0', 'admin', '2022-04-27 02:10:24', '', NULL, '登录状态列表');
INSERT INTO `sys_dict_type` VALUES (100, '文章分类', 'sys_article_type', '0', 'admin', '2022-07-20 01:14:22', 'admin', '2022-07-22 06:17:14', '文章分类');
INSERT INTO `sys_dict_type` VALUES (104, '文章标签', 'sys_article_tag', '0', 'admin', '2022-07-22 01:19:31', '', NULL, '文章标签');
INSERT INTO `sys_dict_type` VALUES (106, '文章状态', 'sys_article_status', '0', 'admin', '2022-07-22 17:09:06', '', NULL, '文章状态');
INSERT INTO `sys_dict_type` VALUES (107, '文章置顶', 'sys_article_top', '0', 'admin', '2022-07-22 19:23:51', '', NULL, '文章是否置顶');
INSERT INTO `sys_dict_type` VALUES (108, '文章原创', 'sys_article_origin', '0', 'admin', '2022-07-22 19:26:02', '', NULL, '文章是否原创');
INSERT INTO `sys_dict_type` VALUES (109, '文章评论', 'sys_article_comment', '0', 'admin', '2022-07-22 19:26:44', '', NULL, '是否开启评论');
INSERT INTO `sys_dict_type` VALUES (110, '资源分类', 'sys_website_type', '0', 'admin', '2022-07-26 15:27:22', '', NULL, '资源分类');
INSERT INTO `sys_dict_type` VALUES (111, '资源状态', 'sys_website_status', '0', 'admin', '2022-07-26 15:32:05', '', NULL, '资源状态');
INSERT INTO `sys_dict_type` VALUES (112, '归档状态', 'sys_summary_status', '0', 'admin', '2022-08-11 11:30:26', '', NULL, '归档状态');
INSERT INTO `sys_dict_type` VALUES (113, '归档置顶', 'sys_summary_top', '0', 'admin', '2022-08-12 19:17:03', '', NULL, '归档置顶');
INSERT INTO `sys_dict_type` VALUES (114, '友链状态', 'sys_friend_link', '0', 'admin', '2022-09-09 16:38:49', '', NULL, '友链状态');
INSERT INTO `sys_dict_type` VALUES (115, '评论类型', 'article_comment_type', '0', 'admin', '2022-09-11 15:32:13', '', NULL, '评论类型');
INSERT INTO `sys_dict_type` VALUES (116, '评论状态', 'article_comment_status', '0', 'admin', '2022-09-11 15:35:16', 'admin', '2022-09-12 19:04:17', '评论状态');
INSERT INTO `sys_dict_type` VALUES (117, '评论审核状态', 'article_comment_audit_status', '0', 'admin', '2022-09-23 21:08:01', '', NULL, '评论审核状态');

-- ----------------------------
-- Table structure for sys_logininfor
-- ----------------------------
DROP TABLE IF EXISTS `sys_logininfor`;
CREATE TABLE `sys_logininfor`  (
  `info_id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '访问ID',
  `user_name` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '用户账号',
  `ipaddr` varchar(128) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '登录IP地址',
  `login_location` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '登录地点',
  `browser` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '浏览器类型',
  `os` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '操作系统',
  `status` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '0' COMMENT '登录状态（0成功 1失败）',
  `msg` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '提示消息',
  `login_time` datetime NULL DEFAULT NULL COMMENT '访问时间',
  PRIMARY KEY (`info_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 112 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = '系统访问记录' ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of sys_logininfor
-- ----------------------------
INSERT INTO `sys_logininfor` VALUES (100, 'admin', '127.0.0.1', '内网IP', 'Chrome 10', 'Windows 10', '0', '登录成功', '2022-04-27 02:14:22');
INSERT INTO `sys_logininfor` VALUES (101, 'admin', '127.0.0.1', '内网IP', 'Chrome 10', 'Windows 10', '0', '登录成功', '2022-05-13 07:16:40');
INSERT INTO `sys_logininfor` VALUES (102, 'admin', '127.0.0.1', '内网IP', 'Chrome 10', 'Windows 10', '0', '登录成功', '2022-07-11 01:19:05');
INSERT INTO `sys_logininfor` VALUES (103, 'admin', '127.0.0.1', '内网IP', 'Chrome 10', 'Windows 10', '0', '登录成功', '2022-07-11 06:03:09');
INSERT INTO `sys_logininfor` VALUES (104, 'admin', '127.0.0.1', '内网IP', 'Chrome 10', 'Windows 10', '0', '登录成功', '2022-07-11 07:08:20');
INSERT INTO `sys_logininfor` VALUES (105, 'admin', '127.0.0.1', '内网IP', 'Chrome 10', 'Windows 10', '0', '登录成功', '2022-07-20 00:52:08');
INSERT INTO `sys_logininfor` VALUES (106, 'admin', '127.0.0.1', '内网IP', 'Chrome 10', 'Windows 10', '0', '登录成功', '2022-07-21 08:29:27');
INSERT INTO `sys_logininfor` VALUES (107, 'admin', '127.0.0.1', '内网IP', 'Chrome 10', 'Windows 10', '1', '验证码错误', '2022-07-21 09:20:15');
INSERT INTO `sys_logininfor` VALUES (108, 'admin', '127.0.0.1', '内网IP', 'Chrome 10', 'Windows 10', '0', '登录成功', '2022-07-21 09:20:21');
INSERT INTO `sys_logininfor` VALUES (109, 'admin', '127.0.0.1', '内网IP', 'Chrome 10', 'Windows 10', '0', '退出成功', '2022-07-21 09:30:15');
INSERT INTO `sys_logininfor` VALUES (110, 'admin', '127.0.0.1', '内网IP', 'Chrome 10', 'Windows 10', '0', '登录成功', '2022-07-21 09:30:22');
INSERT INTO `sys_logininfor` VALUES (111, 'admin', '127.0.0.1', '内网IP', 'Chrome 10', 'Windows 10', '0', '登录成功', '2022-07-21 11:05:38');

-- ----------------------------
-- Table structure for sys_notice
-- ----------------------------
DROP TABLE IF EXISTS `sys_notice`;
CREATE TABLE `sys_notice`  (
  `notice_id` int(4) NOT NULL AUTO_INCREMENT COMMENT '公告ID',
  `notice_title` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '公告标题',
  `notice_type` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '公告类型（1通知 2公告）',
  `notice_content` longblob NULL COMMENT '公告内容',
  `status` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '0' COMMENT '公告状态（0正常 1关闭）',
  `create_by` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '创建者',
  `create_time` datetime NULL DEFAULT NULL COMMENT '创建时间',
  `update_by` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '更新者',
  `update_time` datetime NULL DEFAULT NULL COMMENT '更新时间',
  `remark` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '备注',
  PRIMARY KEY (`notice_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = '通知公告表' ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of sys_notice
-- ----------------------------

-- ----------------------------
-- Table structure for sys_oper_log
-- ----------------------------
DROP TABLE IF EXISTS `sys_oper_log`;
CREATE TABLE `sys_oper_log`  (
  `oper_id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '日志主键',
  `title` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '模块标题',
  `business_type` int(2) NULL DEFAULT 0 COMMENT '业务类型（0其它 1新增 2修改 3删除）',
  `method` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '方法名称',
  `request_method` varchar(10) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '请求方式',
  `operator_type` int(1) NULL DEFAULT 0 COMMENT '操作类别（0其它 1后台用户 2手机端用户）',
  `oper_name` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '操作人员',
  `dept_name` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '部门名称',
  `oper_url` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '请求URL',
  `oper_ip` varchar(128) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '主机地址',
  `oper_location` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '操作地点',
  `oper_param` varchar(2000) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '请求参数',
  `json_result` varchar(2000) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '返回参数',
  `status` int(1) NULL DEFAULT 0 COMMENT '操作状态（0正常 1异常）',
  `error_msg` varchar(2000) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '错误消息',
  `oper_time` datetime NULL DEFAULT NULL COMMENT '操作时间',
  PRIMARY KEY (`oper_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 21 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = '操作日志记录' ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of sys_oper_log
-- ----------------------------
INSERT INTO `sys_oper_log` VALUES (1, '操作日志', 9, 'com.jzj.vblog.web.controller.admin.SysOperLogController.clean()', 'DELETE', 1, 'admin', NULL, '/monitor/operlog/clean', '127.0.0.1', '内网IP', '{}', '{\"code\":20000,\"msg\":\"操作成功\",\"success\":true}', 0, NULL, '2022-10-13 16:34:16');
INSERT INTO `sys_oper_log` VALUES (2, '文章管理', 3, 'com.jzj.vblog.web.controller.admin.ArticleInformController.deleteBthById()', 'DELETE', 1, 'admin', NULL, '/article/inform/c2317a9079991be3273a65254f263441,320ab09bf4402f0abb812e8530e217ea', '127.0.0.1', '内网IP', '{ids=c2317a9079991be3273a65254f263441,320ab09bf4402f0abb812e8530e217ea}', '{\"code\":20000,\"msg\":\"操作成功\",\"success\":true}', 0, NULL, '2022-10-14 10:54:04');
INSERT INTO `sys_oper_log` VALUES (3, '文章管理', 3, 'com.jzj.vblog.web.controller.admin.ArticleInformController.deleteBthById()', 'DELETE', 1, 'admin', NULL, '/article/inform/4fd382ced2e902c7ff6373c440b95174', '127.0.0.1', '内网IP', '{ids=4fd382ced2e902c7ff6373c440b95174}', '{\"code\":20000,\"msg\":\"操作成功\",\"success\":true}', 0, NULL, '2022-10-14 10:54:29');
INSERT INTO `sys_oper_log` VALUES (4, '文章管理', 3, 'com.jzj.vblog.web.controller.admin.ArticleInformController.deleteBthById()', 'DELETE', 1, 'admin', NULL, '/article/inform/0ae360525f681ccd6c35c0cda7bc87c2', '127.0.0.1', '内网IP', '{ids=0ae360525f681ccd6c35c0cda7bc87c2}', '{\"code\":20000,\"msg\":\"操作成功\",\"success\":true}', 0, NULL, '2022-10-14 10:54:32');
INSERT INTO `sys_oper_log` VALUES (5, '文章管理', 3, 'com.jzj.vblog.web.controller.admin.ArticleInformController.deleteBthById()', 'DELETE', 1, 'admin', NULL, '/article/inform/7d9a6f525ea2d6778e3b2a58a2d985a7', '127.0.0.1', '内网IP', '{ids=7d9a6f525ea2d6778e3b2a58a2d985a7}', '{\"code\":20000,\"msg\":\"操作成功\",\"success\":true}', 0, NULL, '2022-10-14 10:54:34');
INSERT INTO `sys_oper_log` VALUES (6, '字典类型', 1, 'com.jzj.vblog.web.controller.admin.SysDictDataController.add()', 'POST', 1, 'admin', NULL, '/system/dict/data', '127.0.0.1', '内网IP', '{\"dictValue\":\"11\",\"listClass\":\"default\",\"dictSort\":0,\"updateTime\":1665730671863,\"params\":{},\"dictType\":\"sys_article_tag\",\"dictLabel\":\"Netty\",\"createBy\":\"admin\",\"createTime\":1665730671863,\"status\":\"0\"}', '{\"code\":20000,\"msg\":\"操作成功\",\"success\":true}', 0, NULL, '2022-10-14 14:57:51');
INSERT INTO `sys_oper_log` VALUES (7, '字典类型', 2, 'com.jzj.vblog.web.controller.admin.SysDictDataController.edit()', 'PUT', 1, 'admin', NULL, '/system/dict/data', '127.0.0.1', '内网IP', '{\"dictValue\":\"11\",\"listClass\":\"primary\",\"dictSort\":0,\"updateTime\":1665730689819,\"params\":{},\"dictType\":\"sys_article_tag\",\"dictLabel\":\"Netty\",\"createBy\":\"admin\",\"isDefault\":\"N\",\"createTime\":1665730671000,\"updateBy\":\"admin\",\"id\":140,\"status\":\"0\"}', '{\"code\":20000,\"msg\":\"操作成功\",\"success\":true}', 0, NULL, '2022-10-14 14:58:09');
INSERT INTO `sys_oper_log` VALUES (8, '文件管理', 1, 'com.jzj.vblog.web.controller.UploadController.uploadImg()', 'POST', 1, 'admin', NULL, '//api/upload/uploadImg', '127.0.0.1', '内网IP', 'articleLog', '{\"code\":20000,\"data\":{\"url\":\"https://vue-vblog.oss-cn-shenzhen.aliyuncs.com/articleLog/2022/10/14/6272a5d1e471446f87be42e2091d43cd.jpg\"},\"msg\":\"操作成功\",\"success\":true}', 0, NULL, '2022-10-14 15:03:42');
INSERT INTO `sys_oper_log` VALUES (9, '文章管理', 1, 'com.jzj.vblog.web.controller.admin.ArticleInformController.add()', 'POST', 1, 'admin', NULL, '/article/inform', '127.0.0.1', '内网IP', '{\"articleTitle\":\"11\",\"introduce\":\"dfds\",\"logImg\":\"https://vue-vblog.oss-cn-shenzhen.aliyuncs.com/articleLog/2022/10/14/6272a5d1e471446f87be42e2091d43cd.jpg\",\"sort\":0,\"content\":\"\",\"commentStatus\":\"0\",\"htmlContent\":\"\",\"articleTag\":\"11\",\"aggregateId\":\"09d7c62e8f9d0348782c6381e2c0b6c0\",\"articleType\":\"1\",\"topStatus\":\"0\",\"originStatus\":\"0\",\"status\":\"1\"}', '{\"code\":20000,\"msg\":\"操作成功\",\"success\":true}', 0, NULL, '2022-10-14 15:03:51');
INSERT INTO `sys_oper_log` VALUES (10, '文章管理', 3, 'com.jzj.vblog.web.controller.admin.ArticleInformController.deleteBthById()', 'DELETE', 1, 'admin', NULL, '/article/inform/e770d1bc5712e1efe9462c2017d6cf1c', '127.0.0.1', '内网IP', '{ids=e770d1bc5712e1efe9462c2017d6cf1c}', '{\"code\":20000,\"msg\":\"操作成功\",\"success\":true}', 0, NULL, '2022-10-14 15:04:09');
INSERT INTO `sys_oper_log` VALUES (11, '文件管理', 1, 'com.jzj.vblog.web.controller.UploadController.uploadImg()', 'POST', 1, 'admin', NULL, '//api/upload/uploadImg', '127.0.0.1', '内网IP', 'articleLog', '{\"code\":20000,\"data\":{\"url\":\"https://vue-vblog.oss-cn-shenzhen.aliyuncs.com/articleLog/2022/10/14/fb21f45fe2c04401a1b186f2f17ec80b.jpg\"},\"msg\":\"操作成功\",\"success\":true}', 0, NULL, '2022-10-14 15:22:59');
INSERT INTO `sys_oper_log` VALUES (12, '文章管理', 1, 'com.jzj.vblog.web.controller.admin.ArticleInformController.add()', 'POST', 1, 'admin', NULL, '/article/inform', '127.0.0.1', '内网IP', '{\"articleTitle\":\"Netty-入门\",\"introduce\":\"Netty-入门\",\"logImg\":\"https://vue-vblog.oss-cn-shenzhen.aliyuncs.com/articleLog/2022/10/14/fb21f45fe2c04401a1b186f2f17ec80b.jpg\",\"sort\":0,\"content\":\"# 二. Netty \\n\\n\\n\\n## 1. 概述\\n\\n### 1.1 Netty 是什么？\\n\\n```\\nNetty is an asynchronous event-driven network application framework\\nfor rapid development of maintainable high performance protocol servers & clients.\\n```\\n\\nNetty 是一个异步的、基于事件驱动的网络应用框架，用于快速开发可维护、高性能的网络服务器和客户端\\n\\n\\n\\n### 1.2 Netty 的作者\\n\\n![](img/0005.png)\\n\\n他还是另一个著名网络应用框架 Mina 的重要贡献者\\n\\n\\n\\n### 1.3 Netty 的地位\\n\\nNetty 在 Java 网络应用框架中的地位就好比：Spring 框架在 JavaEE 开发中的地位\\n\\n以下的框架都使用了 Netty，因为它们有网络通信需求！\\n\\n* Cassandra - nosql 数据库\\n* Spark - 大数据分布式计算框架\\n* Hadoop - 大数据分布式存储框架\\n* RocketMQ - ali 开源的消息队列\\n* ElasticSearch - 搜索引擎\\n* gRPC - rpc 框架\\n* Dubbo - rpc 框架\\n* Spring 5.x - flux api 完全抛弃了 tomcat ，使用 netty 作为服务器端\\n* Zookeeper - 分布式协调框架\\n\\n\\n\\n### 1.4 Netty 的优势\\n\\n* Netty vs NIO，工作量大，bug 多\\n  * 需要自己构建协议\\n  * 解决 TCP 传输问题，如粘包、半包\\n  * epoll 空轮询导致 CPU 100%\\n  * 对 API 进行增强，使之更易用，如 FastThreadLocal => ThreadLocal，ByteBuf => ByteBuffer\\n* Netty vs 其它网络应用框架\\n  * Mina 由 apache 维护，将来 3.x 版本可能会有较大重构，破坏 API 向下兼容性，Netty 的开发迭代更迅速，API 更简洁、文档更优秀\\n  * 久经考验，16年，Netty 版本\\n    * 2.x 2004\\n    * 3.x 2008\\n    * 4.x 2013\\n    * 5.x 已废弃（没有明显的性能提升，维护成本高）\\n\\n\\n\\n## 2. Hello World\\n\\n### 2.1 目标\\n\\n开发一个简单的服务器端和客户端\\n\\n* 客户端向服务器端发送 hello, world\\n* 服务器仅接收，不返回\\n\\n\\n\\n加入依赖\\n\\n```xml\\n<dependency>\\n    <groupId>io.netty</groupId>\\n    <artifactId>netty-all</artifactId>\\n    <version>4.1.39.Final</version>\\n</dependency>\\n```\\n\\n\\n\\n\\n\\n### 2.2 服务器端\\n\\n```java\\nnew ServerBootstrap()\\n    .group(new NioEventLoopGroup()) // 1\\n    .channel(NioServerSocketChannel.class) // 2\\n    .childHandler(new ChannelInitializer<NioSocketChannel>() { // 3\\n        protected void initChannel(NioSocketChannel ch) {\\n            ch.pipeline().addLast(new StringDecoder()); // 5\\n            ch.pipeline().addLast(new SimpleChannelInboundHandler<String>() { // 6\\n                @Override\\n  ', '{\"code\":20000,\"msg\":\"操作成功\",\"success\":true}', 0, NULL, '2022-10-14 15:23:35');
INSERT INTO `sys_oper_log` VALUES (13, '文章管理', 2, 'com.jzj.vblog.web.controller.admin.ArticleInformController.updateById()', 'PUT', 1, 'admin', NULL, '/article/inform', '127.0.0.1', '内网IP', '{\"articleTitle\":\"Netty（入门）\",\"introduce\":\"黑马Netty入门笔记\",\"logImg\":\"https://vue-vblog.oss-cn-shenzhen.aliyuncs.com/articleLog/2022/10/14/fb21f45fe2c04401a1b186f2f17ec80b.jpg\",\"sort\":0,\"content\":\"# 二. Netty \\n\\n\\n\\n## 1. 概述\\n\\n### 1.1 Netty 是什么？\\n\\n```\\nNetty is an asynchronous event-driven network application framework\\nfor rapid development of maintainable high performance protocol servers & clients.\\n```\\n\\nNetty 是一个异步的、基于事件驱动的网络应用框架，用于快速开发可维护、高性能的网络服务器和客户端\\n\\n\\n\\n### 1.2 Netty 的作者\\n\\n![](img/0005.png)\\n\\n他还是另一个著名网络应用框架 Mina 的重要贡献者\\n\\n\\n\\n### 1.3 Netty 的地位\\n\\nNetty 在 Java 网络应用框架中的地位就好比：Spring 框架在 JavaEE 开发中的地位\\n\\n以下的框架都使用了 Netty，因为它们有网络通信需求！\\n\\n* Cassandra - nosql 数据库\\n* Spark - 大数据分布式计算框架\\n* Hadoop - 大数据分布式存储框架\\n* RocketMQ - ali 开源的消息队列\\n* ElasticSearch - 搜索引擎\\n* gRPC - rpc 框架\\n* Dubbo - rpc 框架\\n* Spring 5.x - flux api 完全抛弃了 tomcat ，使用 netty 作为服务器端\\n* Zookeeper - 分布式协调框架\\n\\n\\n\\n### 1.4 Netty 的优势\\n\\n* Netty vs NIO，工作量大，bug 多\\n  * 需要自己构建协议\\n  * 解决 TCP 传输问题，如粘包、半包\\n  * epoll 空轮询导致 CPU 100%\\n  * 对 API 进行增强，使之更易用，如 FastThreadLocal => ThreadLocal，ByteBuf => ByteBuffer\\n* Netty vs 其它网络应用框架\\n  * Mina 由 apache 维护，将来 3.x 版本可能会有较大重构，破坏 API 向下兼容性，Netty 的开发迭代更迅速，API 更简洁、文档更优秀\\n  * 久经考验，16年，Netty 版本\\n    * 2.x 2004\\n    * 3.x 2008\\n    * 4.x 2013\\n    * 5.x 已废弃（没有明显的性能提升，维护成本高）\\n\\n\\n\\n## 2. Hello World\\n\\n### 2.1 目标\\n\\n开发一个简单的服务器端和客户端\\n\\n* 客户端向服务器端发送 hello, world\\n* 服务器仅接收，不返回\\n\\n\\n\\n加入依赖\\n\\n```xml\\n<dependency>\\n    <groupId>io.netty</groupId>\\n    <artifactId>netty-all</artifactId>\\n    <version>4.1.39.Final</version>\\n</dependency>\\n```\\n\\n\\n\\n\\n\\n### 2.2 服务器端\\n\\n```java\\nnew ServerBootstrap()\\n    .group(new NioEventLoopGroup()) // 1\\n    .channel(NioServerSocketChannel.class) // 2\\n    .childHandler(new ChannelInitializer<NioSocketChannel>() { // 3\\n        protected void initChannel(NioSocketChannel ch) {\\n            ch.pipeline().addLast(new StringDecoder()); // 5\\n            ch.pipeline().addLast(new SimpleChannelInboundHandler<String>() { // 6\\n                @Override', '{\"code\":20000,\"msg\":\"操作成功\",\"success\":true}', 0, NULL, '2022-10-14 15:26:43');
INSERT INTO `sys_oper_log` VALUES (14, '文章管理', 2, 'com.jzj.vblog.web.controller.admin.ArticleInformController.updateById()', 'PUT', 1, 'admin', NULL, '/article/inform', '127.0.0.1', '内网IP', '{\"articleTitle\":\"Netty（入门）\",\"introduce\":\"黑马Netty入门笔记\",\"logImg\":\"https://vue-vblog.oss-cn-shenzhen.aliyuncs.com/articleLog/2022/10/14/fb21f45fe2c04401a1b186f2f17ec80b.jpg\",\"sort\":0,\"content\":\"# 二. Netty \\n\\n\\n\\n## 1. 概述\\n\\n### 1.1 Netty 是什么？\\n\\n```\\nNetty is an asynchronous event-driven network application framework\\nfor rapid development of maintainable high performance protocol servers & clients.\\n```\\n\\nNetty 是一个异步的、基于事件驱动的网络应用框架，用于快速开发可维护、高性能的网络服务器和客户端\\n\\n\\n\\n### 1.2 Netty 的作者\\n\\n![](img/0005.png)\\n\\n他还是另一个著名网络应用框架 Mina 的重要贡献者\\n\\n\\n\\n### 1.3 Netty 的地位\\n\\nNetty 在 Java 网络应用框架中的地位就好比：Spring 框架在 JavaEE 开发中的地位\\n\\n以下的框架都使用了 Netty，因为它们有网络通信需求！\\n\\n* Cassandra - nosql 数据库\\n* Spark - 大数据分布式计算框架\\n* Hadoop - 大数据分布式存储框架\\n* RocketMQ - ali 开源的消息队列\\n* ElasticSearch - 搜索引擎\\n* gRPC - rpc 框架\\n* Dubbo - rpc 框架\\n* Spring 5.x - flux api 完全抛弃了 tomcat ，使用 netty 作为服务器端\\n* Zookeeper - 分布式协调框架\\n\\n\\n\\n### 1.4 Netty 的优势\\n\\n* Netty vs NIO，工作量大，bug 多\\n  * 需要自己构建协议\\n  * 解决 TCP 传输问题，如粘包、半包\\n  * epoll 空轮询导致 CPU 100%\\n  * 对 API 进行增强，使之更易用，如 FastThreadLocal => ThreadLocal，ByteBuf => ByteBuffer\\n* Netty vs 其它网络应用框架\\n  * Mina 由 apache 维护，将来 3.x 版本可能会有较大重构，破坏 API 向下兼容性，Netty 的开发迭代更迅速，API 更简洁、文档更优秀\\n  * 久经考验，16年，Netty 版本\\n    * 2.x 2004\\n    * 3.x 2008\\n    * 4.x 2013\\n    * 5.x 已废弃（没有明显的性能提升，维护成本高）\\n\\n\\n\\n## 2. Hello World\\n\\n### 2.1 目标\\n\\n开发一个简单的服务器端和客户端\\n\\n* 客户端向服务器端发送 hello, world\\n* 服务器仅接收，不返回\\n\\n\\n\\n加入依赖\\n\\n```xml\\n<dependency>\\n    <groupId>io.netty</groupId>\\n    <artifactId>netty-all</artifactId>\\n    <version>4.1.39.Final</version>\\n</dependency>\\n```\\n\\n\\n\\n\\n\\n### 2.2 服务器端\\n\\n```java\\nnew ServerBootstrap()\\n    .group(new NioEventLoopGroup()) // 1\\n    .channel(NioServerSocketChannel.class) // 2\\n    .childHandler(new ChannelInitializer<NioSocketChannel>() { // 3\\n        protected void initChannel(NioSocketChannel ch) {\\n            ch.pipeline().addLast(new StringDecoder()); // 5\\n            ch.pipeline().addLast(new SimpleChannelInboundHandler<String>() { // 6\\n                @Override', '{\"code\":20000,\"msg\":\"操作成功\",\"success\":true}', 0, NULL, '2022-10-14 15:28:51');
INSERT INTO `sys_oper_log` VALUES (15, '文章管理', 2, 'com.jzj.vblog.web.controller.admin.ArticleInformController.updateById()', 'PUT', 1, 'admin', NULL, '/article/inform', '127.0.0.1', '内网IP', '{\"articleTitle\":\"Netty（入门）\",\"introduce\":\"黑马Netty入门笔记\",\"logImg\":\"https://vue-vblog.oss-cn-shenzhen.aliyuncs.com/articleLog/2022/10/14/fb21f45fe2c04401a1b186f2f17ec80b.jpg\",\"sort\":0,\"content\":\"# 二. Netty \\n\\n\\n\\n## 1. 概述\\n\\n### 1.1 Netty 是什么？\\n\\n```\\nNetty is an asynchronous event-driven network application framework\\nfor rapid development of maintainable high performance protocol servers & clients.\\n```\\n\\nNetty 是一个异步的、基于事件驱动的网络应用框架，用于快速开发可维护、高性能的网络服务器和客户端\\n\\n\\n\\n### 1.2 Netty 的作者\\n\\n![](img/0005.png)\\n\\n他还是另一个著名网络应用框架 Mina 的重要贡献者\\n\\n\\n\\n### 1.3 Netty 的地位\\n\\nNetty 在 Java 网络应用框架中的地位就好比：Spring 框架在 JavaEE 开发中的地位\\n\\n以下的框架都使用了 Netty，因为它们有网络通信需求！\\n\\n* Cassandra - nosql 数据库\\n* Spark - 大数据分布式计算框架\\n* Hadoop - 大数据分布式存储框架\\n* RocketMQ - ali 开源的消息队列\\n* ElasticSearch - 搜索引擎\\n* gRPC - rpc 框架\\n* Dubbo - rpc 框架\\n* Spring 5.x - flux api 完全抛弃了 tomcat ，使用 netty 作为服务器端\\n* Zookeeper - 分布式协调框架\\n\\n\\n\\n### 1.4 Netty 的优势\\n\\n* Netty vs NIO，工作量大，bug 多\\n  * 需要自己构建协议\\n  * 解决 TCP 传输问题，如粘包、半包\\n  * epoll 空轮询导致 CPU 100%\\n  * 对 API 进行增强，使之更易用，如 FastThreadLocal => ThreadLocal，ByteBuf => ByteBuffer\\n* Netty vs 其它网络应用框架\\n  * Mina 由 apache 维护，将来 3.x 版本可能会有较大重构，破坏 API 向下兼容性，Netty 的开发迭代更迅速，API 更简洁、文档更优秀\\n  * 久经考验，16年，Netty 版本\\n    * 2.x 2004\\n    * 3.x 2008\\n    * 4.x 2013\\n    * 5.x 已废弃（没有明显的性能提升，维护成本高）\\n\\n\\n\\n## 2. Hello World\\n\\n### 2.1 目标\\n\\n开发一个简单的服务器端和客户端\\n\\n* 客户端向服务器端发送 hello, world\\n* 服务器仅接收，不返回\\n\\n\\n\\n加入依赖\\n\\n```xml\\n<dependency>\\n    <groupId>io.netty</groupId>\\n    <artifactId>netty-all</artifactId>\\n    <version>4.1.39.Final</version>\\n</dependency>\\n```\\n\\n\\n\\n\\n\\n### 2.2 服务器端\\n\\n```java\\nnew ServerBootstrap()\\n    .group(new NioEventLoopGroup()) // 1\\n    .channel(NioServerSocketChannel.class) // 2\\n    .childHandler(new ChannelInitializer<NioSocketChannel>() { // 3\\n        protected void initChannel(NioSocketChannel ch) {\\n            ch.pipeline().addLast(new StringDecoder()); // 5\\n            ch.pipeline().addLast(new SimpleChannelInboundHandler<String>() { // 6\\n                @Override', '{\"code\":20000,\"msg\":\"操作成功\",\"success\":true}', 0, NULL, '2022-10-14 15:30:35');
INSERT INTO `sys_oper_log` VALUES (16, '文章管理', 2, 'com.jzj.vblog.web.controller.admin.ArticleInformController.updateById()', 'PUT', 1, 'admin', NULL, '/article/inform', '127.0.0.1', '内网IP', '{\"articleTitle\":\"Netty（入门）\",\"introduce\":\"黑马Netty入门笔记\",\"logImg\":\"https://vue-vblog.oss-cn-shenzhen.aliyuncs.com/articleLog/2022/10/14/fb21f45fe2c04401a1b186f2f17ec80b.jpg\",\"sort\":0,\"content\":\"# 二. Netty \\n\\n\\n\\n## 1. 概述\\n\\n### 1.1 Netty 是什么？\\n\\n```\\nNetty is an asynchronous event-driven network application framework\\nfor rapid development of maintainable high performance protocol servers & clients.\\n```\\n\\nNetty 是一个异步的、基于事件驱动的网络应用框架，用于快速开发可维护、高性能的网络服务器和客户端\\n\\n\\n\\n### 1.2 Netty 的作者\\n\\n![](img/0005.png)\\n\\n他还是另一个著名网络应用框架 Mina 的重要贡献者\\n\\n\\n\\n### 1.3 Netty 的地位\\n\\nNetty 在 Java 网络应用框架中的地位就好比：Spring 框架在 JavaEE 开发中的地位\\n\\n以下的框架都使用了 Netty，因为它们有网络通信需求！\\n\\n* Cassandra - nosql 数据库\\n* Spark - 大数据分布式计算框架\\n* Hadoop - 大数据分布式存储框架\\n* RocketMQ - ali 开源的消息队列\\n* ElasticSearch - 搜索引擎\\n* gRPC - rpc 框架\\n* Dubbo - rpc 框架\\n* Spring 5.x - flux api 完全抛弃了 tomcat ，使用 netty 作为服务器端\\n* Zookeeper - 分布式协调框架\\n\\n\\n\\n### 1.4 Netty 的优势\\n\\n* Netty vs NIO，工作量大，bug 多\\n  * 需要自己构建协议\\n  * 解决 TCP 传输问题，如粘包、半包\\n  * epoll 空轮询导致 CPU 100%\\n  * 对 API 进行增强，使之更易用，如 FastThreadLocal => ThreadLocal，ByteBuf => ByteBuffer\\n* Netty vs 其它网络应用框架\\n  * Mina 由 apache 维护，将来 3.x 版本可能会有较大重构，破坏 API 向下兼容性，Netty 的开发迭代更迅速，API 更简洁、文档更优秀\\n  * 久经考验，16年，Netty 版本\\n    * 2.x 2004\\n    * 3.x 2008\\n    * 4.x 2013\\n    * 5.x 已废弃（没有明显的性能提升，维护成本高）\\n\\n\\n\\n## 2. Hello World\\n\\n### 2.1 目标\\n\\n开发一个简单的服务器端和客户端\\n\\n* 客户端向服务器端发送 hello, world\\n* 服务器仅接收，不返回\\n\\n\\n\\n加入依赖\\n\\n```xml\\n<dependency>\\n    <groupId>io.netty</groupId>\\n    <artifactId>netty-all</artifactId>\\n    <version>4.1.39.Final</version>\\n</dependency>\\n```\\n\\n\\n\\n\\n\\n### 2.2 服务器端\\n\\n```java\\nnew ServerBootstrap()\\n    .group(new NioEventLoopGroup()) // 1\\n    .channel(NioServerSocketChannel.class) // 2\\n    .childHandler(new ChannelInitializer<NioSocketChannel>() { // 3\\n        protected void initChannel(NioSocketChannel ch) {\\n            ch.pipeline().addLast(new StringDecoder()); // 5\\n            ch.pipeline().addLast(new SimpleChannelInboundHandler<String>() { // 6\\n                @Override', '{\"code\":20000,\"msg\":\"操作成功\",\"success\":true}', 0, NULL, '2022-10-14 15:32:22');
INSERT INTO `sys_oper_log` VALUES (17, '文件管理', 1, 'com.jzj.vblog.web.controller.UploadController.uploadImg()', 'POST', 1, 'admin', NULL, '//api/upload/uploadImg', '127.0.0.1', '内网IP', 'articleLog', '{\"code\":20000,\"data\":{\"url\":\"https://vue-vblog.oss-cn-shenzhen.aliyuncs.com/articleLog/2022/10/31/7e66508406ec40d98d514d08587ae007.jpg\"},\"msg\":\"操作成功\",\"success\":true}', 0, NULL, '2022-10-31 14:15:39');
INSERT INTO `sys_oper_log` VALUES (18, '文件管理', 1, 'com.jzj.vblog.web.controller.UploadController.uploadImg()', 'POST', 1, 'admin', NULL, '/api/upload/uploadImg', '127.0.0.1', '内网IP', 'article', '{\"code\":20000,\"data\":{\"url\":\"https://vue-vblog.oss-cn-shenzhen.aliyuncs.com/article/2022/10/31/2fc01ee15bfd4675bac84e6af65195fd.png\"},\"msg\":\"操作成功\",\"success\":true}', 0, NULL, '2022-10-31 14:58:52');
INSERT INTO `sys_oper_log` VALUES (19, '文件管理', 1, 'com.jzj.vblog.web.controller.UploadController.uploadImg()', 'POST', 1, 'admin', NULL, '/api/upload/uploadImg', '127.0.0.1', '内网IP', 'article', '{\"code\":20000,\"data\":{\"url\":\"https://vue-vblog.oss-cn-shenzhen.aliyuncs.com/article/2022/10/31/b94f713088c449559b4cc9c49a79bb2a.png\"},\"msg\":\"操作成功\",\"success\":true}', 0, NULL, '2022-10-31 15:16:14');
INSERT INTO `sys_oper_log` VALUES (20, '文章管理', 1, 'com.jzj.vblog.web.controller.admin.ArticleInformController.add()', 'POST', 1, 'admin', NULL, '/article/inform', '127.0.0.1', '内网IP', '{\"articleTitle\":\"EasyExcel百万数据导出\",\"introduce\":\"使用EasyExcel导出百万数据\",\"logImg\":\"https://vue-vblog.oss-cn-shenzhen.aliyuncs.com/articleLog/2022/10/31/7e66508406ec40d98d514d08587ae007.jpg\",\"sort\":0,\"content\":\"### 背景\\n公司项目数据量比较大，部分表拥有千万数据量，但是项目里面导出功能陈旧，使用的是传统的POI导出，限制了单次导出数量为6W条，每次用户需要分批次导出。既然有需求那我就尝试能否解决吧。\\n\\n\\n### 未抽取模板版本\\n\\n这段并未抽取成通用模板，泛用性不强，仅测试在指定类型不需要转换下可节省多少时间。\\n```java\\npublic void export(HttpServletRequest request, HttpServletResponse response, JSONObject params) {\\n        long start = System.currentTimeMillis();\\n        OutputStream outputStream = null;\\n        try {\\n            outputStream = response.getOutputStream();\\n            ExcelWriter writer = new ExcelWriter(outputStream, ExcelTypeEnum.XLSX);\\n            String fileName = new String((\\\"excel100w\\\").getBytes(), \\\"UTF-8\\\");\\n            //title\\n            WriteTable writeTable = new WriteTable();\\n            List<List<String>> titles = new ArrayList<>();\\n            titles.add(Arrays.asList(\\\"id\\\"));\\n            titles.add(Arrays.asList(\\\"姓名\\\"));\\n            writeTable.setHead(titles);\\n            //记录总数:实际中需要根据查询条件进行统计即可\\n            Integer totalCount = baseMapper.selectCount(null);\\n            //每一个Sheet存放100w条数据\\n            Integer sheetDataRows = 1000000;\\n            //每次写入的数据量20w\\n            int writeDataRows = 200000;\\n            //计算需要的Sheet数量\\n            int sheetNum = totalCount % sheetDataRows == 0 ? (totalCount / sheetDataRows) : (totalCount / sheetDataRows + 1);\\n            //计算一般情况下每一个Sheet需要写入的次数(一般情况不包含最后一个sheet,因为最后一个sheet不确定会写入多少条数据)\\n            int oneSheetWriteCount = sheetDataRows / writeDataRows;\\n            //计算最后一个sheet需要写入的次数\\n            int lastSheetWriteCount = totalCount % sheetDataRows == 0 ? oneSheetWriteCount : (totalCount % sheetDataRows % writeDataRows == 0 ? (totalCount % sheetDataRows / writeDataRows) : (totalCount % sheetDataRows / writeDataRows + 1));\\n\\n            //开始分批查询分次写入\\n            //注意这次的循环就需要进行嵌套循环了,外层循环是Sheet数目,内层循环是写入次数\\n           ', '{\"code\":20000,\"msg\":\"操作成功\",\"success\":true}', 0, NULL, '2022-10-31 15:17:56');

-- ----------------------------
-- Table structure for sys_todo
-- ----------------------------
DROP TABLE IF EXISTS `sys_todo`;
CREATE TABLE `sys_todo`  (
  `id` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT 'id',
  `create_time` datetime NULL DEFAULT NULL COMMENT '创建时间',
  `update_time` datetime NULL DEFAULT NULL COMMENT '修改时间',
  `done` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '状态',
  `text` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '内容',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = '备忘录' ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of sys_todo
-- ----------------------------
INSERT INTO `sys_todo` VALUES ('5968d94f9d2d78f383c9cb8ee0595756', '2022-08-14 17:47:03', '2022-10-09 09:18:02', '0', '好好好学习天天向上');
INSERT INTO `sys_todo` VALUES ('bd8fd2b4e71b1a4efa58e5f19b26cde9', '2022-09-21 14:57:42', '2022-10-09 09:18:20', '1', '明天写bug');
INSERT INTO `sys_todo` VALUES ('d03d1664f7f5ac853cb5b3a37770bbb6', '2022-09-26 14:22:49', '2022-10-09 09:18:12', '0', '买手机');

-- ----------------------------
-- Table structure for sys_web_information
-- ----------------------------
DROP TABLE IF EXISTS `sys_web_information`;
CREATE TABLE `sys_web_information`  (
  `id` int(11) NOT NULL COMMENT 'id',
  `web_name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '网站名称',
  `web_details` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '网站详情',
  `web_avatar` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '头像',
  `qq` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT 'qq',
  `wechat` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '微信',
  `github` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT 'github',
  `gitee` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT 'gitee',
  `create_time` datetime NULL DEFAULT NULL COMMENT '创建时间',
  `update_time` datetime NULL DEFAULT NULL COMMENT '修改时间',
  `home_banner` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '首页背景图',
  `article_banner` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '文章背景图',
  `wechat_img` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '微信二维码',
  `email` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '邮箱',
  `comment_img` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '评论头像',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = '网站基本信息' ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of sys_web_information
-- ----------------------------
INSERT INTO `sys_web_information` VALUES (1, '漫漫前路', '<p>长路漫漫，吾将上下而求索。</p>', 'https://vue-vblog.oss-cn-shenzhen.aliyuncs.com/webLogo/2022/09/16/de051c412f2f46ba92de7817496cb605.jpg', '946232976', 'fr946232976', 'https://github.com/Jzjzzzz', 'https://gitee.com/jzjzz', '2022-07-28 20:16:13', '2022-09-26 10:56:20', 'https://vue-vblog.oss-cn-shenzhen.aliyuncs.com/webLogo/2022/08/09/a108c42fa21a43a4940c3e08cfd33c4f.jpg', 'https://vue-vblog.oss-cn-shenzhen.aliyuncs.com/webLogo/2022/08/10/9d26abe18ec84eadbaa8b9f180fefee6.jpg', 'https://vue-vblog.oss-cn-shenzhen.aliyuncs.com/webLogo/2022/09/08/f2330c187a6040ed8a74df5aae1cb763.jpg', '946232976@qq.com', 'https://vue-vblog.oss-cn-shenzhen.aliyuncs.com/webLogo/2022/09/19/1b0d32a2d72e4ed58b7cc6ede72621b0.png');

-- ----------------------------
-- Table structure for website_resource
-- ----------------------------
DROP TABLE IF EXISTS `website_resource`;
CREATE TABLE `website_resource`  (
  `id` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '资源站点表id',
  `create_time` datetime NULL DEFAULT NULL COMMENT '创建时间',
  `update_time` datetime NULL DEFAULT NULL COMMENT '修改时间',
  `status` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '状态',
  `resource_name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '资源名称',
  `resource_address` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '资源地址',
  `resource_img` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '资源图片',
  `resource_type` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '资源分类',
  `click_rate` bigint(20) NOT NULL COMMENT '点击量',
  `resource_detail` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '资源描述',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = '资源站点' ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of website_resource
-- ----------------------------

SET FOREIGN_KEY_CHECKS = 1;
